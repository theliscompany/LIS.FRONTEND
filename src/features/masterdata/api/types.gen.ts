// This file is auto-generated by @hey-api/openapi-ts

/**
 * City view model
 */
export type CityViewModel = {
    /**
     * City ID
     */
    id?: number;
    /**
     * City name
     */
    name?: (string) | null;
    /**
     * Country name
     */
    country?: (string) | null;
};

/**
 * Package view model
 */
export type PackageViewModel = {
    /**
     * Package ID
     */
    packageId?: number;
    /**
     * Package name
     */
    packageName?: (string) | null;
    /**
     * Is container flag
     */
    isContainer?: (boolean) | null;
};

/**
 * Port view model
 */
export type PortViewModel = {
    /**
     * Port ID
     */
    portId?: number;
    /**
     * Port name
     */
    portName?: (string) | null;
    /**
     * Country
     */
    country?: (string) | null;
};

/**
 * Product view model
 */
export type ProductViewModel = {
    /**
     * Product ID
     */
    productId?: number;
    /**
     * Product name
     */
    productName?: (string) | null;
    /**
     * Product description
     */
    productDescription?: (string) | null;
};

/**
 * Service Type view model
 */
export type ServiceTypeViewModel = {
    /**
     * Service Type ID
     */
    id?: number;
    /**
     * Service Type name
     */
    name?: (string) | null;
    /**
     * Service Type code
     */
    code?: (string) | null;
    /**
     * Associated services (for detailed views)
     */
    services?: Array<ServiceViewModel> | null;
};

/**
 * Service view model
 */
export type ServiceViewModel = {
    /**
     * Service ID
     */
    serviceId?: number;
    /**
     * Service name
     */
    serviceName?: (string) | null;
    /**
     * Service description
     */
    serviceDescription?: (string) | null;
    /**
     * Service types
     */
    serviceTypes?: Array<ServiceTypeViewModel> | null;
};

export type GetApiCityResponse = (Array<CityViewModel>);

export type GetApiCityError = (unknown);

export type PostApiCityData = {
    /**
     * City data
     */
    body?: CityViewModel;
};

export type PostApiCityResponse = (CityViewModel);

export type PostApiCityError = (unknown);

export type GetApiCityByIdData = {
    path: {
        /**
         * City ID
         */
        id: number;
    };
};

export type GetApiCityByIdResponse = (CityViewModel);

export type GetApiCityByIdError = (unknown);

export type PutApiCityByIdData = {
    /**
     * Updated city data
     */
    body?: CityViewModel;
    path: {
        /**
         * City ID
         */
        id: number;
    };
};

export type PutApiCityByIdResponse = (CityViewModel);

export type PutApiCityByIdError = (unknown);

export type DeleteApiCityByIdData = {
    path: {
        /**
         * City ID
         */
        id: number;
    };
};

export type DeleteApiCityByIdResponse = (void);

export type DeleteApiCityByIdError = (unknown);

export type GetApiCityCountryByCountryData = {
    path: {
        /**
         * Country name
         */
        country: string;
    };
};

export type GetApiCityCountryByCountryResponse = (Array<CityViewModel>);

export type GetApiCityCountryByCountryError = (unknown);

export type GetApiCitySearchData = {
    query?: {
        /**
         * Search term
         */
        searchTerm?: string;
    };
};

export type GetApiCitySearchResponse = (Array<CityViewModel>);

export type GetApiCitySearchError = (unknown);

export type GetApiPackageData = {
    query?: {
        /**
         * Filter to show only containers
         */
        containerOnly?: boolean;
    };
};

export type GetApiPackageResponse = (Array<PackageViewModel>);

export type GetApiPackageError = (unknown);

export type GetApiPortResponse = (Array<PortViewModel>);

export type GetApiPortError = (unknown);

export type PostApiPortData = {
    /**
     * Port data
     */
    body?: PortViewModel;
};

export type PostApiPortResponse = (PortViewModel);

export type PostApiPortError = (unknown);

export type GetApiPortByIdData = {
    path: {
        /**
         * Port ID
         */
        id: number;
    };
};

export type GetApiPortByIdResponse = (PortViewModel);

export type GetApiPortByIdError = (unknown);

export type PutApiPortByIdData = {
    /**
     * Updated port data
     */
    body?: PortViewModel;
    path: {
        /**
         * Port ID
         */
        id: number;
    };
};

export type PutApiPortByIdResponse = (PortViewModel);

export type PutApiPortByIdError = (unknown);

export type DeleteApiPortByIdData = {
    path: {
        /**
         * Port ID
         */
        id: number;
    };
};

export type DeleteApiPortByIdResponse = (void);

export type DeleteApiPortByIdError = (unknown);

export type GetApiProductResponse = (Array<ProductViewModel>);

export type GetApiProductError = (unknown);

export type PostApiProductData = {
    /**
     * Product data
     */
    body?: ProductViewModel;
};

export type PostApiProductResponse = (ProductViewModel);

export type PostApiProductError = (unknown);

export type GetApiProductByIdData = {
    path: {
        /**
         * Product ID
         */
        id: number;
    };
};

export type GetApiProductByIdResponse = (ProductViewModel);

export type GetApiProductByIdError = (unknown);

export type PutApiProductByIdData = {
    /**
     * Updated product data
     */
    body?: ProductViewModel;
    path: {
        /**
         * Product ID
         */
        id: number;
    };
};

export type PutApiProductByIdResponse = (ProductViewModel);

export type PutApiProductByIdError = (unknown);

export type DeleteApiProductByIdData = {
    path: {
        /**
         * Product ID
         */
        id: number;
    };
};

export type DeleteApiProductByIdResponse = (void);

export type DeleteApiProductByIdError = (unknown);

export type GetApiServiceResponse = (Array<ServiceViewModel>);

export type GetApiServiceError = (unknown);

export type PostApiServiceData = {
    /**
     * Service data
     */
    body?: ServiceViewModel;
};

export type PostApiServiceResponse = (ServiceViewModel);

export type PostApiServiceError = (unknown);

export type GetApiServiceByIdData = {
    path: {
        /**
         * Service ID
         */
        id: number;
    };
};

export type GetApiServiceByIdResponse = (ServiceViewModel);

export type GetApiServiceByIdError = (unknown);

export type PutApiServiceByIdData = {
    /**
     * Updated service data
     */
    body?: ServiceViewModel;
    path: {
        /**
         * Service ID
         */
        id: number;
    };
};

export type PutApiServiceByIdResponse = (ServiceViewModel);

export type PutApiServiceByIdError = (unknown);

export type DeleteApiServiceByIdData = {
    path: {
        /**
         * Service ID
         */
        id: number;
    };
};

export type DeleteApiServiceByIdResponse = (void);

export type DeleteApiServiceByIdError = (unknown);

export type GetApiServiceTypeByServiceTypeIdData = {
    path: {
        /**
         * Service type ID
         */
        serviceTypeId: number;
    };
};

export type GetApiServiceTypeByServiceTypeIdResponse = (Array<ServiceViewModel>);

export type GetApiServiceTypeByServiceTypeIdError = (unknown);

export type GetApiServiceWithTypesResponse = (Array<ServiceViewModel>);

export type GetApiServiceWithTypesError = (unknown);

export type GetApiServiceSearchData = {
    query?: {
        /**
         * Search term
         */
        searchTerm?: string;
    };
};

export type GetApiServiceSearchResponse = (Array<ServiceViewModel>);

export type GetApiServiceSearchError = (unknown);

export type GetApiServiceTypeResponse = (Array<ServiceTypeViewModel>);

export type GetApiServiceTypeError = (unknown);

export type PostApiServiceTypeData = {
    /**
     * Service type data
     */
    body?: ServiceTypeViewModel;
};

export type PostApiServiceTypeResponse = (ServiceTypeViewModel);

export type PostApiServiceTypeError = (unknown);

export type GetApiServiceTypeByIdData = {
    path: {
        /**
         * Service type ID
         */
        id: number;
    };
};

export type GetApiServiceTypeByIdResponse = (ServiceTypeViewModel);

export type GetApiServiceTypeByIdError = (unknown);

export type PutApiServiceTypeByIdData = {
    /**
     * Updated service type data
     */
    body?: ServiceTypeViewModel;
    path: {
        /**
         * Service type ID
         */
        id: number;
    };
};

export type PutApiServiceTypeByIdResponse = (ServiceTypeViewModel);

export type PutApiServiceTypeByIdError = (unknown);

export type DeleteApiServiceTypeByIdData = {
    path: {
        /**
         * Service type ID
         */
        id: number;
    };
};

export type DeleteApiServiceTypeByIdResponse = (void);

export type DeleteApiServiceTypeByIdError = (unknown);

export type GetApiServiceTypeCodeByCodeData = {
    path: {
        /**
         * Service type code
         */
        code: string;
    };
};

export type GetApiServiceTypeCodeByCodeResponse = (Array<ServiceTypeViewModel>);

export type GetApiServiceTypeCodeByCodeError = (unknown);

export type GetApiServiceTypeSearchData = {
    query?: {
        /**
         * Search term
         */
        searchTerm?: string;
    };
};

export type GetApiServiceTypeSearchResponse = (Array<ServiceTypeViewModel>);

export type GetApiServiceTypeSearchError = (unknown);

export type GetApiServiceTypeWithServicesResponse = (Array<ServiceTypeViewModel>);

export type GetApiServiceTypeWithServicesError = (unknown);

export type GetApiServiceResponseTransformer = (data: any) => Promise<GetApiServiceResponse>;

export type ServiceViewModelModelResponseTransformer = (data: any) => ServiceViewModel;

export type ServiceTypeViewModelModelResponseTransformer = (data: any) => ServiceTypeViewModel;

export const ServiceTypeViewModelModelResponseTransformer: ServiceTypeViewModelModelResponseTransformer = data => {
    if (Array.isArray(data?.services)) {
        data.services.forEach(ServiceViewModelModelResponseTransformer);
    }
    return data;
};

export const ServiceViewModelModelResponseTransformer: ServiceViewModelModelResponseTransformer = data => {
    if (Array.isArray(data?.serviceTypes)) {
        data.serviceTypes.forEach(ServiceTypeViewModelModelResponseTransformer);
    }
    return data;
};

export const GetApiServiceResponseTransformer: GetApiServiceResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ServiceViewModelModelResponseTransformer);
    }
    return data;
};

export type PostApiServiceResponseTransformer = (data: any) => Promise<PostApiServiceResponse>;

export const PostApiServiceResponseTransformer: PostApiServiceResponseTransformer = async (data) => {
    ServiceViewModelModelResponseTransformer(data);
    return data;
};

export type GetApiServiceByIdResponseTransformer = (data: any) => Promise<GetApiServiceByIdResponse>;

export const GetApiServiceByIdResponseTransformer: GetApiServiceByIdResponseTransformer = async (data) => {
    ServiceViewModelModelResponseTransformer(data);
    return data;
};

export type PutApiServiceByIdResponseTransformer = (data: any) => Promise<PutApiServiceByIdResponse>;

export const PutApiServiceByIdResponseTransformer: PutApiServiceByIdResponseTransformer = async (data) => {
    ServiceViewModelModelResponseTransformer(data);
    return data;
};

export type GetApiServiceTypeByServiceTypeIdResponseTransformer = (data: any) => Promise<GetApiServiceTypeByServiceTypeIdResponse>;

export const GetApiServiceTypeByServiceTypeIdResponseTransformer: GetApiServiceTypeByServiceTypeIdResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ServiceViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiServiceWithTypesResponseTransformer = (data: any) => Promise<GetApiServiceWithTypesResponse>;

export const GetApiServiceWithTypesResponseTransformer: GetApiServiceWithTypesResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ServiceViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiServiceSearchResponseTransformer = (data: any) => Promise<GetApiServiceSearchResponse>;

export const GetApiServiceSearchResponseTransformer: GetApiServiceSearchResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ServiceViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiServiceTypeResponseTransformer = (data: any) => Promise<GetApiServiceTypeResponse>;

export const GetApiServiceTypeResponseTransformer: GetApiServiceTypeResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ServiceTypeViewModelModelResponseTransformer);
    }
    return data;
};

export type PostApiServiceTypeResponseTransformer = (data: any) => Promise<PostApiServiceTypeResponse>;

export const PostApiServiceTypeResponseTransformer: PostApiServiceTypeResponseTransformer = async (data) => {
    ServiceTypeViewModelModelResponseTransformer(data);
    return data;
};

export type GetApiServiceTypeByIdResponseTransformer = (data: any) => Promise<GetApiServiceTypeByIdResponse>;

export const GetApiServiceTypeByIdResponseTransformer: GetApiServiceTypeByIdResponseTransformer = async (data) => {
    ServiceTypeViewModelModelResponseTransformer(data);
    return data;
};

export type PutApiServiceTypeByIdResponseTransformer = (data: any) => Promise<PutApiServiceTypeByIdResponse>;

export const PutApiServiceTypeByIdResponseTransformer: PutApiServiceTypeByIdResponseTransformer = async (data) => {
    ServiceTypeViewModelModelResponseTransformer(data);
    return data;
};

export type GetApiServiceTypeCodeByCodeResponseTransformer = (data: any) => Promise<GetApiServiceTypeCodeByCodeResponse>;

export const GetApiServiceTypeCodeByCodeResponseTransformer: GetApiServiceTypeCodeByCodeResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ServiceTypeViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiServiceTypeSearchResponseTransformer = (data: any) => Promise<GetApiServiceTypeSearchResponse>;

export const GetApiServiceTypeSearchResponseTransformer: GetApiServiceTypeSearchResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ServiceTypeViewModelModelResponseTransformer);
    }
    return data;
};

export type GetApiServiceTypeWithServicesResponseTransformer = (data: any) => Promise<GetApiServiceTypeWithServicesResponse>;

export const GetApiServiceTypeWithServicesResponseTransformer: GetApiServiceTypeWithServicesResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ServiceTypeViewModelModelResponseTransformer);
    }
    return data;
};