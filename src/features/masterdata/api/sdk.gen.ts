// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { GetApiCityError, GetApiCityResponse, PostApiCityData, PostApiCityError, PostApiCityResponse, GetApiCityByIdData, GetApiCityByIdError, GetApiCityByIdResponse, PutApiCityByIdData, PutApiCityByIdError, PutApiCityByIdResponse, DeleteApiCityByIdData, DeleteApiCityByIdError, DeleteApiCityByIdResponse, GetApiCityCountryByCountryData, GetApiCityCountryByCountryError, GetApiCityCountryByCountryResponse, GetApiCitySearchData, GetApiCitySearchError, GetApiCitySearchResponse, GetApiPackageData, GetApiPackageError, GetApiPackageResponse, GetApiPortError, GetApiPortResponse, PostApiPortData, PostApiPortError, PostApiPortResponse, GetApiPortByIdData, GetApiPortByIdError, GetApiPortByIdResponse, PutApiPortByIdData, PutApiPortByIdError, PutApiPortByIdResponse, DeleteApiPortByIdData, DeleteApiPortByIdError, DeleteApiPortByIdResponse, GetApiProductError, GetApiProductResponse, PostApiProductData, PostApiProductError, PostApiProductResponse, GetApiProductByIdData, GetApiProductByIdError, GetApiProductByIdResponse, PutApiProductByIdData, PutApiProductByIdError, PutApiProductByIdResponse, DeleteApiProductByIdData, DeleteApiProductByIdError, DeleteApiProductByIdResponse, GetApiServiceError, GetApiServiceResponse, PostApiServiceData, PostApiServiceError, PostApiServiceResponse, GetApiServiceByIdData, GetApiServiceByIdError, GetApiServiceByIdResponse, PutApiServiceByIdData, PutApiServiceByIdError, PutApiServiceByIdResponse, DeleteApiServiceByIdData, DeleteApiServiceByIdError, DeleteApiServiceByIdResponse, GetApiServiceTypeByServiceTypeIdData, GetApiServiceTypeByServiceTypeIdError, GetApiServiceTypeByServiceTypeIdResponse, GetApiServiceWithTypesError, GetApiServiceWithTypesResponse, GetApiServiceSearchData, GetApiServiceSearchError, GetApiServiceSearchResponse, GetApiServiceTypeError, GetApiServiceTypeResponse, PostApiServiceTypeData, PostApiServiceTypeError, PostApiServiceTypeResponse, GetApiServiceTypeByIdData, GetApiServiceTypeByIdError, GetApiServiceTypeByIdResponse, PutApiServiceTypeByIdData, PutApiServiceTypeByIdError, PutApiServiceTypeByIdResponse, DeleteApiServiceTypeByIdData, DeleteApiServiceTypeByIdError, DeleteApiServiceTypeByIdResponse, GetApiServiceTypeCodeByCodeData, GetApiServiceTypeCodeByCodeError, GetApiServiceTypeCodeByCodeResponse, GetApiServiceTypeSearchData, GetApiServiceTypeSearchError, GetApiServiceTypeSearchResponse, GetApiServiceTypeWithServicesError, GetApiServiceTypeWithServicesResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get all cities
 * Retrieve all cities from the database
 */
export const getApiCity = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiCityResponse, GetApiCityError, ThrowOnError>({
        ...options,
        url: '/api/City'
    });
};

/**
 * Create a new city
 * Create a new city
 */
export const postApiCity = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiCityData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiCityResponse, PostApiCityError, ThrowOnError>({
        ...options,
        url: '/api/City'
    });
};

/**
 * Get city by ID
 * Retrieve a specific city by its ID
 */
export const getApiCityById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiCityByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiCityByIdResponse, GetApiCityByIdError, ThrowOnError>({
        ...options,
        url: '/api/City/{id}'
    });
};

/**
 * Update an existing city
 * Update an existing city
 */
export const putApiCityById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiCityByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiCityByIdResponse, PutApiCityByIdError, ThrowOnError>({
        ...options,
        url: '/api/City/{id}'
    });
};

/**
 * Delete a city
 * Delete a city
 */
export const deleteApiCityById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiCityByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiCityByIdResponse, DeleteApiCityByIdError, ThrowOnError>({
        ...options,
        url: '/api/City/{id}'
    });
};

/**
 * Get cities by country
 * Retrieve all cities in a specific country
 */
export const getApiCityCountryByCountry = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiCityCountryByCountryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiCityCountryByCountryResponse, GetApiCityCountryByCountryError, ThrowOnError>({
        ...options,
        url: '/api/City/country/{country}'
    });
};

/**
 * Search cities by name
 * Search cities by name
 */
export const getApiCitySearch = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiCitySearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiCitySearchResponse, GetApiCitySearchError, ThrowOnError>({
        ...options,
        url: '/api/City/search'
    });
};

/**
 * Get all packages
 * Retrieve all packages from the database
 */
export const getApiPackage = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiPackageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiPackageResponse, GetApiPackageError, ThrowOnError>({
        ...options,
        url: '/api/Package'
    });
};

/**
 * Get all ports
 * Retrieve all ports from the database
 */
export const getApiPort = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiPortResponse, GetApiPortError, ThrowOnError>({
        ...options,
        url: '/api/Port'
    });
};

/**
 * Create new port
 * Create a new port
 */
export const postApiPort = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiPortData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiPortResponse, PostApiPortError, ThrowOnError>({
        ...options,
        url: '/api/Port'
    });
};

/**
 * Get port by ID
 * Retrieve a specific port by its ID
 */
export const getApiPortById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiPortByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiPortByIdResponse, GetApiPortByIdError, ThrowOnError>({
        ...options,
        url: '/api/Port/{id}'
    });
};

/**
 * Update port
 * Update an existing port
 */
export const putApiPortById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiPortByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiPortByIdResponse, PutApiPortByIdError, ThrowOnError>({
        ...options,
        url: '/api/Port/{id}'
    });
};

/**
 * Delete port
 * Delete a port
 */
export const deleteApiPortById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiPortByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiPortByIdResponse, DeleteApiPortByIdError, ThrowOnError>({
        ...options,
        url: '/api/Port/{id}'
    });
};

/**
 * Get all products
 * Retrieve all products from the database
 */
export const getApiProduct = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProductResponse, GetApiProductError, ThrowOnError>({
        ...options,
        url: '/api/Product'
    });
};

/**
 * Create new product
 * Create a new product
 */
export const postApiProduct = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiProductData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiProductResponse, PostApiProductError, ThrowOnError>({
        ...options,
        url: '/api/Product'
    });
};

/**
 * Get product by ID
 * Retrieve a specific product by its ID
 */
export const getApiProductById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiProductByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProductByIdResponse, GetApiProductByIdError, ThrowOnError>({
        ...options,
        url: '/api/Product/{id}'
    });
};

/**
 * Update product
 * Update an existing product
 */
export const putApiProductById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiProductByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiProductByIdResponse, PutApiProductByIdError, ThrowOnError>({
        ...options,
        url: '/api/Product/{id}'
    });
};

/**
 * Delete product
 * Delete a product
 */
export const deleteApiProductById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiProductByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiProductByIdResponse, DeleteApiProductByIdError, ThrowOnError>({
        ...options,
        url: '/api/Product/{id}'
    });
};

/**
 * Get all services
 * Retrieve all services from the database
 */
export const getApiService = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceResponse, GetApiServiceError, ThrowOnError>({
        ...options,
        url: '/api/Service'
    });
};

/**
 * Create new service
 * Create a new service
 */
export const postApiService = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiServiceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiServiceResponse, PostApiServiceError, ThrowOnError>({
        ...options,
        url: '/api/Service'
    });
};

/**
 * Get service by ID
 * Retrieve a specific service by its ID
 */
export const getApiServiceById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiServiceByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceByIdResponse, GetApiServiceByIdError, ThrowOnError>({
        ...options,
        url: '/api/Service/{id}'
    });
};

/**
 * Update service
 * Update an existing service
 */
export const putApiServiceById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiServiceByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiServiceByIdResponse, PutApiServiceByIdError, ThrowOnError>({
        ...options,
        url: '/api/Service/{id}'
    });
};

/**
 * Delete service
 * Delete a service
 */
export const deleteApiServiceById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiServiceByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiServiceByIdResponse, DeleteApiServiceByIdError, ThrowOnError>({
        ...options,
        url: '/api/Service/{id}'
    });
};

/**
 * Get services by service type
 * Retrieve services by their service type ID
 */
export const getApiServiceTypeByServiceTypeId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiServiceTypeByServiceTypeIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceTypeByServiceTypeIdResponse, GetApiServiceTypeByServiceTypeIdError, ThrowOnError>({
        ...options,
        url: '/api/Service/type/{serviceTypeId}'
    });
};

/**
 * Get services with their types
 * Retrieve services with their associated service types
 */
export const getApiServiceWithTypes = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceWithTypesResponse, GetApiServiceWithTypesError, ThrowOnError>({
        ...options,
        url: '/api/Service/with-types'
    });
};

/**
 * Search services by name
 * Search services by name
 */
export const getApiServiceSearch = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiServiceSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceSearchResponse, GetApiServiceSearchError, ThrowOnError>({
        ...options,
        url: '/api/Service/search'
    });
};

/**
 * Get all service types
 * Retrieve all service types from the database
 */
export const getApiServiceType = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceTypeResponse, GetApiServiceTypeError, ThrowOnError>({
        ...options,
        url: '/api/ServiceType'
    });
};

/**
 * Create new service type
 * Create a new service type
 */
export const postApiServiceType = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiServiceTypeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiServiceTypeResponse, PostApiServiceTypeError, ThrowOnError>({
        ...options,
        url: '/api/ServiceType'
    });
};

/**
 * Get service type by ID
 * Retrieve a specific service type by its ID
 */
export const getApiServiceTypeById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiServiceTypeByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceTypeByIdResponse, GetApiServiceTypeByIdError, ThrowOnError>({
        ...options,
        url: '/api/ServiceType/{id}'
    });
};

/**
 * Update service type
 * Update an existing service type
 */
export const putApiServiceTypeById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiServiceTypeByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiServiceTypeByIdResponse, PutApiServiceTypeByIdError, ThrowOnError>({
        ...options,
        url: '/api/ServiceType/{id}'
    });
};

/**
 * Delete service type
 * Delete an existing service type
 */
export const deleteApiServiceTypeById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiServiceTypeByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiServiceTypeByIdResponse, DeleteApiServiceTypeByIdError, ThrowOnError>({
        ...options,
        url: '/api/ServiceType/{id}'
    });
};

/**
 * Get service types by code
 * Retrieve service types by their code
 */
export const getApiServiceTypeCodeByCode = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiServiceTypeCodeByCodeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceTypeCodeByCodeResponse, GetApiServiceTypeCodeByCodeError, ThrowOnError>({
        ...options,
        url: '/api/ServiceType/code/{code}'
    });
};

/**
 * Search service types by name
 * Search service types by name
 */
export const getApiServiceTypeSearch = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiServiceTypeSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceTypeSearchResponse, GetApiServiceTypeSearchError, ThrowOnError>({
        ...options,
        url: '/api/ServiceType/search'
    });
};

/**
 * Get service types with their services
 * Retrieve service types with their associated services
 */
export const getApiServiceTypeWithServices = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiServiceTypeWithServicesResponse, GetApiServiceTypeWithServicesError, ThrowOnError>({
        ...options,
        url: '/api/ServiceType/with-services'
    });
};