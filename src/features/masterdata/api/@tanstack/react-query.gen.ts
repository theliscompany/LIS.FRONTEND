// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { client, getApiCity, postApiCity, getApiCityById, putApiCityById, deleteApiCityById, getApiCityCountryByCountry, getApiCitySearch, getApiPackage, getApiPort, postApiPort, getApiPortById, putApiPortById, deleteApiPortById, getApiProduct, postApiProduct, getApiProductById, putApiProductById, deleteApiProductById, getApiService, postApiService, getApiServiceById, putApiServiceById, deleteApiServiceById, getApiServiceTypeByServiceTypeId, getApiServiceWithTypes, getApiServiceSearch, getApiServiceType, postApiServiceType, getApiServiceTypeById, putApiServiceTypeById, deleteApiServiceTypeById, getApiServiceTypeCodeByCode, getApiServiceTypeSearch, getApiServiceTypeWithServices } from '../sdk.gen';
import type { PostApiCityData, PostApiCityError, PostApiCityResponse, GetApiCityByIdData, PutApiCityByIdData, PutApiCityByIdError, PutApiCityByIdResponse, DeleteApiCityByIdData, DeleteApiCityByIdError, DeleteApiCityByIdResponse, GetApiCityCountryByCountryData, GetApiCitySearchData, GetApiPackageData, PostApiPortData, PostApiPortError, PostApiPortResponse, GetApiPortByIdData, PutApiPortByIdData, PutApiPortByIdError, PutApiPortByIdResponse, DeleteApiPortByIdData, DeleteApiPortByIdError, DeleteApiPortByIdResponse, PostApiProductData, PostApiProductError, PostApiProductResponse, GetApiProductByIdData, PutApiProductByIdData, PutApiProductByIdError, PutApiProductByIdResponse, DeleteApiProductByIdData, DeleteApiProductByIdError, DeleteApiProductByIdResponse, PostApiServiceData, PostApiServiceError, PostApiServiceResponse, GetApiServiceByIdData, PutApiServiceByIdData, PutApiServiceByIdError, PutApiServiceByIdResponse, DeleteApiServiceByIdData, DeleteApiServiceByIdError, DeleteApiServiceByIdResponse, GetApiServiceTypeByServiceTypeIdData, GetApiServiceSearchData, PostApiServiceTypeData, PostApiServiceTypeError, PostApiServiceTypeResponse, GetApiServiceTypeByIdData, PutApiServiceTypeByIdData, PutApiServiceTypeByIdError, PutApiServiceTypeByIdResponse, DeleteApiServiceTypeByIdData, DeleteApiServiceTypeByIdError, DeleteApiServiceTypeByIdResponse, GetApiServiceTypeCodeByCodeData, GetApiServiceTypeSearchData } from '../types.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getApiCityQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiCity', options)
];

export const getApiCityOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiCity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiCityQueryKey(options)
    });
};

export const postApiCityQueryKey = (options?: OptionsLegacyParser<PostApiCityData>) => [
    createQueryKey('postApiCity', options)
];

export const postApiCityOptions = (options?: OptionsLegacyParser<PostApiCityData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiCity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiCityQueryKey(options)
    });
};

export const postApiCityMutation = (options?: Partial<OptionsLegacyParser<PostApiCityData>>) => {
    const mutationOptions: UseMutationOptions<PostApiCityResponse, AxiosError<PostApiCityError>, OptionsLegacyParser<PostApiCityData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiCity({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiCityByIdQueryKey = (options: OptionsLegacyParser<GetApiCityByIdData>) => [
    createQueryKey('getApiCityById', options)
];

export const getApiCityByIdOptions = (options: OptionsLegacyParser<GetApiCityByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiCityById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiCityByIdQueryKey(options)
    });
};

export const putApiCityByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiCityByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiCityByIdResponse, AxiosError<PutApiCityByIdError>, OptionsLegacyParser<PutApiCityByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiCityById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiCityByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiCityByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiCityByIdResponse, AxiosError<DeleteApiCityByIdError>, OptionsLegacyParser<DeleteApiCityByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiCityById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiCityCountryByCountryQueryKey = (options: OptionsLegacyParser<GetApiCityCountryByCountryData>) => [
    createQueryKey('getApiCityCountryByCountry', options)
];

export const getApiCityCountryByCountryOptions = (options: OptionsLegacyParser<GetApiCityCountryByCountryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiCityCountryByCountry({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiCityCountryByCountryQueryKey(options)
    });
};

export const getApiCitySearchQueryKey = (options?: OptionsLegacyParser<GetApiCitySearchData>) => [
    createQueryKey('getApiCitySearch', options)
];

export const getApiCitySearchOptions = (options?: OptionsLegacyParser<GetApiCitySearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiCitySearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiCitySearchQueryKey(options)
    });
};

export const getApiPackageQueryKey = (options?: OptionsLegacyParser<GetApiPackageData>) => [
    createQueryKey('getApiPackage', options)
];

export const getApiPackageOptions = (options?: OptionsLegacyParser<GetApiPackageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPackage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPackageQueryKey(options)
    });
};

export const getApiPortQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiPort', options)
];

export const getApiPortOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPort({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPortQueryKey(options)
    });
};

export const postApiPortQueryKey = (options?: OptionsLegacyParser<PostApiPortData>) => [
    createQueryKey('postApiPort', options)
];

export const postApiPortOptions = (options?: OptionsLegacyParser<PostApiPortData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiPort({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiPortQueryKey(options)
    });
};

export const postApiPortMutation = (options?: Partial<OptionsLegacyParser<PostApiPortData>>) => {
    const mutationOptions: UseMutationOptions<PostApiPortResponse, AxiosError<PostApiPortError>, OptionsLegacyParser<PostApiPortData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiPort({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiPortByIdQueryKey = (options: OptionsLegacyParser<GetApiPortByIdData>) => [
    createQueryKey('getApiPortById', options)
];

export const getApiPortByIdOptions = (options: OptionsLegacyParser<GetApiPortByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiPortById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiPortByIdQueryKey(options)
    });
};

export const putApiPortByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiPortByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiPortByIdResponse, AxiosError<PutApiPortByIdError>, OptionsLegacyParser<PutApiPortByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiPortById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiPortByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiPortByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiPortByIdResponse, AxiosError<DeleteApiPortByIdError>, OptionsLegacyParser<DeleteApiPortByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiPortById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProductQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiProduct', options)
];

export const getApiProductOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProduct({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProductQueryKey(options)
    });
};

export const postApiProductQueryKey = (options?: OptionsLegacyParser<PostApiProductData>) => [
    createQueryKey('postApiProduct', options)
];

export const postApiProductOptions = (options?: OptionsLegacyParser<PostApiProductData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiProduct({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiProductQueryKey(options)
    });
};

export const postApiProductMutation = (options?: Partial<OptionsLegacyParser<PostApiProductData>>) => {
    const mutationOptions: UseMutationOptions<PostApiProductResponse, AxiosError<PostApiProductError>, OptionsLegacyParser<PostApiProductData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiProduct({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiProductByIdQueryKey = (options: OptionsLegacyParser<GetApiProductByIdData>) => [
    createQueryKey('getApiProductById', options)
];

export const getApiProductByIdOptions = (options: OptionsLegacyParser<GetApiProductByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiProductById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiProductByIdQueryKey(options)
    });
};

export const putApiProductByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiProductByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiProductByIdResponse, AxiosError<PutApiProductByIdError>, OptionsLegacyParser<PutApiProductByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiProductById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiProductByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiProductByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiProductByIdResponse, AxiosError<DeleteApiProductByIdError>, OptionsLegacyParser<DeleteApiProductByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiProductById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiServiceQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiService', options)
];

export const getApiServiceOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiService({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceQueryKey(options)
    });
};

export const postApiServiceQueryKey = (options?: OptionsLegacyParser<PostApiServiceData>) => [
    createQueryKey('postApiService', options)
];

export const postApiServiceOptions = (options?: OptionsLegacyParser<PostApiServiceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiService({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiServiceQueryKey(options)
    });
};

export const postApiServiceMutation = (options?: Partial<OptionsLegacyParser<PostApiServiceData>>) => {
    const mutationOptions: UseMutationOptions<PostApiServiceResponse, AxiosError<PostApiServiceError>, OptionsLegacyParser<PostApiServiceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiService({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiServiceByIdQueryKey = (options: OptionsLegacyParser<GetApiServiceByIdData>) => [
    createQueryKey('getApiServiceById', options)
];

export const getApiServiceByIdOptions = (options: OptionsLegacyParser<GetApiServiceByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceByIdQueryKey(options)
    });
};

export const putApiServiceByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiServiceByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiServiceByIdResponse, AxiosError<PutApiServiceByIdError>, OptionsLegacyParser<PutApiServiceByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiServiceById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiServiceByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiServiceByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiServiceByIdResponse, AxiosError<DeleteApiServiceByIdError>, OptionsLegacyParser<DeleteApiServiceByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiServiceById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiServiceTypeByServiceTypeIdQueryKey = (options: OptionsLegacyParser<GetApiServiceTypeByServiceTypeIdData>) => [
    createQueryKey('getApiServiceTypeByServiceTypeId', options)
];

export const getApiServiceTypeByServiceTypeIdOptions = (options: OptionsLegacyParser<GetApiServiceTypeByServiceTypeIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceTypeByServiceTypeId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceTypeByServiceTypeIdQueryKey(options)
    });
};

export const getApiServiceWithTypesQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiServiceWithTypes', options)
];

export const getApiServiceWithTypesOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceWithTypes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceWithTypesQueryKey(options)
    });
};

export const getApiServiceSearchQueryKey = (options?: OptionsLegacyParser<GetApiServiceSearchData>) => [
    createQueryKey('getApiServiceSearch', options)
];

export const getApiServiceSearchOptions = (options?: OptionsLegacyParser<GetApiServiceSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceSearchQueryKey(options)
    });
};

export const getApiServiceTypeQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiServiceType', options)
];

export const getApiServiceTypeOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceType({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceTypeQueryKey(options)
    });
};

export const postApiServiceTypeQueryKey = (options?: OptionsLegacyParser<PostApiServiceTypeData>) => [
    createQueryKey('postApiServiceType', options)
];

export const postApiServiceTypeOptions = (options?: OptionsLegacyParser<PostApiServiceTypeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiServiceType({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiServiceTypeQueryKey(options)
    });
};

export const postApiServiceTypeMutation = (options?: Partial<OptionsLegacyParser<PostApiServiceTypeData>>) => {
    const mutationOptions: UseMutationOptions<PostApiServiceTypeResponse, AxiosError<PostApiServiceTypeError>, OptionsLegacyParser<PostApiServiceTypeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiServiceType({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiServiceTypeByIdQueryKey = (options: OptionsLegacyParser<GetApiServiceTypeByIdData>) => [
    createQueryKey('getApiServiceTypeById', options)
];

export const getApiServiceTypeByIdOptions = (options: OptionsLegacyParser<GetApiServiceTypeByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceTypeById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceTypeByIdQueryKey(options)
    });
};

export const putApiServiceTypeByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiServiceTypeByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiServiceTypeByIdResponse, AxiosError<PutApiServiceTypeByIdError>, OptionsLegacyParser<PutApiServiceTypeByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiServiceTypeById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiServiceTypeByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiServiceTypeByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiServiceTypeByIdResponse, AxiosError<DeleteApiServiceTypeByIdError>, OptionsLegacyParser<DeleteApiServiceTypeByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiServiceTypeById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiServiceTypeCodeByCodeQueryKey = (options: OptionsLegacyParser<GetApiServiceTypeCodeByCodeData>) => [
    createQueryKey('getApiServiceTypeCodeByCode', options)
];

export const getApiServiceTypeCodeByCodeOptions = (options: OptionsLegacyParser<GetApiServiceTypeCodeByCodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceTypeCodeByCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceTypeCodeByCodeQueryKey(options)
    });
};

export const getApiServiceTypeSearchQueryKey = (options?: OptionsLegacyParser<GetApiServiceTypeSearchData>) => [
    createQueryKey('getApiServiceTypeSearch', options)
];

export const getApiServiceTypeSearchOptions = (options?: OptionsLegacyParser<GetApiServiceTypeSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceTypeSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceTypeSearchQueryKey(options)
    });
};

export const getApiServiceTypeWithServicesQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiServiceTypeWithServices', options)
];

export const getApiServiceTypeWithServicesOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceTypeWithServices({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceTypeWithServicesQueryKey(options)
    });
};