// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { PostApiQuotesData, PostApiQuotesError, PostApiQuotesResponse, GetApiQuotesData, GetApiQuotesByIdData, PutApiQuotesByIdData, PutApiQuotesByIdError, PutApiQuotesByIdResponse, DeleteApiQuotesByIdData, DeleteApiQuotesByIdError, DeleteApiQuotesByIdResponse, PostApiQuotesByIdApprovalData, PostApiQuotesByIdApprovalError, PostApiQuotesByIdApprovalResponse, PostApiDraftQuotesData, PostApiDraftQuotesError, PostApiDraftQuotesResponse, GetApiDraftQuotesData, GetApiDraftQuotesError, GetApiDraftQuotesResponse, GetApiDraftQuotesByIdData, PutApiDraftQuotesByIdData, PutApiDraftQuotesByIdError, PutApiDraftQuotesByIdResponse, DeleteApiDraftQuotesByIdData, DeleteApiDraftQuotesByIdError, DeleteApiDraftQuotesByIdResponse, PostApiDraftQuotesByIdOptionsData, PostApiDraftQuotesByIdOptionsError, PostApiDraftQuotesByIdOptionsResponse, DeleteApiDraftQuotesByIdOptionsByOptionIdData, DeleteApiDraftQuotesByIdOptionsByOptionIdError, DeleteApiDraftQuotesByIdOptionsByOptionIdResponse, PostApiDraftQuotesByIdFinalizeData, PostApiDraftQuotesByIdFinalizeError, PostApiDraftQuotesByIdFinalizeResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client, postApiQuotes, getApiQuotes, getApiQuotesById, putApiQuotesById, deleteApiQuotesById, postApiQuotesByIdApproval, postApiDraftQuotes, getApiDraftQuotes, getApiDraftQuotesById, putApiDraftQuotesById, deleteApiDraftQuotesById, postApiDraftQuotesByIdOptions, deleteApiDraftQuotesByIdOptionsByOptionId, postApiDraftQuotesByIdFinalize } from '../sdk.gen';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const postApiQuotesQueryKey = (options?: OptionsLegacyParser<PostApiQuotesData>) => [
    createQueryKey('postApiQuotes', options)
];

export const postApiQuotesOptions = (options?: OptionsLegacyParser<PostApiQuotesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiQuotes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiQuotesQueryKey(options)
    });
};

export const postApiQuotesMutation = (options?: Partial<OptionsLegacyParser<PostApiQuotesData>>) => {
    const mutationOptions: UseMutationOptions<PostApiQuotesResponse, AxiosError<PostApiQuotesError>, OptionsLegacyParser<PostApiQuotesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiQuotes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiQuotesQueryKey = (options?: OptionsLegacyParser<GetApiQuotesData>) => [
    createQueryKey('getApiQuotes', options)
];

export const getApiQuotesOptions = (options?: OptionsLegacyParser<GetApiQuotesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiQuotes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiQuotesQueryKey(options)
    });
};

export const getApiQuotesByIdQueryKey = (options: OptionsLegacyParser<GetApiQuotesByIdData>) => [
    createQueryKey('getApiQuotesById', options)
];

export const getApiQuotesByIdOptions = (options: OptionsLegacyParser<GetApiQuotesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiQuotesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiQuotesByIdQueryKey(options)
    });
};

export const putApiQuotesByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiQuotesByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiQuotesByIdResponse, AxiosError<PutApiQuotesByIdError>, OptionsLegacyParser<PutApiQuotesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiQuotesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiQuotesByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiQuotesByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiQuotesByIdResponse, AxiosError<DeleteApiQuotesByIdError>, OptionsLegacyParser<DeleteApiQuotesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiQuotesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiQuotesByIdApprovalQueryKey = (options: OptionsLegacyParser<PostApiQuotesByIdApprovalData>) => [
    createQueryKey('postApiQuotesByIdApproval', options)
];

export const postApiQuotesByIdApprovalOptions = (options: OptionsLegacyParser<PostApiQuotesByIdApprovalData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiQuotesByIdApproval({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiQuotesByIdApprovalQueryKey(options)
    });
};

export const postApiQuotesByIdApprovalMutation = (options?: Partial<OptionsLegacyParser<PostApiQuotesByIdApprovalData>>) => {
    const mutationOptions: UseMutationOptions<PostApiQuotesByIdApprovalResponse, AxiosError<PostApiQuotesByIdApprovalError>, OptionsLegacyParser<PostApiQuotesByIdApprovalData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiQuotesByIdApproval({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiDraftQuotesQueryKey = (options?: OptionsLegacyParser<PostApiDraftQuotesData>) => [
    createQueryKey('postApiDraftQuotes', options)
];

export const postApiDraftQuotesOptions = (options?: OptionsLegacyParser<PostApiDraftQuotesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiDraftQuotes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiDraftQuotesQueryKey(options)
    });
};

export const postApiDraftQuotesMutation = (options?: Partial<OptionsLegacyParser<PostApiDraftQuotesData>>) => {
    const mutationOptions: UseMutationOptions<PostApiDraftQuotesResponse, AxiosError<PostApiDraftQuotesError>, OptionsLegacyParser<PostApiDraftQuotesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiDraftQuotes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiDraftQuotesQueryKey = (options?: OptionsLegacyParser<GetApiDraftQuotesData>) => [
    createQueryKey('getApiDraftQuotes', options)
];

export const getApiDraftQuotesOptions = (options?: OptionsLegacyParser<GetApiDraftQuotesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiDraftQuotes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiDraftQuotesQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<OptionsLegacyParser>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<OptionsLegacyParser>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path,
            ...page.path
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query,
            ...page.query
        };
    }
    return params as unknown as typeof page;
};

export const getApiDraftQuotesInfiniteQueryKey = (options?: OptionsLegacyParser<GetApiDraftQuotesData>): QueryKey<OptionsLegacyParser<GetApiDraftQuotesData>> => [
    createQueryKey('getApiDraftQuotes', options, true)
];

export const getApiDraftQuotesInfiniteOptions = (options?: OptionsLegacyParser<GetApiDraftQuotesData>) => {
    return infiniteQueryOptions<GetApiDraftQuotesResponse, AxiosError<GetApiDraftQuotesError>, InfiniteData<GetApiDraftQuotesResponse>, QueryKey<OptionsLegacyParser<GetApiDraftQuotesData>>, number | Pick<QueryKey<OptionsLegacyParser<GetApiDraftQuotesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<GetApiDraftQuotesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getApiDraftQuotes({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiDraftQuotesInfiniteQueryKey(options)
    });
};

export const getApiDraftQuotesByIdQueryKey = (options: OptionsLegacyParser<GetApiDraftQuotesByIdData>) => [
    createQueryKey('getApiDraftQuotesById', options)
];

export const getApiDraftQuotesByIdOptions = (options: OptionsLegacyParser<GetApiDraftQuotesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiDraftQuotesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiDraftQuotesByIdQueryKey(options)
    });
};

export const putApiDraftQuotesByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiDraftQuotesByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiDraftQuotesByIdResponse, AxiosError<PutApiDraftQuotesByIdError>, OptionsLegacyParser<PutApiDraftQuotesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiDraftQuotesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiDraftQuotesByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiDraftQuotesByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiDraftQuotesByIdResponse, AxiosError<DeleteApiDraftQuotesByIdError>, OptionsLegacyParser<DeleteApiDraftQuotesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiDraftQuotesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiDraftQuotesByIdOptionsQueryKey = (options: OptionsLegacyParser<PostApiDraftQuotesByIdOptionsData>) => [
    createQueryKey('postApiDraftQuotesByIdOptions', options)
];

export const postApiDraftQuotesByIdOptionsOptions = (options: OptionsLegacyParser<PostApiDraftQuotesByIdOptionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiDraftQuotesByIdOptions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiDraftQuotesByIdOptionsQueryKey(options)
    });
};

export const postApiDraftQuotesByIdOptionsMutation = (options?: Partial<OptionsLegacyParser<PostApiDraftQuotesByIdOptionsData>>) => {
    const mutationOptions: UseMutationOptions<PostApiDraftQuotesByIdOptionsResponse, AxiosError<PostApiDraftQuotesByIdOptionsError>, OptionsLegacyParser<PostApiDraftQuotesByIdOptionsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiDraftQuotesByIdOptions({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiDraftQuotesByIdOptionsByOptionIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiDraftQuotesByIdOptionsByOptionIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiDraftQuotesByIdOptionsByOptionIdResponse, AxiosError<DeleteApiDraftQuotesByIdOptionsByOptionIdError>, OptionsLegacyParser<DeleteApiDraftQuotesByIdOptionsByOptionIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiDraftQuotesByIdOptionsByOptionId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiDraftQuotesByIdFinalizeQueryKey = (options: OptionsLegacyParser<PostApiDraftQuotesByIdFinalizeData>) => [
    createQueryKey('postApiDraftQuotesByIdFinalize', options)
];

export const postApiDraftQuotesByIdFinalizeOptions = (options: OptionsLegacyParser<PostApiDraftQuotesByIdFinalizeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiDraftQuotesByIdFinalize({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiDraftQuotesByIdFinalizeQueryKey(options)
    });
};

export const postApiDraftQuotesByIdFinalizeMutation = (options?: Partial<OptionsLegacyParser<PostApiDraftQuotesByIdFinalizeData>>) => {
    const mutationOptions: UseMutationOptions<PostApiDraftQuotesByIdFinalizeResponse, AxiosError<PostApiDraftQuotesByIdFinalizeError>, OptionsLegacyParser<PostApiDraftQuotesByIdFinalizeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiDraftQuotesByIdFinalize({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};