// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { PostApiQuotesSearchData, PostApiQuotesSearchError, PostApiQuotesSearchResponse, GetApiQuotesByIdData, DeleteApiQuotesByIdData, DeleteApiQuotesByIdError, DeleteApiQuotesByIdResponse, PostApiQuotesFinalizeByDraftIdData, PostApiQuotesFinalizeByDraftIdError, PostApiQuotesFinalizeByDraftIdResponse, PutApiQuotesByIdStatusData, PutApiQuotesByIdStatusError, PutApiQuotesByIdStatusResponse, PostApiQuotesByIdClientApprovalData, PostApiQuotesByIdClientApprovalError, PostApiQuotesByIdClientApprovalResponse, PostApiDraftQuotesData, PostApiDraftQuotesError, PostApiDraftQuotesResponse, GetApiDraftQuotesByIdData, PutApiDraftQuotesByIdData, PutApiDraftQuotesByIdError, PutApiDraftQuotesByIdResponse, DeleteApiDraftQuotesByIdData, DeleteApiDraftQuotesByIdError, DeleteApiDraftQuotesByIdResponse, PostApiDraftQuotesByIdOptionsData, PostApiDraftQuotesByIdOptionsError, PostApiDraftQuotesByIdOptionsResponse, PostApiDraftQuotesByIdValidateData, PostApiDraftQuotesByIdValidateError, PostApiDraftQuotesByIdValidateResponse, PostApiDraftQuotesSearchData, PostApiDraftQuotesSearchError, PostApiDraftQuotesSearchResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client, postApiQuotesSearch, getApiQuotesById, deleteApiQuotesById, postApiQuotesFinalizeByDraftId, putApiQuotesByIdStatus, postApiQuotesByIdClientApproval, postApiDraftQuotes, getApiDraftQuotesById, putApiDraftQuotesById, deleteApiDraftQuotesById, postApiDraftQuotesByIdOptions, postApiDraftQuotesByIdValidate, postApiDraftQuotesSearch } from '../sdk.gen';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const postApiQuotesSearchQueryKey = (options?: OptionsLegacyParser<PostApiQuotesSearchData>) => [
    createQueryKey('postApiQuotesSearch', options)
];

export const postApiQuotesSearchOptions = (options?: OptionsLegacyParser<PostApiQuotesSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiQuotesSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiQuotesSearchQueryKey(options)
    });
};

export const postApiQuotesSearchMutation = (options?: Partial<OptionsLegacyParser<PostApiQuotesSearchData>>) => {
    const mutationOptions: UseMutationOptions<PostApiQuotesSearchResponse, AxiosError<PostApiQuotesSearchError>, OptionsLegacyParser<PostApiQuotesSearchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiQuotesSearch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiQuotesByIdQueryKey = (options: OptionsLegacyParser<GetApiQuotesByIdData>) => [
    createQueryKey('getApiQuotesById', options)
];

export const getApiQuotesByIdOptions = (options: OptionsLegacyParser<GetApiQuotesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiQuotesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiQuotesByIdQueryKey(options)
    });
};

export const deleteApiQuotesByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiQuotesByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiQuotesByIdResponse, AxiosError<DeleteApiQuotesByIdError>, OptionsLegacyParser<DeleteApiQuotesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiQuotesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiQuotesFinalizeByDraftIdQueryKey = (options: OptionsLegacyParser<PostApiQuotesFinalizeByDraftIdData>) => [
    createQueryKey('postApiQuotesFinalizeByDraftId', options)
];

export const postApiQuotesFinalizeByDraftIdOptions = (options: OptionsLegacyParser<PostApiQuotesFinalizeByDraftIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiQuotesFinalizeByDraftId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiQuotesFinalizeByDraftIdQueryKey(options)
    });
};

export const postApiQuotesFinalizeByDraftIdMutation = (options?: Partial<OptionsLegacyParser<PostApiQuotesFinalizeByDraftIdData>>) => {
    const mutationOptions: UseMutationOptions<PostApiQuotesFinalizeByDraftIdResponse, AxiosError<PostApiQuotesFinalizeByDraftIdError>, OptionsLegacyParser<PostApiQuotesFinalizeByDraftIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiQuotesFinalizeByDraftId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putApiQuotesByIdStatusMutation = (options?: Partial<OptionsLegacyParser<PutApiQuotesByIdStatusData>>) => {
    const mutationOptions: UseMutationOptions<PutApiQuotesByIdStatusResponse, AxiosError<PutApiQuotesByIdStatusError>, OptionsLegacyParser<PutApiQuotesByIdStatusData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiQuotesByIdStatus({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiQuotesByIdClientApprovalQueryKey = (options: OptionsLegacyParser<PostApiQuotesByIdClientApprovalData>) => [
    createQueryKey('postApiQuotesByIdClientApproval', options)
];

export const postApiQuotesByIdClientApprovalOptions = (options: OptionsLegacyParser<PostApiQuotesByIdClientApprovalData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiQuotesByIdClientApproval({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiQuotesByIdClientApprovalQueryKey(options)
    });
};

export const postApiQuotesByIdClientApprovalMutation = (options?: Partial<OptionsLegacyParser<PostApiQuotesByIdClientApprovalData>>) => {
    const mutationOptions: UseMutationOptions<PostApiQuotesByIdClientApprovalResponse, AxiosError<PostApiQuotesByIdClientApprovalError>, OptionsLegacyParser<PostApiQuotesByIdClientApprovalData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiQuotesByIdClientApproval({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiDraftQuotesQueryKey = (options?: OptionsLegacyParser<PostApiDraftQuotesData>) => [
    createQueryKey('postApiDraftQuotes', options)
];

export const postApiDraftQuotesOptions = (options?: OptionsLegacyParser<PostApiDraftQuotesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiDraftQuotes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiDraftQuotesQueryKey(options)
    });
};

export const postApiDraftQuotesMutation = (options?: Partial<OptionsLegacyParser<PostApiDraftQuotesData>>) => {
    const mutationOptions: UseMutationOptions<PostApiDraftQuotesResponse, AxiosError<PostApiDraftQuotesError>, OptionsLegacyParser<PostApiDraftQuotesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiDraftQuotes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiDraftQuotesByIdQueryKey = (options: OptionsLegacyParser<GetApiDraftQuotesByIdData>) => [
    createQueryKey('getApiDraftQuotesById', options)
];

export const getApiDraftQuotesByIdOptions = (options: OptionsLegacyParser<GetApiDraftQuotesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiDraftQuotesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiDraftQuotesByIdQueryKey(options)
    });
};

export const putApiDraftQuotesByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiDraftQuotesByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiDraftQuotesByIdResponse, AxiosError<PutApiDraftQuotesByIdError>, OptionsLegacyParser<PutApiDraftQuotesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiDraftQuotesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiDraftQuotesByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiDraftQuotesByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiDraftQuotesByIdResponse, AxiosError<DeleteApiDraftQuotesByIdError>, OptionsLegacyParser<DeleteApiDraftQuotesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiDraftQuotesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiDraftQuotesByIdOptionsQueryKey = (options: OptionsLegacyParser<PostApiDraftQuotesByIdOptionsData>) => [
    createQueryKey('postApiDraftQuotesByIdOptions', options)
];

export const postApiDraftQuotesByIdOptionsOptions = (options: OptionsLegacyParser<PostApiDraftQuotesByIdOptionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiDraftQuotesByIdOptions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiDraftQuotesByIdOptionsQueryKey(options)
    });
};

export const postApiDraftQuotesByIdOptionsMutation = (options?: Partial<OptionsLegacyParser<PostApiDraftQuotesByIdOptionsData>>) => {
    const mutationOptions: UseMutationOptions<PostApiDraftQuotesByIdOptionsResponse, AxiosError<PostApiDraftQuotesByIdOptionsError>, OptionsLegacyParser<PostApiDraftQuotesByIdOptionsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiDraftQuotesByIdOptions({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiDraftQuotesByIdValidateQueryKey = (options: OptionsLegacyParser<PostApiDraftQuotesByIdValidateData>) => [
    createQueryKey('postApiDraftQuotesByIdValidate', options)
];

export const postApiDraftQuotesByIdValidateOptions = (options: OptionsLegacyParser<PostApiDraftQuotesByIdValidateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiDraftQuotesByIdValidate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiDraftQuotesByIdValidateQueryKey(options)
    });
};

export const postApiDraftQuotesByIdValidateMutation = (options?: Partial<OptionsLegacyParser<PostApiDraftQuotesByIdValidateData>>) => {
    const mutationOptions: UseMutationOptions<PostApiDraftQuotesByIdValidateResponse, AxiosError<PostApiDraftQuotesByIdValidateError>, OptionsLegacyParser<PostApiDraftQuotesByIdValidateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiDraftQuotesByIdValidate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiDraftQuotesSearchQueryKey = (options?: OptionsLegacyParser<PostApiDraftQuotesSearchData>) => [
    createQueryKey('postApiDraftQuotesSearch', options)
];

export const postApiDraftQuotesSearchOptions = (options?: OptionsLegacyParser<PostApiDraftQuotesSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiDraftQuotesSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiDraftQuotesSearchQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<OptionsLegacyParser>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<OptionsLegacyParser>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path,
            ...page.path
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query,
            ...page.query
        };
    }
    return params as unknown as typeof page;
};

export const postApiDraftQuotesSearchInfiniteQueryKey = (options?: OptionsLegacyParser<PostApiDraftQuotesSearchData>): QueryKey<OptionsLegacyParser<PostApiDraftQuotesSearchData>> => [
    createQueryKey('postApiDraftQuotesSearch', options, true)
];

export const postApiDraftQuotesSearchInfiniteOptions = (options?: OptionsLegacyParser<PostApiDraftQuotesSearchData>) => {
    return infiniteQueryOptions<PostApiDraftQuotesSearchResponse, AxiosError<PostApiDraftQuotesSearchError>, InfiniteData<PostApiDraftQuotesSearchResponse>, QueryKey<OptionsLegacyParser<PostApiDraftQuotesSearchData>>, number | Pick<QueryKey<OptionsLegacyParser<PostApiDraftQuotesSearchData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<PostApiDraftQuotesSearchData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                body: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await postApiDraftQuotesSearch({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiDraftQuotesSearchInfiniteQueryKey(options)
    });
};

export const postApiDraftQuotesSearchMutation = (options?: Partial<OptionsLegacyParser<PostApiDraftQuotesSearchData>>) => {
    const mutationOptions: UseMutationOptions<PostApiDraftQuotesSearchResponse, AxiosError<PostApiDraftQuotesSearchError>, OptionsLegacyParser<PostApiDraftQuotesSearchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiDraftQuotesSearch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};