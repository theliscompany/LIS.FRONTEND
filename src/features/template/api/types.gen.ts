// This file is auto-generated by @hey-api/openapi-ts

/**
 * DTO pour une adresse
 */
export type AddressDTO = {
    street?: (string) | null;
    city?: (string) | null;
    zipCode?: (string) | null;
    country?: (string) | null;
};

/**
 * DTO pour les informations client
 */
export type CustomerDTO = {
    name?: (string) | null;
    email?: (string) | null;
    phone?: (string) | null;
    company?: (string) | null;
    address?: AddressDTO;
};

/**
 * DTO pour la validation de données contre un schéma
 */
export type DataValidationRequestDTO = {
    /**
     * Les données à valider
     */
    data?: {
        [key: string]: unknown;
    } | null;
    /**
     * Schémas des objets pour validation
     */
    objectSchemas?: {
        [key: string]: ObjectSchema;
    } | null;
    configuration?: ValidationConfigurationDTO;
};

export type EmailTemplate = {
    id?: (string) | null;
    name?: (string) | null;
    subject?: (string) | null;
    htmlBody?: (string) | null;
    textBody?: (string) | null;
    supportedObjectTypes?: Array<(string)> | null;
    objectSchemas?: {
        [key: string]: ObjectSchema;
    } | null;
    placeholders?: Array<(string)> | null;
    configuration?: TemplateConfiguration;
    author?: (string) | null;
    tags?: Array<(string)> | null;
    createdDate?: Date;
    modifiedDate?: Date;
    currentVersion?: (string) | null;
    versionHistory?: Array<EmailTemplateVersion> | null;
    stats?: TemplateStats;
};

export type EmailTemplateCreateDTO = {
    name?: (string) | null;
    subject?: (string) | null;
    htmlBody?: (string) | null;
    textBody?: (string) | null;
    supportedObjectTypes?: Array<(string)> | null;
    objectSchemas?: {
        [key: string]: ObjectSchema;
    } | null;
    author?: (string) | null;
    tags?: Array<(string)> | null;
    configuration?: TemplateConfiguration;
};

export type EmailTemplatePreviewRequestDTO = {
    subject?: (string) | null;
    htmlBody?: (string) | null;
    textBody?: (string) | null;
    sampleData?: {
        [key: string]: unknown;
    } | null;
    configuration?: TemplateConfiguration;
    objectSchemas?: {
        [key: string]: ObjectSchema;
    } | null;
};

export type EmailTemplateRenderRequestDTO = {
    templateId?: (string) | null;
    objectType?: (string) | null;
    data?: {
        [key: string]: unknown;
    } | null;
    overrideVariables?: {
        [key: string]: (string);
    } | null;
    objectSchemas?: {
        [key: string]: ObjectSchema;
    } | null;
    configuration?: TemplateConfigurationDTO;
};

export type EmailTemplateUpdateDTO = {
    name?: (string) | null;
    subject?: (string) | null;
    htmlBody?: (string) | null;
    textBody?: (string) | null;
    supportedObjectTypes?: Array<(string)> | null;
    objectSchemas?: {
        [key: string]: ObjectSchema;
    } | null;
    author?: (string) | null;
    tags?: Array<(string)> | null;
    currentVersion?: (string) | null;
    changeDescription?: (string) | null;
    configuration?: TemplateConfiguration;
};

export type EmailTemplateVersion = {
    version?: (string) | null;
    subject?: (string) | null;
    htmlBody?: (string) | null;
    textBody?: (string) | null;
    createdDate?: Date;
    createdBy?: (string) | null;
    changeDescription?: (string) | null;
};

/**
 * DTO pour le rendu générique de templates avec n'importe quel objet
 */
export type GenericTemplateRenderRequestDTO = {
    /**
     * ID du template existant (optionnel - si fourni, utilise le template sauvegardé)
     */
    templateId?: (string) | null;
    /**
     * Sujet de l'email avec placeholders (requis si pas de TemplateId)
     */
    subject?: (string) | null;
    /**
     * Contenu HTML avec placeholders (requis si pas de TemplateId)
     */
    htmlBody?: (string) | null;
    /**
     * Contenu texte avec placeholders (optionnel)
     */
    textBody?: (string) | null;
    /**
     * L'objet de données à utiliser pour la substitution des placeholders
     */
    data?: unknown;
    /**
     * Type d'objet (optionnel, pour validation contre le schéma)
     */
    objectType?: (string) | null;
    configuration?: TemplateConfigurationDTO;
};

/**
 * DTO pour les paramètres mail
 */
export type MailSettingsDTO = {
    from?: (string) | null;
    fromName?: (string) | null;
    replyTo?: (string) | null;
    companyName?: (string) | null;
    companyLogo?: (string) | null;
    supportEmail?: (string) | null;
    websiteUrl?: (string) | null;
};

export type ObjectSchema = {
    id?: (string) | null;
    typeName?: (string) | null;
    properties?: {
        [key: string]: PropertySchema;
    } | null;
    isRequired?: boolean;
    description?: (string) | null;
};

export type ObjectSchemaDTO = {
    typeName?: (string) | null;
    description?: (string) | null;
    properties?: {
        [key: string]: PropertySchemaDTO;
    } | null;
    isRequired?: boolean;
};

/**
 * DTO pour l'extraction de placeholders
 */
export type PlaceholderExtractionRequestDTO = {
    /**
     * Contenu HTML à analyser
     */
    htmlBody?: (string) | null;
    /**
     * Sujet à analyser
     */
    subject?: (string) | null;
    /**
     * Contenu texte à analyser
     */
    textBody?: (string) | null;
    /**
     * Inclure les helpers dans l'extraction
     */
    includeHelpers?: boolean;
    /**
     * Inclure les block helpers (#if, #each, etc.)
     */
    includeBlockHelpers?: boolean;
};

/**
 * DTO pour la réponse d'extraction de placeholders
 */
export type PlaceholderExtractionResponseDTO = {
    /**
     * Placeholders simples trouvés
     */
    simplePlaceholders?: Array<(string)> | null;
    /**
     * Helpers trouvés
     */
    helpers?: Array<(string)> | null;
    /**
     * Block helpers trouvés
     */
    blockHelpers?: Array<(string)> | null;
    /**
     * Tous les placeholders uniques
     */
    allPlaceholders?: Array<(string)> | null;
    stats?: PlaceholderStats;
};

/**
 * Statistiques d'extraction de placeholders
 */
export type PlaceholderStats = {
    /**
     * Nombre total de placeholders trouvés
     */
    totalCount?: number;
    /**
     * Nombre de placeholders uniques
     */
    uniqueCount?: number;
    /**
     * Nombre de helpers utilisés
     */
    helpersCount?: number;
    /**
     * Nombre de block helpers utilisés
     */
    blockHelpersCount?: number;
    /**
     * Temps d'extraction en millisecondes
     */
    extractionTimeMs?: number;
};

export type PropertySchema = {
    name?: (string) | null;
    type?: (string) | null;
    isRequired?: boolean;
    defaultValue?: (string) | null;
    format?: (string) | null;
    description?: (string) | null;
    allowedValues?: Array<(string)> | null;
};

export type PropertySchemaDTO = {
    name?: (string) | null;
    type?: (string) | null;
    isRequired?: boolean;
    defaultValue?: (string) | null;
    format?: (string) | null;
    description?: (string) | null;
    allowedValues?: Array<(string)> | null;
};

/**
 * DTO représentant un objet QuoteOffer
 */
export type QuoteOfferDTO = {
    quoteOfferNumber?: (string) | null;
    requestQuoteId?: (string) | null;
    clientNumber?: (string) | null;
    createdDate?: Date;
    expirationDate?: (Date) | null;
    comment?: (string) | null;
    totalAmount?: (number) | null;
    currency?: (string) | null;
    status?: (string) | null;
    customer?: CustomerDTO;
    items?: Array<QuoteOfferItemDTO> | null;
};

/**
 * DTO spécifique pour le rendu d'emails de QuoteOffer
 */
export type QuoteOfferEmailRequestDTO = {
    quoteOffer?: QuoteOfferDTO;
    /**
     * URL d'approbation pour les actions accept/reject
     */
    approvalUrl?: (string) | null;
    mailSettings?: MailSettingsDTO;
    /**
     * Template HTML personnalisé (optionnel - sinon utilise le template par défaut)
     */
    customTemplate?: (string) | null;
    /**
     * Sujet personnalisé (optionnel - sinon utilise le sujet par défaut)
     */
    customSubject?: (string) | null;
    /**
     * Variables supplémentaires à injecter dans le template
     */
    additionalVariables?: {
        [key: string]: unknown;
    } | null;
};

/**
 * DTO pour un item de l'offre
 */
export type QuoteOfferItemDTO = {
    description?: (string) | null;
    quantity?: number;
    unitPrice?: number;
    totalPrice?: number;
    unit?: (string) | null;
};

export type RenderedEmail = {
    subject?: (string) | null;
    htmlBody?: (string) | null;
    textBody?: (string) | null;
    templateId?: (string) | null;
    renderedAt?: Date;
    metadata?: {
        [key: string]: unknown;
    } | null;
    renderDuration?: TimeSpan;
};

export type TemplateConfiguration = {
    engine?: (string) | null;
    allowHtml?: boolean;
    strictMode?: boolean;
    globalVariables?: {
        [key: string]: (string);
    } | null;
    locale?: (string) | null;
    timeZone?: (string) | null;
};

/**
 * DTO pour la configuration d'un template
 */
export type TemplateConfigurationDTO = {
    /**
     * Moteur de template à utiliser (Handlebars, Razor, etc.)
     */
    engine?: (string) | null;
    /**
     * Permettre le HTML dans le contenu
     */
    allowHtml?: boolean;
    /**
     * Mode strict : erreur si placeholder manquant
     */
    strictMode?: boolean;
    /**
     * Variables globales disponibles dans tous les templates
     */
    globalVariables?: {
        [key: string]: (string);
    } | null;
    /**
     * Helpers personnalisés activés
     */
    enabledHelpers?: Array<(string)> | null;
    /**
     * Échapper automatiquement le HTML
     */
    autoEscapeHtml?: boolean;
    /**
     * Timeout pour le rendu (en millisecondes)
     */
    renderTimeout?: number;
};

/**
 * DTO pour la réponse de rendu d'un template
 */
export type TemplateRenderResponseDTO = {
    /**
     * Sujet de l'email rendu
     */
    subject?: (string) | null;
    /**
     * Contenu HTML rendu
     */
    htmlBody?: (string) | null;
    /**
     * Contenu texte rendu
     */
    textBody?: (string) | null;
    /**
     * ID du template utilisé
     */
    templateId?: (string) | null;
    /**
     * Date et heure du rendu
     */
    renderedAt?: Date;
    /**
     * Métadonnées additionnelles
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Temps de rendu en millisecondes
     */
    renderTimeMs?: number;
    /**
     * Avertissements durant le rendu
     */
    warnings?: Array<(string)> | null;
    /**
     * Placeholders utilisés
     */
    usedPlaceholders?: Array<(string)> | null;
    /**
     * Placeholders manquants
     */
    missingPlaceholders?: Array<(string)> | null;
};

export type TemplateStats = {
    usageCount?: number;
    lastUsed?: (Date) | null;
    errorHistory?: Array<(string)> | null;
    averageRenderTime?: number;
    successfulRenders?: number;
    failedRenders?: number;
};

export type TimeSpan = {
    ticks?: number;
    days?: number;
    hours?: number;
    milliseconds?: number;
    microseconds?: number;
    readonly nanoseconds?: number;
    minutes?: number;
    seconds?: number;
    readonly totalDays?: number;
    readonly totalHours?: number;
    readonly totalMilliseconds?: number;
    readonly totalMicroseconds?: number;
    readonly totalNanoseconds?: number;
    readonly totalMinutes?: number;
    readonly totalSeconds?: number;
};

/**
 * Configuration pour la validation de données
 */
export type ValidationConfigurationDTO = {
    /**
     * Mode strict : erreur si propriété requise manquante
     */
    strictMode?: boolean;
    /**
     * Permettre les propriétés supplémentaires non définies dans le schéma
     */
    allowAdditionalProperties?: boolean;
    /**
     * Valider les types de données
     */
    validateTypes?: boolean;
    /**
     * Valider les formats (email, date, etc.)
     */
    validateFormats?: boolean;
};

export type ValidationResult = {
    isValid?: boolean;
    errors?: Array<(string)> | null;
    warnings?: Array<(string)> | null;
    context?: {
        [key: string]: unknown;
    } | null;
};

export type PostApiEmailTemplateData = {
    /**
     * Données du template à créer
     */
    body?: EmailTemplateCreateDTO;
};

export type PostApiEmailTemplateResponse = (EmailTemplate);

export type PostApiEmailTemplateError = (unknown);

export type GetApiEmailTemplateData = {
    query?: {
        Author?: string;
        CreatedAfter?: Date;
        CreatedBefore?: Date;
        CurrentVersion?: string;
        HasErrors?: boolean;
        MaxUsageCount?: number;
        MinUsageCount?: number;
        ModifiedAfter?: Date;
        ModifiedBefore?: Date;
        Name?: string;
        Page?: number;
        PageSize?: number;
        SortBy?: string;
        SortDescending?: boolean;
        SupportedObjectTypes?: Array<(string)>;
        Tags?: Array<(string)>;
    };
};

export type GetApiEmailTemplateResponse = (Array<EmailTemplate>);

export type GetApiEmailTemplateError = unknown;

export type GetApiEmailTemplateByIdData = {
    path: {
        /**
         * Identifiant unique du template
         */
        id: string;
    };
};

export type GetApiEmailTemplateByIdResponse = (EmailTemplate);

export type GetApiEmailTemplateByIdError = (unknown);

export type PutApiEmailTemplateByIdData = {
    body?: EmailTemplateUpdateDTO;
    path: {
        id: string;
    };
};

export type PutApiEmailTemplateByIdResponse = (unknown);

export type PutApiEmailTemplateByIdError = unknown;

export type DeleteApiEmailTemplateByIdData = {
    path: {
        id: string;
    };
};

export type DeleteApiEmailTemplateByIdResponse = (unknown);

export type DeleteApiEmailTemplateByIdError = unknown;

export type PostApiEmailTemplateByIdRenderData = {
    body?: EmailTemplateRenderRequestDTO;
    path: {
        id: string;
    };
};

export type PostApiEmailTemplateByIdRenderResponse = (unknown);

export type PostApiEmailTemplateByIdRenderError = unknown;

export type PostApiEmailTemplateRenderDirectData = {
    /**
     * Template et données pour le rendu
     */
    body?: EmailTemplatePreviewRequestDTO;
};

export type PostApiEmailTemplateRenderDirectResponse = (RenderedEmail);

export type PostApiEmailTemplateRenderDirectError = (unknown);

export type PostApiEmailTemplateByIdPreviewData = {
    body?: {
        [key: string]: unknown;
    };
    path: {
        id: string;
    };
};

export type PostApiEmailTemplateByIdPreviewResponse = (unknown);

export type PostApiEmailTemplateByIdPreviewError = unknown;

export type PostApiEmailTemplateExtractPlaceholdersData = {
    /**
     * Contenu du template à analyser (string ou objet avec propriété 'body')
     */
    body?: unknown;
};

export type PostApiEmailTemplateExtractPlaceholdersResponse = (unknown);

export type PostApiEmailTemplateExtractPlaceholdersError = (unknown);

export type PostApiEmailTemplateExtractPlaceholdersAdvancedData = {
    /**
     * Requête d'extraction avec options
     */
    body?: PlaceholderExtractionRequestDTO;
};

export type PostApiEmailTemplateExtractPlaceholdersAdvancedResponse = (PlaceholderExtractionResponseDTO);

export type PostApiEmailTemplateExtractPlaceholdersAdvancedError = (unknown);

export type PostApiEmailTemplateValidateDataData = {
    /**
     * Données et schémas à valider
     */
    body?: DataValidationRequestDTO;
};

export type PostApiEmailTemplateValidateDataResponse = (ValidationResult);

export type PostApiEmailTemplateValidateDataError = (unknown);

export type PostApiEmailTemplateByIdValidateData = {
    body?: EmailTemplateRenderRequestDTO;
    path: {
        id: string;
    };
};

export type PostApiEmailTemplateByIdValidateResponse = (unknown);

export type PostApiEmailTemplateByIdValidateError = unknown;

export type PostApiEmailTemplateByIdMissingPlaceholdersData = {
    body?: {
        [key: string]: unknown;
    };
    path: {
        id: string;
    };
};

export type PostApiEmailTemplateByIdMissingPlaceholdersResponse = (unknown);

export type PostApiEmailTemplateByIdMissingPlaceholdersError = unknown;

export type GetApiEmailTemplateByIdSampleDataData = {
    path: {
        id: string;
    };
};

export type GetApiEmailTemplateByIdSampleDataResponse = (unknown);

export type GetApiEmailTemplateByIdSampleDataError = unknown;

export type GetApiEmailTemplateByIdStatsData = {
    path: {
        id: string;
    };
};

export type GetApiEmailTemplateByIdStatsResponse = (unknown);

export type GetApiEmailTemplateByIdStatsError = unknown;

export type GetApiEmailTemplateMostUsedData = {
    query?: {
        count?: number;
    };
};

export type GetApiEmailTemplateMostUsedResponse = (unknown);

export type GetApiEmailTemplateMostUsedError = unknown;

export type GetApiEmailTemplateWithErrorsResponse = (unknown);

export type GetApiEmailTemplateWithErrorsError = unknown;

export type PostApiEmailTemplateByIdClearStatsData = {
    path: {
        id: string;
    };
};

export type PostApiEmailTemplateByIdClearStatsResponse = (unknown);

export type PostApiEmailTemplateByIdClearStatsError = unknown;

export type GetApiEmailTemplateByIdVersionsData = {
    path: {
        id: string;
    };
};

export type GetApiEmailTemplateByIdVersionsResponse = (unknown);

export type GetApiEmailTemplateByIdVersionsError = unknown;

export type PostApiEmailTemplateByIdRevertByVersionData = {
    path: {
        id: string;
        version: string;
    };
};

export type PostApiEmailTemplateByIdRevertByVersionResponse = (unknown);

export type PostApiEmailTemplateByIdRevertByVersionError = unknown;

export type PostApiEmailTemplateByIdDuplicateData = {
    body?: string;
    path: {
        id: string;
    };
};

export type PostApiEmailTemplateByIdDuplicateResponse = (unknown);

export type PostApiEmailTemplateByIdDuplicateError = unknown;

export type PostApiEmailTemplateObjectTypesData = {
    /**
     * Schéma du type d'objet à enregistrer
     */
    body?: ObjectSchemaDTO;
};

export type PostApiEmailTemplateObjectTypesResponse = (unknown);

export type PostApiEmailTemplateObjectTypesError = (unknown);

export type GetApiEmailTemplateObjectTypesResponse = (Array<ObjectSchema>);

export type GetApiEmailTemplateObjectTypesError = unknown;

export type GetApiEmailTemplateObjectTypesByTypeNameData = {
    path: {
        /**
         * Nom du type d'objet (ex: "order", "customer", "product")
         */
        typeName: string;
    };
};

export type GetApiEmailTemplateObjectTypesByTypeNameResponse = (ObjectSchema);

export type GetApiEmailTemplateObjectTypesByTypeNameError = (unknown);

export type DeleteApiEmailTemplateObjectTypesByTypeNameData = {
    path: {
        /**
         * Nom du type d'objet à supprimer
         */
        typeName: string;
    };
};

export type DeleteApiEmailTemplateObjectTypesByTypeNameResponse = (unknown);

export type DeleteApiEmailTemplateObjectTypesByTypeNameError = (unknown);

export type PostApiEmailTemplateRenderWithObjectData = {
    /**
     * Requête contenant le template (ID ou inline) et les données
     */
    body?: GenericTemplateRenderRequestDTO;
};

export type PostApiEmailTemplateRenderWithObjectResponse = (TemplateRenderResponseDTO);

export type PostApiEmailTemplateRenderWithObjectError = (unknown);

export type PostApiEmailTemplateRenderQuoteOfferData = {
    /**
     * Données de l'offre et paramètres d'envoi
     */
    body?: QuoteOfferEmailRequestDTO;
};

export type PostApiEmailTemplateRenderQuoteOfferResponse = (TemplateRenderResponseDTO);

export type PostApiEmailTemplateRenderQuoteOfferError = (unknown);

export type PostApiEmailTemplateResponseTransformer = (data: any) => Promise<PostApiEmailTemplateResponse>;

export type EmailTemplateModelResponseTransformer = (data: any) => EmailTemplate;

export type EmailTemplateVersionModelResponseTransformer = (data: any) => EmailTemplateVersion;

export const EmailTemplateVersionModelResponseTransformer: EmailTemplateVersionModelResponseTransformer = data => {
    if (data?.createdDate) {
        data.createdDate = new Date(data.createdDate);
    }
    return data;
};

export type TemplateStatsModelResponseTransformer = (data: any) => TemplateStats;

export const TemplateStatsModelResponseTransformer: TemplateStatsModelResponseTransformer = data => {
    if (data?.lastUsed) {
        data.lastUsed = new Date(data.lastUsed);
    }
    return data;
};

export const EmailTemplateModelResponseTransformer: EmailTemplateModelResponseTransformer = data => {
    if (data?.createdDate) {
        data.createdDate = new Date(data.createdDate);
    }
    if (data?.modifiedDate) {
        data.modifiedDate = new Date(data.modifiedDate);
    }
    if (Array.isArray(data?.versionHistory)) {
        data.versionHistory.forEach(EmailTemplateVersionModelResponseTransformer);
    }
    if (data?.stats) {
        TemplateStatsModelResponseTransformer(data.stats);
    }
    return data;
};

export const PostApiEmailTemplateResponseTransformer: PostApiEmailTemplateResponseTransformer = async (data) => {
    EmailTemplateModelResponseTransformer(data);
    return data;
};

export type GetApiEmailTemplateResponseTransformer = (data: any) => Promise<GetApiEmailTemplateResponse>;

export const GetApiEmailTemplateResponseTransformer: GetApiEmailTemplateResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(EmailTemplateModelResponseTransformer);
    }
    return data;
};

export type GetApiEmailTemplateByIdResponseTransformer = (data: any) => Promise<GetApiEmailTemplateByIdResponse>;

export const GetApiEmailTemplateByIdResponseTransformer: GetApiEmailTemplateByIdResponseTransformer = async (data) => {
    EmailTemplateModelResponseTransformer(data);
    return data;
};

export type PostApiEmailTemplateRenderDirectResponseTransformer = (data: any) => Promise<PostApiEmailTemplateRenderDirectResponse>;

export type RenderedEmailModelResponseTransformer = (data: any) => RenderedEmail;

export const RenderedEmailModelResponseTransformer: RenderedEmailModelResponseTransformer = data => {
    if (data?.renderedAt) {
        data.renderedAt = new Date(data.renderedAt);
    }
    return data;
};

export const PostApiEmailTemplateRenderDirectResponseTransformer: PostApiEmailTemplateRenderDirectResponseTransformer = async (data) => {
    RenderedEmailModelResponseTransformer(data);
    return data;
};

export type PostApiEmailTemplateRenderWithObjectResponseTransformer = (data: any) => Promise<PostApiEmailTemplateRenderWithObjectResponse>;

export type TemplateRenderResponseDTOModelResponseTransformer = (data: any) => TemplateRenderResponseDTO;

export const TemplateRenderResponseDTOModelResponseTransformer: TemplateRenderResponseDTOModelResponseTransformer = data => {
    if (data?.renderedAt) {
        data.renderedAt = new Date(data.renderedAt);
    }
    return data;
};

export const PostApiEmailTemplateRenderWithObjectResponseTransformer: PostApiEmailTemplateRenderWithObjectResponseTransformer = async (data) => {
    TemplateRenderResponseDTOModelResponseTransformer(data);
    return data;
};

export type PostApiEmailTemplateRenderQuoteOfferResponseTransformer = (data: any) => Promise<PostApiEmailTemplateRenderQuoteOfferResponse>;

export const PostApiEmailTemplateRenderQuoteOfferResponseTransformer: PostApiEmailTemplateRenderQuoteOfferResponseTransformer = async (data) => {
    TemplateRenderResponseDTOModelResponseTransformer(data);
    return data;
};