// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { PostApiEmailTemplateData, PostApiEmailTemplateError, PostApiEmailTemplateResponse, GetApiEmailTemplateData, GetApiEmailTemplateByIdData, PutApiEmailTemplateByIdData, PutApiEmailTemplateByIdError, PutApiEmailTemplateByIdResponse, DeleteApiEmailTemplateByIdData, DeleteApiEmailTemplateByIdError, DeleteApiEmailTemplateByIdResponse, PostApiEmailTemplateByIdRenderData, PostApiEmailTemplateByIdRenderError, PostApiEmailTemplateByIdRenderResponse, PostApiEmailTemplateRenderDirectData, PostApiEmailTemplateRenderDirectError, PostApiEmailTemplateRenderDirectResponse, PostApiEmailTemplateByIdPreviewData, PostApiEmailTemplateByIdPreviewError, PostApiEmailTemplateByIdPreviewResponse, PostApiEmailTemplateExtractPlaceholdersData, PostApiEmailTemplateExtractPlaceholdersError, PostApiEmailTemplateExtractPlaceholdersResponse, PostApiEmailTemplateExtractPlaceholdersAdvancedData, PostApiEmailTemplateExtractPlaceholdersAdvancedError, PostApiEmailTemplateExtractPlaceholdersAdvancedResponse, PostApiEmailTemplateValidateDataData, PostApiEmailTemplateValidateDataError, PostApiEmailTemplateValidateDataResponse, PostApiEmailTemplateByIdValidateData, PostApiEmailTemplateByIdValidateError, PostApiEmailTemplateByIdValidateResponse, PostApiEmailTemplateByIdMissingPlaceholdersData, PostApiEmailTemplateByIdMissingPlaceholdersError, PostApiEmailTemplateByIdMissingPlaceholdersResponse, GetApiEmailTemplateByIdSampleDataData, GetApiEmailTemplateByIdStatsData, GetApiEmailTemplateMostUsedData, PostApiEmailTemplateByIdClearStatsData, PostApiEmailTemplateByIdClearStatsError, PostApiEmailTemplateByIdClearStatsResponse, GetApiEmailTemplateByIdVersionsData, PostApiEmailTemplateByIdRevertByVersionData, PostApiEmailTemplateByIdRevertByVersionError, PostApiEmailTemplateByIdRevertByVersionResponse, PostApiEmailTemplateByIdDuplicateData, PostApiEmailTemplateByIdDuplicateError, PostApiEmailTemplateByIdDuplicateResponse, PostApiEmailTemplateObjectTypesData, PostApiEmailTemplateObjectTypesError, PostApiEmailTemplateObjectTypesResponse, GetApiEmailTemplateObjectTypesByTypeNameData, DeleteApiEmailTemplateObjectTypesByTypeNameData, DeleteApiEmailTemplateObjectTypesByTypeNameError, DeleteApiEmailTemplateObjectTypesByTypeNameResponse, PostApiEmailTemplateRenderWithObjectData, PostApiEmailTemplateRenderWithObjectError, PostApiEmailTemplateRenderWithObjectResponse, PostApiEmailTemplateRenderQuoteOfferData, PostApiEmailTemplateRenderQuoteOfferError, PostApiEmailTemplateRenderQuoteOfferResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client, postApiEmailTemplate, getApiEmailTemplate, getApiEmailTemplateById, putApiEmailTemplateById, deleteApiEmailTemplateById, postApiEmailTemplateByIdRender, postApiEmailTemplateRenderDirect, postApiEmailTemplateByIdPreview, postApiEmailTemplateExtractPlaceholders, postApiEmailTemplateExtractPlaceholdersAdvanced, postApiEmailTemplateValidateData, postApiEmailTemplateByIdValidate, postApiEmailTemplateByIdMissingPlaceholders, getApiEmailTemplateByIdSampleData, getApiEmailTemplateByIdStats, getApiEmailTemplateMostUsed, getApiEmailTemplateWithErrors, postApiEmailTemplateByIdClearStats, getApiEmailTemplateByIdVersions, postApiEmailTemplateByIdRevertByVersion, postApiEmailTemplateByIdDuplicate, postApiEmailTemplateObjectTypes, getApiEmailTemplateObjectTypes, getApiEmailTemplateObjectTypesByTypeName, deleteApiEmailTemplateObjectTypesByTypeName, postApiEmailTemplateRenderWithObject, postApiEmailTemplateRenderQuoteOffer } from '../sdk.gen';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const postApiEmailTemplateQueryKey = (options?: OptionsLegacyParser<PostApiEmailTemplateData>) => [
    createQueryKey('postApiEmailTemplate', options)
];

export const postApiEmailTemplateOptions = (options?: OptionsLegacyParser<PostApiEmailTemplateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateQueryKey(options)
    });
};

export const postApiEmailTemplateMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateResponse, AxiosError<PostApiEmailTemplateError>, OptionsLegacyParser<PostApiEmailTemplateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiEmailTemplateQueryKey = (options?: OptionsLegacyParser<GetApiEmailTemplateData>) => [
    createQueryKey('getApiEmailTemplate', options)
];

export const getApiEmailTemplateOptions = (options?: OptionsLegacyParser<GetApiEmailTemplateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmailTemplate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmailTemplateQueryKey(options)
    });
};

export const getApiEmailTemplateByIdQueryKey = (options: OptionsLegacyParser<GetApiEmailTemplateByIdData>) => [
    createQueryKey('getApiEmailTemplateById', options)
];

export const getApiEmailTemplateByIdOptions = (options: OptionsLegacyParser<GetApiEmailTemplateByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmailTemplateById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmailTemplateByIdQueryKey(options)
    });
};

export const putApiEmailTemplateByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiEmailTemplateByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiEmailTemplateByIdResponse, AxiosError<PutApiEmailTemplateByIdError>, OptionsLegacyParser<PutApiEmailTemplateByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiEmailTemplateById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiEmailTemplateByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiEmailTemplateByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiEmailTemplateByIdResponse, AxiosError<DeleteApiEmailTemplateByIdError>, OptionsLegacyParser<DeleteApiEmailTemplateByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiEmailTemplateById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateByIdRenderQueryKey = (options: OptionsLegacyParser<PostApiEmailTemplateByIdRenderData>) => [
    createQueryKey('postApiEmailTemplateByIdRender', options)
];

export const postApiEmailTemplateByIdRenderOptions = (options: OptionsLegacyParser<PostApiEmailTemplateByIdRenderData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateByIdRender({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateByIdRenderQueryKey(options)
    });
};

export const postApiEmailTemplateByIdRenderMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateByIdRenderData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateByIdRenderResponse, AxiosError<PostApiEmailTemplateByIdRenderError>, OptionsLegacyParser<PostApiEmailTemplateByIdRenderData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateByIdRender({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateRenderDirectQueryKey = (options?: OptionsLegacyParser<PostApiEmailTemplateRenderDirectData>) => [
    createQueryKey('postApiEmailTemplateRenderDirect', options)
];

export const postApiEmailTemplateRenderDirectOptions = (options?: OptionsLegacyParser<PostApiEmailTemplateRenderDirectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateRenderDirect({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateRenderDirectQueryKey(options)
    });
};

export const postApiEmailTemplateRenderDirectMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateRenderDirectData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateRenderDirectResponse, AxiosError<PostApiEmailTemplateRenderDirectError>, OptionsLegacyParser<PostApiEmailTemplateRenderDirectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateRenderDirect({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateByIdPreviewQueryKey = (options: OptionsLegacyParser<PostApiEmailTemplateByIdPreviewData>) => [
    createQueryKey('postApiEmailTemplateByIdPreview', options)
];

export const postApiEmailTemplateByIdPreviewOptions = (options: OptionsLegacyParser<PostApiEmailTemplateByIdPreviewData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateByIdPreview({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateByIdPreviewQueryKey(options)
    });
};

export const postApiEmailTemplateByIdPreviewMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateByIdPreviewData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateByIdPreviewResponse, AxiosError<PostApiEmailTemplateByIdPreviewError>, OptionsLegacyParser<PostApiEmailTemplateByIdPreviewData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateByIdPreview({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateExtractPlaceholdersQueryKey = (options?: OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersData>) => [
    createQueryKey('postApiEmailTemplateExtractPlaceholders', options)
];

export const postApiEmailTemplateExtractPlaceholdersOptions = (options?: OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateExtractPlaceholders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateExtractPlaceholdersQueryKey(options)
    });
};

export const postApiEmailTemplateExtractPlaceholdersMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateExtractPlaceholdersResponse, AxiosError<PostApiEmailTemplateExtractPlaceholdersError>, OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateExtractPlaceholders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateExtractPlaceholdersAdvancedQueryKey = (options?: OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersAdvancedData>) => [
    createQueryKey('postApiEmailTemplateExtractPlaceholdersAdvanced', options)
];

export const postApiEmailTemplateExtractPlaceholdersAdvancedOptions = (options?: OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersAdvancedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateExtractPlaceholdersAdvanced({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateExtractPlaceholdersAdvancedQueryKey(options)
    });
};

export const postApiEmailTemplateExtractPlaceholdersAdvancedMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersAdvancedData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateExtractPlaceholdersAdvancedResponse, AxiosError<PostApiEmailTemplateExtractPlaceholdersAdvancedError>, OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersAdvancedData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateExtractPlaceholdersAdvanced({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateValidateDataQueryKey = (options?: OptionsLegacyParser<PostApiEmailTemplateValidateDataData>) => [
    createQueryKey('postApiEmailTemplateValidateData', options)
];

export const postApiEmailTemplateValidateDataOptions = (options?: OptionsLegacyParser<PostApiEmailTemplateValidateDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateValidateData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateValidateDataQueryKey(options)
    });
};

export const postApiEmailTemplateValidateDataMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateValidateDataData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateValidateDataResponse, AxiosError<PostApiEmailTemplateValidateDataError>, OptionsLegacyParser<PostApiEmailTemplateValidateDataData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateValidateData({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateByIdValidateQueryKey = (options: OptionsLegacyParser<PostApiEmailTemplateByIdValidateData>) => [
    createQueryKey('postApiEmailTemplateByIdValidate', options)
];

export const postApiEmailTemplateByIdValidateOptions = (options: OptionsLegacyParser<PostApiEmailTemplateByIdValidateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateByIdValidate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateByIdValidateQueryKey(options)
    });
};

export const postApiEmailTemplateByIdValidateMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateByIdValidateData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateByIdValidateResponse, AxiosError<PostApiEmailTemplateByIdValidateError>, OptionsLegacyParser<PostApiEmailTemplateByIdValidateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateByIdValidate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateByIdMissingPlaceholdersQueryKey = (options: OptionsLegacyParser<PostApiEmailTemplateByIdMissingPlaceholdersData>) => [
    createQueryKey('postApiEmailTemplateByIdMissingPlaceholders', options)
];

export const postApiEmailTemplateByIdMissingPlaceholdersOptions = (options: OptionsLegacyParser<PostApiEmailTemplateByIdMissingPlaceholdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateByIdMissingPlaceholders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateByIdMissingPlaceholdersQueryKey(options)
    });
};

export const postApiEmailTemplateByIdMissingPlaceholdersMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateByIdMissingPlaceholdersData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateByIdMissingPlaceholdersResponse, AxiosError<PostApiEmailTemplateByIdMissingPlaceholdersError>, OptionsLegacyParser<PostApiEmailTemplateByIdMissingPlaceholdersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateByIdMissingPlaceholders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiEmailTemplateByIdSampleDataQueryKey = (options: OptionsLegacyParser<GetApiEmailTemplateByIdSampleDataData>) => [
    createQueryKey('getApiEmailTemplateByIdSampleData', options)
];

export const getApiEmailTemplateByIdSampleDataOptions = (options: OptionsLegacyParser<GetApiEmailTemplateByIdSampleDataData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmailTemplateByIdSampleData({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmailTemplateByIdSampleDataQueryKey(options)
    });
};

export const getApiEmailTemplateByIdStatsQueryKey = (options: OptionsLegacyParser<GetApiEmailTemplateByIdStatsData>) => [
    createQueryKey('getApiEmailTemplateByIdStats', options)
];

export const getApiEmailTemplateByIdStatsOptions = (options: OptionsLegacyParser<GetApiEmailTemplateByIdStatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmailTemplateByIdStats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmailTemplateByIdStatsQueryKey(options)
    });
};

export const getApiEmailTemplateMostUsedQueryKey = (options?: OptionsLegacyParser<GetApiEmailTemplateMostUsedData>) => [
    createQueryKey('getApiEmailTemplateMostUsed', options)
];

export const getApiEmailTemplateMostUsedOptions = (options?: OptionsLegacyParser<GetApiEmailTemplateMostUsedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmailTemplateMostUsed({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmailTemplateMostUsedQueryKey(options)
    });
};

export const getApiEmailTemplateWithErrorsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiEmailTemplateWithErrors', options)
];

export const getApiEmailTemplateWithErrorsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmailTemplateWithErrors({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmailTemplateWithErrorsQueryKey(options)
    });
};

export const postApiEmailTemplateByIdClearStatsQueryKey = (options: OptionsLegacyParser<PostApiEmailTemplateByIdClearStatsData>) => [
    createQueryKey('postApiEmailTemplateByIdClearStats', options)
];

export const postApiEmailTemplateByIdClearStatsOptions = (options: OptionsLegacyParser<PostApiEmailTemplateByIdClearStatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateByIdClearStats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateByIdClearStatsQueryKey(options)
    });
};

export const postApiEmailTemplateByIdClearStatsMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateByIdClearStatsData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateByIdClearStatsResponse, AxiosError<PostApiEmailTemplateByIdClearStatsError>, OptionsLegacyParser<PostApiEmailTemplateByIdClearStatsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateByIdClearStats({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiEmailTemplateByIdVersionsQueryKey = (options: OptionsLegacyParser<GetApiEmailTemplateByIdVersionsData>) => [
    createQueryKey('getApiEmailTemplateByIdVersions', options)
];

export const getApiEmailTemplateByIdVersionsOptions = (options: OptionsLegacyParser<GetApiEmailTemplateByIdVersionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmailTemplateByIdVersions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmailTemplateByIdVersionsQueryKey(options)
    });
};

export const postApiEmailTemplateByIdRevertByVersionQueryKey = (options: OptionsLegacyParser<PostApiEmailTemplateByIdRevertByVersionData>) => [
    createQueryKey('postApiEmailTemplateByIdRevertByVersion', options)
];

export const postApiEmailTemplateByIdRevertByVersionOptions = (options: OptionsLegacyParser<PostApiEmailTemplateByIdRevertByVersionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateByIdRevertByVersion({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateByIdRevertByVersionQueryKey(options)
    });
};

export const postApiEmailTemplateByIdRevertByVersionMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateByIdRevertByVersionData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateByIdRevertByVersionResponse, AxiosError<PostApiEmailTemplateByIdRevertByVersionError>, OptionsLegacyParser<PostApiEmailTemplateByIdRevertByVersionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateByIdRevertByVersion({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateByIdDuplicateQueryKey = (options: OptionsLegacyParser<PostApiEmailTemplateByIdDuplicateData>) => [
    createQueryKey('postApiEmailTemplateByIdDuplicate', options)
];

export const postApiEmailTemplateByIdDuplicateOptions = (options: OptionsLegacyParser<PostApiEmailTemplateByIdDuplicateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateByIdDuplicate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateByIdDuplicateQueryKey(options)
    });
};

export const postApiEmailTemplateByIdDuplicateMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateByIdDuplicateData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateByIdDuplicateResponse, AxiosError<PostApiEmailTemplateByIdDuplicateError>, OptionsLegacyParser<PostApiEmailTemplateByIdDuplicateData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateByIdDuplicate({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateObjectTypesQueryKey = (options?: OptionsLegacyParser<PostApiEmailTemplateObjectTypesData>) => [
    createQueryKey('postApiEmailTemplateObjectTypes', options)
];

export const postApiEmailTemplateObjectTypesOptions = (options?: OptionsLegacyParser<PostApiEmailTemplateObjectTypesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateObjectTypes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateObjectTypesQueryKey(options)
    });
};

export const postApiEmailTemplateObjectTypesMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateObjectTypesData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateObjectTypesResponse, AxiosError<PostApiEmailTemplateObjectTypesError>, OptionsLegacyParser<PostApiEmailTemplateObjectTypesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateObjectTypes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiEmailTemplateObjectTypesQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiEmailTemplateObjectTypes', options)
];

export const getApiEmailTemplateObjectTypesOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmailTemplateObjectTypes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmailTemplateObjectTypesQueryKey(options)
    });
};

export const getApiEmailTemplateObjectTypesByTypeNameQueryKey = (options: OptionsLegacyParser<GetApiEmailTemplateObjectTypesByTypeNameData>) => [
    createQueryKey('getApiEmailTemplateObjectTypesByTypeName', options)
];

export const getApiEmailTemplateObjectTypesByTypeNameOptions = (options: OptionsLegacyParser<GetApiEmailTemplateObjectTypesByTypeNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmailTemplateObjectTypesByTypeName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmailTemplateObjectTypesByTypeNameQueryKey(options)
    });
};

export const deleteApiEmailTemplateObjectTypesByTypeNameMutation = (options?: Partial<OptionsLegacyParser<DeleteApiEmailTemplateObjectTypesByTypeNameData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiEmailTemplateObjectTypesByTypeNameResponse, AxiosError<DeleteApiEmailTemplateObjectTypesByTypeNameError>, OptionsLegacyParser<DeleteApiEmailTemplateObjectTypesByTypeNameData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiEmailTemplateObjectTypesByTypeName({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateRenderWithObjectQueryKey = (options?: OptionsLegacyParser<PostApiEmailTemplateRenderWithObjectData>) => [
    createQueryKey('postApiEmailTemplateRenderWithObject', options)
];

export const postApiEmailTemplateRenderWithObjectOptions = (options?: OptionsLegacyParser<PostApiEmailTemplateRenderWithObjectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateRenderWithObject({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateRenderWithObjectQueryKey(options)
    });
};

export const postApiEmailTemplateRenderWithObjectMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateRenderWithObjectData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateRenderWithObjectResponse, AxiosError<PostApiEmailTemplateRenderWithObjectError>, OptionsLegacyParser<PostApiEmailTemplateRenderWithObjectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateRenderWithObject({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailTemplateRenderQuoteOfferQueryKey = (options?: OptionsLegacyParser<PostApiEmailTemplateRenderQuoteOfferData>) => [
    createQueryKey('postApiEmailTemplateRenderQuoteOffer', options)
];

export const postApiEmailTemplateRenderQuoteOfferOptions = (options?: OptionsLegacyParser<PostApiEmailTemplateRenderQuoteOfferData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmailTemplateRenderQuoteOffer({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailTemplateRenderQuoteOfferQueryKey(options)
    });
};

export const postApiEmailTemplateRenderQuoteOfferMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailTemplateRenderQuoteOfferData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailTemplateRenderQuoteOfferResponse, AxiosError<PostApiEmailTemplateRenderQuoteOfferError>, OptionsLegacyParser<PostApiEmailTemplateRenderQuoteOfferData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmailTemplateRenderQuoteOffer({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};