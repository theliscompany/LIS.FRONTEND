// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { PostApiEmailTemplateData, PostApiEmailTemplateError, PostApiEmailTemplateResponse, GetApiEmailTemplateData, GetApiEmailTemplateError, GetApiEmailTemplateResponse, GetApiEmailTemplateByIdData, GetApiEmailTemplateByIdError, GetApiEmailTemplateByIdResponse, PutApiEmailTemplateByIdData, PutApiEmailTemplateByIdError, PutApiEmailTemplateByIdResponse, DeleteApiEmailTemplateByIdData, DeleteApiEmailTemplateByIdError, DeleteApiEmailTemplateByIdResponse, PostApiEmailTemplateByIdRenderData, PostApiEmailTemplateByIdRenderError, PostApiEmailTemplateByIdRenderResponse, PostApiEmailTemplateRenderDirectData, PostApiEmailTemplateRenderDirectError, PostApiEmailTemplateRenderDirectResponse, PostApiEmailTemplateByIdPreviewData, PostApiEmailTemplateByIdPreviewError, PostApiEmailTemplateByIdPreviewResponse, PostApiEmailTemplateExtractPlaceholdersData, PostApiEmailTemplateExtractPlaceholdersError, PostApiEmailTemplateExtractPlaceholdersResponse, PostApiEmailTemplateExtractPlaceholdersAdvancedData, PostApiEmailTemplateExtractPlaceholdersAdvancedError, PostApiEmailTemplateExtractPlaceholdersAdvancedResponse, PostApiEmailTemplateValidateDataData, PostApiEmailTemplateValidateDataError, PostApiEmailTemplateValidateDataResponse, PostApiEmailTemplateByIdValidateData, PostApiEmailTemplateByIdValidateError, PostApiEmailTemplateByIdValidateResponse, PostApiEmailTemplateByIdMissingPlaceholdersData, PostApiEmailTemplateByIdMissingPlaceholdersError, PostApiEmailTemplateByIdMissingPlaceholdersResponse, GetApiEmailTemplateByIdSampleDataData, GetApiEmailTemplateByIdSampleDataError, GetApiEmailTemplateByIdSampleDataResponse, GetApiEmailTemplateByIdStatsData, GetApiEmailTemplateByIdStatsError, GetApiEmailTemplateByIdStatsResponse, GetApiEmailTemplateMostUsedData, GetApiEmailTemplateMostUsedError, GetApiEmailTemplateMostUsedResponse, GetApiEmailTemplateWithErrorsError, GetApiEmailTemplateWithErrorsResponse, PostApiEmailTemplateByIdClearStatsData, PostApiEmailTemplateByIdClearStatsError, PostApiEmailTemplateByIdClearStatsResponse, GetApiEmailTemplateByIdVersionsData, GetApiEmailTemplateByIdVersionsError, GetApiEmailTemplateByIdVersionsResponse, PostApiEmailTemplateByIdRevertByVersionData, PostApiEmailTemplateByIdRevertByVersionError, PostApiEmailTemplateByIdRevertByVersionResponse, PostApiEmailTemplateByIdDuplicateData, PostApiEmailTemplateByIdDuplicateError, PostApiEmailTemplateByIdDuplicateResponse, PostApiEmailTemplateObjectTypesData, PostApiEmailTemplateObjectTypesError, PostApiEmailTemplateObjectTypesResponse, GetApiEmailTemplateObjectTypesError, GetApiEmailTemplateObjectTypesResponse, GetApiEmailTemplateObjectTypesByTypeNameData, GetApiEmailTemplateObjectTypesByTypeNameError, GetApiEmailTemplateObjectTypesByTypeNameResponse, DeleteApiEmailTemplateObjectTypesByTypeNameData, DeleteApiEmailTemplateObjectTypesByTypeNameError, DeleteApiEmailTemplateObjectTypesByTypeNameResponse, PostApiEmailTemplateRenderWithObjectData, PostApiEmailTemplateRenderWithObjectError, PostApiEmailTemplateRenderWithObjectResponse, PostApiEmailTemplateRenderQuoteOfferData, PostApiEmailTemplateRenderQuoteOfferError, PostApiEmailTemplateRenderQuoteOfferResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Créer un nouveau template d'email
 * Crée un nouveau template d'email avec placeholders Handlebars.
 *
 * Exemple de requête :
 *
 * POST /api/EmailTemplate
 * {
 * "name": "Confirmation de commande",
 * "subject": "Commande {{order.number}} confirmée",
 * "htmlBody": "<h1>Merci {{customer.name}}!</h1><p>Votre commande #{{order.number}} a été confirmée.</p>",
 * "supportedObjectTypes": ["order"],
 * "author": "Admin",
 * "tags": ["commande", "confirmation"]
 * }
 */
export const postApiEmailTemplate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiEmailTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateResponse, PostApiEmailTemplateError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate'
    });
};

/**
 * Récupérer tous les templates avec filtres
 * Récupère la liste de tous les templates d'email avec possibilité de filtrage.
 *
 * Filtres disponibles :
 * - **name** : Recherche par nom (partielle)
 * - **author** : Filtrer par auteur
 * - **tags** : Filtrer par tags (séparés par virgules)
 * - **objectTypes** : Filtrer par types d'objets supportés
 * - **page** et **pageSize** : Pagination
 *
 * Exemples :
 * - GET /api/EmailTemplate?name=commande
 * - GET /api/EmailTemplate?tags=urgent,promo&page=1&pageSize=10
 */
export const getApiEmailTemplate = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiEmailTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEmailTemplateResponse, GetApiEmailTemplateError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate'
    });
};

/**
 * Récupérer un template par son ID
 * Récupère les détails complets d'un template d'email par son identifiant unique.
 */
export const getApiEmailTemplateById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiEmailTemplateByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEmailTemplateByIdResponse, GetApiEmailTemplateByIdError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}'
    });
};

/**
 * Mettre à jour un template existant
 */
export const putApiEmailTemplateById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutApiEmailTemplateByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiEmailTemplateByIdResponse, PutApiEmailTemplateByIdError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}'
    });
};

/**
 * Supprimer un template
 */
export const deleteApiEmailTemplateById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiEmailTemplateByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiEmailTemplateByIdResponse, DeleteApiEmailTemplateByIdError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}'
    });
};

/**
 * Rendre un template avec des données
 */
export const postApiEmailTemplateByIdRender = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiEmailTemplateByIdRenderData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateByIdRenderResponse, PostApiEmailTemplateByIdRenderError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/render'
    });
};

/**
 * Rendre un template directement sans le sauvegarder
 * Permet de tester et rendre un template sans le sauvegarder en base.
 * Idéal pour la prévisualisation et les tests de templates.
 *
 * Exemple de requête :
 *
 * POST /api/EmailTemplate/render-direct
 * {
 * "subject": "Bonjour {{customer.name}}",
 * "htmlBody": "<h1>Merci {{customer.name}}!</h1><p>Commande: {{order.number}}</p>",
 * "sampleData": {
 * "customer": { "name": "Jean Dupont" },
 * "order": { "number": "CMD-123" }
 * }
 * }
 */
export const postApiEmailTemplateRenderDirect = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiEmailTemplateRenderDirectData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateRenderDirectResponse, PostApiEmailTemplateRenderDirectError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/render-direct'
    });
};

/**
 * Prévisualiser un template avec des données d'exemple
 */
export const postApiEmailTemplateByIdPreview = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiEmailTemplateByIdPreviewData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateByIdPreviewResponse, PostApiEmailTemplateByIdPreviewError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/preview'
    });
};

/**
 * Extraire les placeholders d'un contenu
 * Analyse un contenu de template et extrait automatiquement tous les placeholders Handlebars.
 * Utile pour valider un template ou générer la documentation.
 *
 * Types de placeholders détectés :
 * - Simples : {{variable}}
 * - Objets : {{user.name}}, {{order.total}}
 * - Helpers : {{formatDate date}}, {{formatCurrency amount}}
 * - Conditions : {{#if condition}}, {{#each items}}
 *
 * Exemple de requête :
 *
 * POST /api/EmailTemplate/extract-placeholders
 * "Bonjour {{customer.name}}, votre commande {{order.number}} pour {{formatCurrency order.total}} est confirmée."
 */
export const postApiEmailTemplateExtractPlaceholders = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateExtractPlaceholdersResponse, PostApiEmailTemplateExtractPlaceholdersError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/extract-placeholders'
    });
};

/**
 * Extraire les placeholders de façon avancée avec analyse détaillée
 * Analyse avancée d'un template avec extraction détaillée des placeholders, helpers et block helpers.
 * Fournit des statistiques et une analyse complète du template.
 *
 * **Types d'analyse :**
 * - Placeholders simples : {{variable}}
 * - Helpers : {{formatDate date 'dd/MM/yyyy'}}
 * - Block helpers : {{#if condition}}...{{/if}}
 * - Statistiques détaillées
 *
 * **Exemple de requête :**
 *
 * POST /api/EmailTemplate/extract-placeholders-advanced
 * {
 * "htmlBody": "<h1>Bonjour {{customer.name}}!</h1><p>Commande: {{order.number}}<br>Total: {{formatCurrency order.total}}</p>{{#if order.items}}<ul>{{#each order.items}}<li>{{name}} - {{formatCurrency price}}</li>{{/each}}</ul>{{/if}}",
 * "subject": "Commande {{order.number}} - {{customer.name}}",
 * "includeHelpers": true,
 * "includeBlockHelpers": true
 * }
 */
export const postApiEmailTemplateExtractPlaceholdersAdvanced = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiEmailTemplateExtractPlaceholdersAdvancedData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateExtractPlaceholdersAdvancedResponse, PostApiEmailTemplateExtractPlaceholdersAdvancedError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/extract-placeholders-advanced'
    });
};

/**
 * Valider des données contre des schémas d'objets
 * Valide des données JSON contre des schémas d'objets définis.
 * Supporte la validation de chemins pointés et la validation de types.
 *
 * **Fonctionnalités :**
 * - Validation des propriétés requises
 * - Validation des types de données
 * - Validation des chemins pointés (ex: client.name)
 * - Mode strict ou permissif
 *
 * **Exemple de requête :**
 *
 * POST /api/EmailTemplate/validate-data
 * {
 * "data": {
 * "client": { "name": "Jean Dupont", "email": "jean@example.com" },
 * "order": { "number": "CMD-123", "total": 1549.9 }
 * },
 * "objectSchemas": {
 * "client": {
 * "typeName": "client",
 * "properties": {
 * "name": { "name": "name", "type": "string", "isRequired": true },
 * "email": { "name": "email", "type": "string", "isRequired": true }
 * }
 * },
 * "order": {
 * "typeName": "order",
 * "properties": {
 * "number": { "name": "number", "type": "string", "isRequired": true },
 * "total": { "name": "total", "type": "decimal", "isRequired": true }
 * }
 * }
 * },
 * "configuration": {
 * "strictMode": false,
 * "validateTypes": true,
 * "validateFormats": true
 * }
 * }
 */
export const postApiEmailTemplateValidateData = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiEmailTemplateValidateDataData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateValidateDataResponse, PostApiEmailTemplateValidateDataError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/validate-data'
    });
};

/**
 * Valider un template avec des données
 */
export const postApiEmailTemplateByIdValidate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiEmailTemplateByIdValidateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateByIdValidateResponse, PostApiEmailTemplateByIdValidateError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/validate'
    });
};

/**
 * Obtenir les placeholders manquants pour un template
 */
export const postApiEmailTemplateByIdMissingPlaceholders = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiEmailTemplateByIdMissingPlaceholdersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateByIdMissingPlaceholdersResponse, PostApiEmailTemplateByIdMissingPlaceholdersError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/missing-placeholders'
    });
};

/**
 * Générer des données d'exemple pour un template
 */
export const getApiEmailTemplateByIdSampleData = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiEmailTemplateByIdSampleDataData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEmailTemplateByIdSampleDataResponse, GetApiEmailTemplateByIdSampleDataError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/sample-data'
    });
};

/**
 * Obtenir les statistiques d'un template
 */
export const getApiEmailTemplateByIdStats = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiEmailTemplateByIdStatsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEmailTemplateByIdStatsResponse, GetApiEmailTemplateByIdStatsError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/stats'
    });
};

/**
 * Obtenir les templates les plus utilisés
 */
export const getApiEmailTemplateMostUsed = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetApiEmailTemplateMostUsedData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEmailTemplateMostUsedResponse, GetApiEmailTemplateMostUsedError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/most-used'
    });
};

/**
 * Obtenir les templates avec des erreurs
 */
export const getApiEmailTemplateWithErrors = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEmailTemplateWithErrorsResponse, GetApiEmailTemplateWithErrorsError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/with-errors'
    });
};

/**
 * Réinitialiser les statistiques d'un template
 */
export const postApiEmailTemplateByIdClearStats = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiEmailTemplateByIdClearStatsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateByIdClearStatsResponse, PostApiEmailTemplateByIdClearStatsError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/clear-stats'
    });
};

/**
 * Obtenir l'historique des versions d'un template
 */
export const getApiEmailTemplateByIdVersions = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiEmailTemplateByIdVersionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEmailTemplateByIdVersionsResponse, GetApiEmailTemplateByIdVersionsError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/versions'
    });
};

/**
 * Revenir à une version précédente d'un template
 */
export const postApiEmailTemplateByIdRevertByVersion = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiEmailTemplateByIdRevertByVersionData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateByIdRevertByVersionResponse, PostApiEmailTemplateByIdRevertByVersionError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/revert/{version}'
    });
};

/**
 * Dupliquer un template
 */
export const postApiEmailTemplateByIdDuplicate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostApiEmailTemplateByIdDuplicateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateByIdDuplicateResponse, PostApiEmailTemplateByIdDuplicateError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/{id}/duplicate'
    });
};

/**
 * Enregistrer un nouveau type d'objet avec son schéma
 * Enregistre un nouveau type d'objet métier avec son schéma de validation.
 * Permet de définir les propriétés attendues et leurs contraintes.
 *
 * Exemple de requête :
 *
 * POST /api/EmailTemplate/object-types
 * {
 * "typeName": "order",
 * "description": "Commande client",
 * "properties": {
 * "number": { "name": "number", "type": "string", "isRequired": true },
 * "total": { "name": "total", "type": "decimal", "isRequired": true },
 * "customer": { "name": "customer", "type": "object", "isRequired": true }
 * }
 * }
 */
export const postApiEmailTemplateObjectTypes = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiEmailTemplateObjectTypesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateObjectTypesResponse, PostApiEmailTemplateObjectTypesError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/object-types'
    });
};

/**
 * Obtenir tous les types d'objets supportés
 * Récupère la liste de tous les types d'objets métier enregistrés dans le système.
 * Chaque type contient son schéma de validation et ses propriétés.
 */
export const getApiEmailTemplateObjectTypes = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEmailTemplateObjectTypesResponse, GetApiEmailTemplateObjectTypesError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/object-types'
    });
};

/**
 * Obtenir le schéma d'un type d'objet
 * Récupère le schéma détaillé d'un type d'objet spécifique.
 * Inclut toutes les propriétés, leurs types, contraintes et valeurs par défaut.
 */
export const getApiEmailTemplateObjectTypesByTypeName = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetApiEmailTemplateObjectTypesByTypeNameData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiEmailTemplateObjectTypesByTypeNameResponse, GetApiEmailTemplateObjectTypesByTypeNameError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/object-types/{typeName}'
    });
};

/**
 * Supprimer un type d'objet
 * Supprime un type d'objet du système.
 * Attention : cette action peut affecter les templates existants qui utilisent ce type.
 */
export const deleteApiEmailTemplateObjectTypesByTypeName = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteApiEmailTemplateObjectTypesByTypeNameData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiEmailTemplateObjectTypesByTypeNameResponse, DeleteApiEmailTemplateObjectTypesByTypeNameError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/object-types/{typeName}'
    });
};

/**
 * Rendre un template avec un objet quelconque (endpoint générique)
 * Endpoint générique pour rendre n'importe quel template avec n'importe quel objet.
 * Supporte à la fois les templates sauvegardés (via templateId) et les templates inline.
 *
 * **Cas d'utilisation 1 - Template existant :**
 *
 * POST /api/EmailTemplate/render-with-object
 * {
 * "templateId": "64f1a2b3c4d5e6f7g8h9i0j1",
 * "objectType": "order",
 * "data": {
 * "order": { "number": "CMD-123", "total": 99.99 },
 * "customer": { "name": "Jean Dupont" }
 * }
 * }
 *
 * **Cas d'utilisation 2 - Template inline :**
 *
 * POST /api/EmailTemplate/render-with-object
 * {
 * "subject": "Commande {{order.number}} - {{customer.name}}",
 * "htmlBody": "<h1>Merci {{customer.name}}!</h1><p>Commande: {{order.number}}<br>Total: {{formatCurrency order.total}}</p>",
 * "data": {
 * "order": { "number": "CMD-123", "total": 99.99 },
 * "customer": { "name": "Jean Dupont" }
 * }
 * }
 */
export const postApiEmailTemplateRenderWithObject = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiEmailTemplateRenderWithObjectData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateRenderWithObjectResponse, PostApiEmailTemplateRenderWithObjectError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/render-with-object'
    });
};

/**
 * Rendre un email spécifique pour QuoteOffer
 * Endpoint spécialisé pour rendre des emails de devis/offres commerciales.
 * Utilise un template prédéfini optimisé pour les QuoteOffer avec boutons d'approbation.
 *
 * **Fonctionnalités incluses :**
 * - Template HTML responsive avec CSS intégré
 * - Boutons d'acceptation/refus avec liens directs
 * - Formatage automatique des montants et dates
 * - Support des informations client et items
 * - Variables système (date actuelle, URLs, etc.)
 *
 * **Exemple de requête :**
 *
 * POST /api/EmailTemplate/render-quote-offer
 * {
 * "quoteOffer": {
 * "quoteOfferNumber": "QO-2024-001",
 * "requestQuoteId": "RQ-123",
 * "clientNumber": "CLIENT-456",
 * "createdDate": "2024-08-02T10:30:00Z",
 * "totalAmount": 1500.00,
 * "currency": "EUR",
 * "customer": {
 * "name": "Jean Dupont",
 * "email": "jean.dupont@example.com"
 * }
 * },
 * "approvalUrl": "https://myapp.com/approve/QO-2024-001?token=abc123",
 * "mailSettings": {
 * "from": "noreply@mycompany.com",
 * "companyName": "Ma Société"
 * }
 * }
 */
export const postApiEmailTemplateRenderQuoteOffer = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<PostApiEmailTemplateRenderQuoteOfferData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiEmailTemplateRenderQuoteOfferResponse, PostApiEmailTemplateRenderQuoteOfferError, ThrowOnError>({
        ...options,
        url: '/api/EmailTemplate/render-quote-offer'
    });
};