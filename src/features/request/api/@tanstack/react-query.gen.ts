// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { GetApiAssigneeData, PostApiAssigneeData, PostApiAssigneeError, PostApiAssigneeResponse, GetApiAssigneeByIdData, PutApiAssigneeByIdData, PutApiAssigneeByIdError, PutApiAssigneeByIdResponse, DeleteApiAssigneeByIdData, DeleteApiAssigneeByIdError, DeleteApiAssigneeByIdResponse, PostApiEmailData, PostApiEmailError, PostApiEmailResponse, PostEmailConfigData, PostEmailConfigError, PostEmailConfigResponse, PutEmailConfigByIdData, PutEmailConfigByIdError, PutEmailConfigByIdResponse, PostApiFileUploadData, PostApiFileUploadError, PostApiFileUploadResponse, GetApiFileByBlobNameData, DeleteApiFileByBlobNameData, DeleteApiFileByBlobNameError, DeleteApiFileByBlobNameResponse, GetApiFileUriByBlobNameData, PostApiRequestData, PostApiRequestError, PostApiRequestResponse, GetApiRequestData, GetApiRequestError, GetApiRequestResponse, GetApiRequestByIdData, DeleteApiRequestByIdData, DeleteApiRequestByIdError, DeleteApiRequestByIdResponse, PutApiRequestUpdateByIdData, PutApiRequestUpdateByIdError, PutApiRequestUpdateByIdResponse, PutApiRequestByIdChangeStatusData, PutApiRequestByIdChangeStatusError, PutApiRequestByIdChangeStatusResponse, PostApiRequestAdminEnrichCompanyNamesError, PostApiRequestAdminEnrichCompanyNamesResponse, GetApiRequestQuoteNotesData, PostApiRequestQuoteNotesData, PostApiRequestQuoteNotesError, PostApiRequestQuoteNotesResponse, GetApiRequestQuoteNotesByIdData, PutApiRequestQuoteNotesByIdData, PutApiRequestQuoteNotesByIdError, PutApiRequestQuoteNotesByIdResponse, DeleteApiRequestQuoteNotesByIdData, DeleteApiRequestQuoteNotesByIdError, DeleteApiRequestQuoteNotesByIdResponse, PostApiSmsSendData, PostApiSmsSendError, PostApiSmsSendResponse, GetApiTrackingByTrackingNumberData, PostUserGroupUsersByUserIdData, PostUserGroupUsersByUserIdError, PostUserGroupUsersByUserIdResponse, GetUserGroupUsersByUserIdData, DeleteUserGroupUsersByUserIdData, DeleteUserGroupUsersByUserIdError, DeleteUserGroupUsersByUserIdResponse, PostWhatsAppSendmessageData, PostWhatsAppSendmessageError, PostWhatsAppSendmessageResponse } from '../types.gen';
import { client, getApiAssignee, postApiAssignee, getApiAssigneeById, putApiAssigneeById, deleteApiAssigneeById, postApiEmail, getEmailConfig, postEmailConfig, putEmailConfigById, postApiFileUpload, getApiFileByBlobName, deleteApiFileByBlobName, getApiFileUriByBlobName, postApiRequest, getApiRequest, getApiRequestById, deleteApiRequestById, putApiRequestUpdateById, putApiRequestByIdChangeStatus, postApiRequestAdminEnrichCompanyNames, getApiRequestQuoteNotes, postApiRequestQuoteNotes, getApiRequestQuoteNotesById, putApiRequestQuoteNotesById, deleteApiRequestQuoteNotesById, postApiSmsSend, getApiTrackingByTrackingNumber, postUserGroupUsersByUserId, getUserGroupUsersByUserId, deleteUserGroupUsersByUserId, getUserGroupUsers, postWhatsAppSendmessage } from '../sdk.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getApiAssigneeQueryKey = (options?: OptionsLegacyParser<GetApiAssigneeData>) => [
    createQueryKey('getApiAssignee', options)
];

export const getApiAssigneeOptions = (options?: OptionsLegacyParser<GetApiAssigneeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAssignee({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAssigneeQueryKey(options)
    });
};

export const postApiAssigneeQueryKey = (options?: OptionsLegacyParser<PostApiAssigneeData>) => [
    createQueryKey('postApiAssignee', options)
];

export const postApiAssigneeOptions = (options?: OptionsLegacyParser<PostApiAssigneeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAssignee({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAssigneeQueryKey(options)
    });
};

export const postApiAssigneeMutation = (options?: Partial<OptionsLegacyParser<PostApiAssigneeData>>) => {
    const mutationOptions: UseMutationOptions<PostApiAssigneeResponse, AxiosError<PostApiAssigneeError>, OptionsLegacyParser<PostApiAssigneeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAssignee({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiAssigneeByIdQueryKey = (options: OptionsLegacyParser<GetApiAssigneeByIdData>) => [
    createQueryKey('getApiAssigneeById', options)
];

export const getApiAssigneeByIdOptions = (options: OptionsLegacyParser<GetApiAssigneeByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiAssigneeById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiAssigneeByIdQueryKey(options)
    });
};

export const putApiAssigneeByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiAssigneeByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiAssigneeByIdResponse, AxiosError<PutApiAssigneeByIdError>, OptionsLegacyParser<PutApiAssigneeByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiAssigneeById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiAssigneeByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiAssigneeByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiAssigneeByIdResponse, AxiosError<DeleteApiAssigneeByIdError>, OptionsLegacyParser<DeleteApiAssigneeByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiAssigneeById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiEmailQueryKey = (options?: OptionsLegacyParser<PostApiEmailData>) => [
    createQueryKey('postApiEmail', options)
];

export const postApiEmailOptions = (options?: OptionsLegacyParser<PostApiEmailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmailQueryKey(options)
    });
};

export const postApiEmailMutation = (options?: Partial<OptionsLegacyParser<PostApiEmailData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmailResponse, AxiosError<PostApiEmailError>, OptionsLegacyParser<PostApiEmailData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmail({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getEmailConfigQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getEmailConfig', options)
];

export const getEmailConfigOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getEmailConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getEmailConfigQueryKey(options)
    });
};

export const postEmailConfigQueryKey = (options?: OptionsLegacyParser<PostEmailConfigData>) => [
    createQueryKey('postEmailConfig', options)
];

export const postEmailConfigOptions = (options?: OptionsLegacyParser<PostEmailConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postEmailConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postEmailConfigQueryKey(options)
    });
};

export const postEmailConfigMutation = (options?: Partial<OptionsLegacyParser<PostEmailConfigData>>) => {
    const mutationOptions: UseMutationOptions<PostEmailConfigResponse, AxiosError<PostEmailConfigError>, OptionsLegacyParser<PostEmailConfigData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postEmailConfig({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putEmailConfigByIdMutation = (options?: Partial<OptionsLegacyParser<PutEmailConfigByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutEmailConfigByIdResponse, AxiosError<PutEmailConfigByIdError>, OptionsLegacyParser<PutEmailConfigByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putEmailConfigById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiFileUploadQueryKey = (options?: OptionsLegacyParser<PostApiFileUploadData>) => [
    createQueryKey('postApiFileUpload', options)
];

export const postApiFileUploadOptions = (options?: OptionsLegacyParser<PostApiFileUploadData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiFileUpload({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiFileUploadQueryKey(options)
    });
};

export const postApiFileUploadMutation = (options?: Partial<OptionsLegacyParser<PostApiFileUploadData>>) => {
    const mutationOptions: UseMutationOptions<PostApiFileUploadResponse, AxiosError<PostApiFileUploadError>, OptionsLegacyParser<PostApiFileUploadData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiFileUpload({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiFileByBlobNameQueryKey = (options: OptionsLegacyParser<GetApiFileByBlobNameData>) => [
    createQueryKey('getApiFileByBlobName', options)
];

export const getApiFileByBlobNameOptions = (options: OptionsLegacyParser<GetApiFileByBlobNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiFileByBlobName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiFileByBlobNameQueryKey(options)
    });
};

export const deleteApiFileByBlobNameMutation = (options?: Partial<OptionsLegacyParser<DeleteApiFileByBlobNameData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiFileByBlobNameResponse, AxiosError<DeleteApiFileByBlobNameError>, OptionsLegacyParser<DeleteApiFileByBlobNameData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiFileByBlobName({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiFileUriByBlobNameQueryKey = (options: OptionsLegacyParser<GetApiFileUriByBlobNameData>) => [
    createQueryKey('getApiFileUriByBlobName', options)
];

export const getApiFileUriByBlobNameOptions = (options: OptionsLegacyParser<GetApiFileUriByBlobNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiFileUriByBlobName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiFileUriByBlobNameQueryKey(options)
    });
};

export const postApiRequestQueryKey = (options?: OptionsLegacyParser<PostApiRequestData>) => [
    createQueryKey('postApiRequest', options)
];

export const postApiRequestOptions = (options?: OptionsLegacyParser<PostApiRequestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiRequest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiRequestQueryKey(options)
    });
};

export const postApiRequestMutation = (options?: Partial<OptionsLegacyParser<PostApiRequestData>>) => {
    const mutationOptions: UseMutationOptions<PostApiRequestResponse, AxiosError<PostApiRequestError>, OptionsLegacyParser<PostApiRequestData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiRequest({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiRequestQueryKey = (options?: OptionsLegacyParser<GetApiRequestData>) => [
    createQueryKey('getApiRequest', options)
];

export const getApiRequestOptions = (options?: OptionsLegacyParser<GetApiRequestData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiRequest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiRequestQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<OptionsLegacyParser>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<OptionsLegacyParser>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path,
            ...page.path
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query,
            ...page.query
        };
    }
    return params as unknown as typeof page;
};

export const getApiRequestInfiniteQueryKey = (options?: OptionsLegacyParser<GetApiRequestData>): QueryKey<OptionsLegacyParser<GetApiRequestData>> => [
    createQueryKey('getApiRequest', options, true)
];

export const getApiRequestInfiniteOptions = (options?: OptionsLegacyParser<GetApiRequestData>) => {
    return infiniteQueryOptions<GetApiRequestResponse, AxiosError<GetApiRequestError>, InfiniteData<GetApiRequestResponse>, QueryKey<OptionsLegacyParser<GetApiRequestData>>, number | Pick<QueryKey<OptionsLegacyParser<GetApiRequestData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<GetApiRequestData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getApiRequest({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiRequestInfiniteQueryKey(options)
    });
};

export const getApiRequestByIdQueryKey = (options: OptionsLegacyParser<GetApiRequestByIdData>) => [
    createQueryKey('getApiRequestById', options)
];

export const getApiRequestByIdOptions = (options: OptionsLegacyParser<GetApiRequestByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiRequestById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiRequestByIdQueryKey(options)
    });
};

export const deleteApiRequestByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiRequestByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiRequestByIdResponse, AxiosError<DeleteApiRequestByIdError>, OptionsLegacyParser<DeleteApiRequestByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiRequestById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putApiRequestUpdateByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiRequestUpdateByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiRequestUpdateByIdResponse, AxiosError<PutApiRequestUpdateByIdError>, OptionsLegacyParser<PutApiRequestUpdateByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiRequestUpdateById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const putApiRequestByIdChangeStatusMutation = (options?: Partial<OptionsLegacyParser<PutApiRequestByIdChangeStatusData>>) => {
    const mutationOptions: UseMutationOptions<PutApiRequestByIdChangeStatusResponse, AxiosError<PutApiRequestByIdChangeStatusError>, OptionsLegacyParser<PutApiRequestByIdChangeStatusData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiRequestByIdChangeStatus({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiRequestAdminEnrichCompanyNamesQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('postApiRequestAdminEnrichCompanyNames', options)
];

export const postApiRequestAdminEnrichCompanyNamesOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiRequestAdminEnrichCompanyNames({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiRequestAdminEnrichCompanyNamesQueryKey(options)
    });
};

export const postApiRequestAdminEnrichCompanyNamesMutation = (options?: Partial<OptionsLegacyParser>) => {
    const mutationOptions: UseMutationOptions<PostApiRequestAdminEnrichCompanyNamesResponse, AxiosError<PostApiRequestAdminEnrichCompanyNamesError>, OptionsLegacyParser> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiRequestAdminEnrichCompanyNames({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiRequestQuoteNotesQueryKey = (options?: OptionsLegacyParser<GetApiRequestQuoteNotesData>) => [
    createQueryKey('getApiRequestQuoteNotes', options)
];

export const getApiRequestQuoteNotesOptions = (options?: OptionsLegacyParser<GetApiRequestQuoteNotesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiRequestQuoteNotes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiRequestQuoteNotesQueryKey(options)
    });
};

export const postApiRequestQuoteNotesQueryKey = (options?: OptionsLegacyParser<PostApiRequestQuoteNotesData>) => [
    createQueryKey('postApiRequestQuoteNotes', options)
];

export const postApiRequestQuoteNotesOptions = (options?: OptionsLegacyParser<PostApiRequestQuoteNotesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiRequestQuoteNotes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiRequestQuoteNotesQueryKey(options)
    });
};

export const postApiRequestQuoteNotesMutation = (options?: Partial<OptionsLegacyParser<PostApiRequestQuoteNotesData>>) => {
    const mutationOptions: UseMutationOptions<PostApiRequestQuoteNotesResponse, AxiosError<PostApiRequestQuoteNotesError>, OptionsLegacyParser<PostApiRequestQuoteNotesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiRequestQuoteNotes({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiRequestQuoteNotesByIdQueryKey = (options: OptionsLegacyParser<GetApiRequestQuoteNotesByIdData>) => [
    createQueryKey('getApiRequestQuoteNotesById', options)
];

export const getApiRequestQuoteNotesByIdOptions = (options: OptionsLegacyParser<GetApiRequestQuoteNotesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiRequestQuoteNotesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiRequestQuoteNotesByIdQueryKey(options)
    });
};

export const putApiRequestQuoteNotesByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiRequestQuoteNotesByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiRequestQuoteNotesByIdResponse, AxiosError<PutApiRequestQuoteNotesByIdError>, OptionsLegacyParser<PutApiRequestQuoteNotesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiRequestQuoteNotesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiRequestQuoteNotesByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiRequestQuoteNotesByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiRequestQuoteNotesByIdResponse, AxiosError<DeleteApiRequestQuoteNotesByIdError>, OptionsLegacyParser<DeleteApiRequestQuoteNotesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiRequestQuoteNotesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiSmsSendQueryKey = (options?: OptionsLegacyParser<PostApiSmsSendData>) => [
    createQueryKey('postApiSmsSend', options)
];

export const postApiSmsSendOptions = (options?: OptionsLegacyParser<PostApiSmsSendData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSmsSend({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSmsSendQueryKey(options)
    });
};

export const postApiSmsSendMutation = (options?: Partial<OptionsLegacyParser<PostApiSmsSendData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSmsSendResponse, AxiosError<PostApiSmsSendError>, OptionsLegacyParser<PostApiSmsSendData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSmsSend({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiTrackingByTrackingNumberQueryKey = (options: OptionsLegacyParser<GetApiTrackingByTrackingNumberData>) => [
    createQueryKey('getApiTrackingByTrackingNumber', options)
];

export const getApiTrackingByTrackingNumberOptions = (options: OptionsLegacyParser<GetApiTrackingByTrackingNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTrackingByTrackingNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTrackingByTrackingNumberQueryKey(options)
    });
};

export const postUserGroupUsersByUserIdQueryKey = (options: OptionsLegacyParser<PostUserGroupUsersByUserIdData>) => [
    createQueryKey('postUserGroupUsersByUserId', options)
];

export const postUserGroupUsersByUserIdOptions = (options: OptionsLegacyParser<PostUserGroupUsersByUserIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postUserGroupUsersByUserId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postUserGroupUsersByUserIdQueryKey(options)
    });
};

export const postUserGroupUsersByUserIdMutation = (options?: Partial<OptionsLegacyParser<PostUserGroupUsersByUserIdData>>) => {
    const mutationOptions: UseMutationOptions<PostUserGroupUsersByUserIdResponse, AxiosError<PostUserGroupUsersByUserIdError>, OptionsLegacyParser<PostUserGroupUsersByUserIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postUserGroupUsersByUserId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserGroupUsersByUserIdQueryKey = (options: OptionsLegacyParser<GetUserGroupUsersByUserIdData>) => [
    createQueryKey('getUserGroupUsersByUserId', options)
];

export const getUserGroupUsersByUserIdOptions = (options: OptionsLegacyParser<GetUserGroupUsersByUserIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserGroupUsersByUserId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserGroupUsersByUserIdQueryKey(options)
    });
};

export const deleteUserGroupUsersByUserIdMutation = (options?: Partial<OptionsLegacyParser<DeleteUserGroupUsersByUserIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteUserGroupUsersByUserIdResponse, AxiosError<DeleteUserGroupUsersByUserIdError>, OptionsLegacyParser<DeleteUserGroupUsersByUserIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteUserGroupUsersByUserId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserGroupUsersQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getUserGroupUsers', options)
];

export const getUserGroupUsersOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserGroupUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserGroupUsersQueryKey(options)
    });
};

export const postWhatsAppSendmessageQueryKey = (options?: OptionsLegacyParser<PostWhatsAppSendmessageData>) => [
    createQueryKey('postWhatsAppSendmessage', options)
];

export const postWhatsAppSendmessageOptions = (options?: OptionsLegacyParser<PostWhatsAppSendmessageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postWhatsAppSendmessage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postWhatsAppSendmessageQueryKey(options)
    });
};

export const postWhatsAppSendmessageMutation = (options?: Partial<OptionsLegacyParser<PostWhatsAppSendmessageData>>) => {
    const mutationOptions: UseMutationOptions<PostWhatsAppSendmessageResponse, AxiosError<PostWhatsAppSendmessageError>, OptionsLegacyParser<PostWhatsAppSendmessageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postWhatsAppSendmessage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};