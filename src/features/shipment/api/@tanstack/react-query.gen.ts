// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import { client, getApiConfigurationHealthKeyvault, getApiConfigurationAppConfig, postApiConfigurationRefreshCacheBySecretName, postApiConfigurationClearCache, getApiConfigurationDatabaseStatus, getApiConfigurationCacheStats, getApiEmployees, postApiEmployees, getApiEmployeesById, putApiEmployeesById, deleteApiEmployeesById, postApiNotifications, getApiOrders, postApiOrders, getApiOrdersById, putApiOrdersById, deleteApiOrdersById, getApiOrdersOrdernumberByOrderNumber, getApiOrdersSearch, getApiOrdersCustomerByCustomerId, getApiOrdersAttention, getApiOrdersStatistics, postApiOrdersByOrderIdServices, getApiOrdersByOrderIdServices, putApiOrdersByOrderIdServicesByTag, deleteApiOrdersByOrderIdServicesByTag, getApiServiceStatisticsUsage, getApiServiceStatisticsUsageByCountry, getApiShips, postApiShips, getApiShipsById, putApiShipsById, deleteApiShipsById, getApiShipsRefactored, postApiShipsRefactored, getApiShipsRefactoredById, putApiShipsRefactoredById, deleteApiShipsRefactoredById, getApiShipsRefactoredSearch, getApiShipsRefactoredLineByShipLineId, getApiShipsRefactoredAvailable, getApiShipsRefactoredByIdCapacity, getApiTestRefactoringRepositoryTest, getApiTestRefactoringKeyvaultTest, postApiTestRefactoringTransactionTest, getApiTestRefactoringHealth } from '../sdk.gen';
import type { PostApiConfigurationRefreshCacheBySecretNameData, PostApiConfigurationRefreshCacheBySecretNameError, PostApiConfigurationRefreshCacheBySecretNameResponse, PostApiConfigurationClearCacheError, PostApiConfigurationClearCacheResponse, GetApiEmployeesData, PostApiEmployeesData, PostApiEmployeesError, PostApiEmployeesResponse, GetApiEmployeesByIdData, PutApiEmployeesByIdData, PutApiEmployeesByIdError, PutApiEmployeesByIdResponse, DeleteApiEmployeesByIdData, DeleteApiEmployeesByIdError, DeleteApiEmployeesByIdResponse, PostApiNotificationsData, PostApiNotificationsError, PostApiNotificationsResponse, GetApiOrdersData, PostApiOrdersData, PostApiOrdersError, PostApiOrdersResponse, GetApiOrdersByIdData, PutApiOrdersByIdData, PutApiOrdersByIdError, PutApiOrdersByIdResponse, DeleteApiOrdersByIdData, DeleteApiOrdersByIdError, DeleteApiOrdersByIdResponse, GetApiOrdersOrdernumberByOrderNumberData, GetApiOrdersSearchData, GetApiOrdersSearchError, GetApiOrdersSearchResponse, GetApiOrdersCustomerByCustomerIdData, GetApiOrdersStatisticsData, PostApiOrdersByOrderIdServicesData, PostApiOrdersByOrderIdServicesError, PostApiOrdersByOrderIdServicesResponse, GetApiOrdersByOrderIdServicesData, PutApiOrdersByOrderIdServicesByTagData, PutApiOrdersByOrderIdServicesByTagError, PutApiOrdersByOrderIdServicesByTagResponse, DeleteApiOrdersByOrderIdServicesByTagData, DeleteApiOrdersByOrderIdServicesByTagError, DeleteApiOrdersByOrderIdServicesByTagResponse, GetApiServiceStatisticsUsageData, GetApiServiceStatisticsUsageByCountryData, GetApiShipsData, PostApiShipsData, PostApiShipsError, PostApiShipsResponse, GetApiShipsByIdData, PutApiShipsByIdData, PutApiShipsByIdError, PutApiShipsByIdResponse, DeleteApiShipsByIdData, DeleteApiShipsByIdError, DeleteApiShipsByIdResponse, GetApiShipsRefactoredData, GetApiShipsRefactoredError, GetApiShipsRefactoredResponse, PostApiShipsRefactoredData, PostApiShipsRefactoredError, PostApiShipsRefactoredResponse, GetApiShipsRefactoredByIdData, PutApiShipsRefactoredByIdData, PutApiShipsRefactoredByIdError, PutApiShipsRefactoredByIdResponse, DeleteApiShipsRefactoredByIdData, DeleteApiShipsRefactoredByIdError, DeleteApiShipsRefactoredByIdResponse, GetApiShipsRefactoredSearchData, GetApiShipsRefactoredLineByShipLineIdData, GetApiShipsRefactoredAvailableData, GetApiShipsRefactoredByIdCapacityData, PostApiTestRefactoringTransactionTestError, PostApiTestRefactoringTransactionTestResponse } from '../types.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const getApiConfigurationHealthKeyvaultQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiConfigurationHealthKeyvault', options)
];

export const getApiConfigurationHealthKeyvaultOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiConfigurationHealthKeyvault({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiConfigurationHealthKeyvaultQueryKey(options)
    });
};

export const getApiConfigurationAppConfigQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiConfigurationAppConfig', options)
];

export const getApiConfigurationAppConfigOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiConfigurationAppConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiConfigurationAppConfigQueryKey(options)
    });
};

export const postApiConfigurationRefreshCacheBySecretNameQueryKey = (options: OptionsLegacyParser<PostApiConfigurationRefreshCacheBySecretNameData>) => [
    createQueryKey('postApiConfigurationRefreshCacheBySecretName', options)
];

export const postApiConfigurationRefreshCacheBySecretNameOptions = (options: OptionsLegacyParser<PostApiConfigurationRefreshCacheBySecretNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiConfigurationRefreshCacheBySecretName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiConfigurationRefreshCacheBySecretNameQueryKey(options)
    });
};

export const postApiConfigurationRefreshCacheBySecretNameMutation = (options?: Partial<OptionsLegacyParser<PostApiConfigurationRefreshCacheBySecretNameData>>) => {
    const mutationOptions: UseMutationOptions<PostApiConfigurationRefreshCacheBySecretNameResponse, AxiosError<PostApiConfigurationRefreshCacheBySecretNameError>, OptionsLegacyParser<PostApiConfigurationRefreshCacheBySecretNameData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiConfigurationRefreshCacheBySecretName({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiConfigurationClearCacheQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('postApiConfigurationClearCache', options)
];

export const postApiConfigurationClearCacheOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiConfigurationClearCache({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiConfigurationClearCacheQueryKey(options)
    });
};

export const postApiConfigurationClearCacheMutation = (options?: Partial<OptionsLegacyParser>) => {
    const mutationOptions: UseMutationOptions<PostApiConfigurationClearCacheResponse, AxiosError<PostApiConfigurationClearCacheError>, OptionsLegacyParser> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiConfigurationClearCache({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiConfigurationDatabaseStatusQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiConfigurationDatabaseStatus', options)
];

export const getApiConfigurationDatabaseStatusOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiConfigurationDatabaseStatus({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiConfigurationDatabaseStatusQueryKey(options)
    });
};

export const getApiConfigurationCacheStatsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiConfigurationCacheStats', options)
];

export const getApiConfigurationCacheStatsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiConfigurationCacheStats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiConfigurationCacheStatsQueryKey(options)
    });
};

export const getApiEmployeesQueryKey = (options?: OptionsLegacyParser<GetApiEmployeesData>) => [
    createQueryKey('getApiEmployees', options)
];

export const getApiEmployeesOptions = (options?: OptionsLegacyParser<GetApiEmployeesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmployees({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmployeesQueryKey(options)
    });
};

export const postApiEmployeesQueryKey = (options?: OptionsLegacyParser<PostApiEmployeesData>) => [
    createQueryKey('postApiEmployees', options)
];

export const postApiEmployeesOptions = (options?: OptionsLegacyParser<PostApiEmployeesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiEmployees({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiEmployeesQueryKey(options)
    });
};

export const postApiEmployeesMutation = (options?: Partial<OptionsLegacyParser<PostApiEmployeesData>>) => {
    const mutationOptions: UseMutationOptions<PostApiEmployeesResponse, AxiosError<PostApiEmployeesError>, OptionsLegacyParser<PostApiEmployeesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiEmployees({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiEmployeesByIdQueryKey = (options: OptionsLegacyParser<GetApiEmployeesByIdData>) => [
    createQueryKey('getApiEmployeesById', options)
];

export const getApiEmployeesByIdOptions = (options: OptionsLegacyParser<GetApiEmployeesByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiEmployeesById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiEmployeesByIdQueryKey(options)
    });
};

export const putApiEmployeesByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiEmployeesByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiEmployeesByIdResponse, AxiosError<PutApiEmployeesByIdError>, OptionsLegacyParser<PutApiEmployeesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiEmployeesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiEmployeesByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiEmployeesByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiEmployeesByIdResponse, AxiosError<DeleteApiEmployeesByIdError>, OptionsLegacyParser<DeleteApiEmployeesByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiEmployeesById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiNotificationsQueryKey = (options?: OptionsLegacyParser<PostApiNotificationsData>) => [
    createQueryKey('postApiNotifications', options)
];

export const postApiNotificationsOptions = (options?: OptionsLegacyParser<PostApiNotificationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiNotifications({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiNotificationsQueryKey(options)
    });
};

export const postApiNotificationsMutation = (options?: Partial<OptionsLegacyParser<PostApiNotificationsData>>) => {
    const mutationOptions: UseMutationOptions<PostApiNotificationsResponse, AxiosError<PostApiNotificationsError>, OptionsLegacyParser<PostApiNotificationsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiNotifications({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiOrdersQueryKey = (options?: OptionsLegacyParser<GetApiOrdersData>) => [
    createQueryKey('getApiOrders', options)
];

export const getApiOrdersOptions = (options?: OptionsLegacyParser<GetApiOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOrdersQueryKey(options)
    });
};

export const postApiOrdersQueryKey = (options?: OptionsLegacyParser<PostApiOrdersData>) => [
    createQueryKey('postApiOrders', options)
];

export const postApiOrdersOptions = (options?: OptionsLegacyParser<PostApiOrdersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiOrders({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiOrdersQueryKey(options)
    });
};

export const postApiOrdersMutation = (options?: Partial<OptionsLegacyParser<PostApiOrdersData>>) => {
    const mutationOptions: UseMutationOptions<PostApiOrdersResponse, AxiosError<PostApiOrdersError>, OptionsLegacyParser<PostApiOrdersData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiOrders({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiOrdersByIdQueryKey = (options: OptionsLegacyParser<GetApiOrdersByIdData>) => [
    createQueryKey('getApiOrdersById', options)
];

export const getApiOrdersByIdOptions = (options: OptionsLegacyParser<GetApiOrdersByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiOrdersById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOrdersByIdQueryKey(options)
    });
};

export const putApiOrdersByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiOrdersByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiOrdersByIdResponse, AxiosError<PutApiOrdersByIdError>, OptionsLegacyParser<PutApiOrdersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiOrdersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiOrdersByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiOrdersByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiOrdersByIdResponse, AxiosError<DeleteApiOrdersByIdError>, OptionsLegacyParser<DeleteApiOrdersByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiOrdersById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiOrdersOrdernumberByOrderNumberQueryKey = (options: OptionsLegacyParser<GetApiOrdersOrdernumberByOrderNumberData>) => [
    createQueryKey('getApiOrdersOrdernumberByOrderNumber', options)
];

export const getApiOrdersOrdernumberByOrderNumberOptions = (options: OptionsLegacyParser<GetApiOrdersOrdernumberByOrderNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiOrdersOrdernumberByOrderNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOrdersOrdernumberByOrderNumberQueryKey(options)
    });
};

export const getApiOrdersSearchQueryKey = (options?: OptionsLegacyParser<GetApiOrdersSearchData>) => [
    createQueryKey('getApiOrdersSearch', options)
];

export const getApiOrdersSearchOptions = (options?: OptionsLegacyParser<GetApiOrdersSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiOrdersSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOrdersSearchQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<OptionsLegacyParser>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<OptionsLegacyParser>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path,
            ...page.path
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query,
            ...page.query
        };
    }
    return params as unknown as typeof page;
};

export const getApiOrdersSearchInfiniteQueryKey = (options?: OptionsLegacyParser<GetApiOrdersSearchData>): QueryKey<OptionsLegacyParser<GetApiOrdersSearchData>> => [
    createQueryKey('getApiOrdersSearch', options, true)
];

export const getApiOrdersSearchInfiniteOptions = (options?: OptionsLegacyParser<GetApiOrdersSearchData>) => {
    return infiniteQueryOptions<GetApiOrdersSearchResponse, AxiosError<GetApiOrdersSearchError>, InfiniteData<GetApiOrdersSearchResponse>, QueryKey<OptionsLegacyParser<GetApiOrdersSearchData>>, number | Pick<QueryKey<OptionsLegacyParser<GetApiOrdersSearchData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<GetApiOrdersSearchData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getApiOrdersSearch({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOrdersSearchInfiniteQueryKey(options)
    });
};

export const getApiOrdersCustomerByCustomerIdQueryKey = (options: OptionsLegacyParser<GetApiOrdersCustomerByCustomerIdData>) => [
    createQueryKey('getApiOrdersCustomerByCustomerId', options)
];

export const getApiOrdersCustomerByCustomerIdOptions = (options: OptionsLegacyParser<GetApiOrdersCustomerByCustomerIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiOrdersCustomerByCustomerId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOrdersCustomerByCustomerIdQueryKey(options)
    });
};

export const getApiOrdersAttentionQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiOrdersAttention', options)
];

export const getApiOrdersAttentionOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiOrdersAttention({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOrdersAttentionQueryKey(options)
    });
};

export const getApiOrdersStatisticsQueryKey = (options?: OptionsLegacyParser<GetApiOrdersStatisticsData>) => [
    createQueryKey('getApiOrdersStatistics', options)
];

export const getApiOrdersStatisticsOptions = (options?: OptionsLegacyParser<GetApiOrdersStatisticsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiOrdersStatistics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOrdersStatisticsQueryKey(options)
    });
};

export const postApiOrdersByOrderIdServicesQueryKey = (options: OptionsLegacyParser<PostApiOrdersByOrderIdServicesData>) => [
    createQueryKey('postApiOrdersByOrderIdServices', options)
];

export const postApiOrdersByOrderIdServicesOptions = (options: OptionsLegacyParser<PostApiOrdersByOrderIdServicesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiOrdersByOrderIdServices({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiOrdersByOrderIdServicesQueryKey(options)
    });
};

export const postApiOrdersByOrderIdServicesMutation = (options?: Partial<OptionsLegacyParser<PostApiOrdersByOrderIdServicesData>>) => {
    const mutationOptions: UseMutationOptions<PostApiOrdersByOrderIdServicesResponse, AxiosError<PostApiOrdersByOrderIdServicesError>, OptionsLegacyParser<PostApiOrdersByOrderIdServicesData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiOrdersByOrderIdServices({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiOrdersByOrderIdServicesQueryKey = (options: OptionsLegacyParser<GetApiOrdersByOrderIdServicesData>) => [
    createQueryKey('getApiOrdersByOrderIdServices', options)
];

export const getApiOrdersByOrderIdServicesOptions = (options: OptionsLegacyParser<GetApiOrdersByOrderIdServicesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiOrdersByOrderIdServices({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOrdersByOrderIdServicesQueryKey(options)
    });
};

export const putApiOrdersByOrderIdServicesByTagMutation = (options?: Partial<OptionsLegacyParser<PutApiOrdersByOrderIdServicesByTagData>>) => {
    const mutationOptions: UseMutationOptions<PutApiOrdersByOrderIdServicesByTagResponse, AxiosError<PutApiOrdersByOrderIdServicesByTagError>, OptionsLegacyParser<PutApiOrdersByOrderIdServicesByTagData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiOrdersByOrderIdServicesByTag({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiOrdersByOrderIdServicesByTagMutation = (options?: Partial<OptionsLegacyParser<DeleteApiOrdersByOrderIdServicesByTagData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiOrdersByOrderIdServicesByTagResponse, AxiosError<DeleteApiOrdersByOrderIdServicesByTagError>, OptionsLegacyParser<DeleteApiOrdersByOrderIdServicesByTagData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiOrdersByOrderIdServicesByTag({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiServiceStatisticsUsageQueryKey = (options?: OptionsLegacyParser<GetApiServiceStatisticsUsageData>) => [
    createQueryKey('getApiServiceStatisticsUsage', options)
];

export const getApiServiceStatisticsUsageOptions = (options?: OptionsLegacyParser<GetApiServiceStatisticsUsageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceStatisticsUsage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceStatisticsUsageQueryKey(options)
    });
};

export const getApiServiceStatisticsUsageByCountryQueryKey = (options?: OptionsLegacyParser<GetApiServiceStatisticsUsageByCountryData>) => [
    createQueryKey('getApiServiceStatisticsUsageByCountry', options)
];

export const getApiServiceStatisticsUsageByCountryOptions = (options?: OptionsLegacyParser<GetApiServiceStatisticsUsageByCountryData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiServiceStatisticsUsageByCountry({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiServiceStatisticsUsageByCountryQueryKey(options)
    });
};

export const getApiShipsQueryKey = (options?: OptionsLegacyParser<GetApiShipsData>) => [
    createQueryKey('getApiShips', options)
];

export const getApiShipsOptions = (options?: OptionsLegacyParser<GetApiShipsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiShips({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiShipsQueryKey(options)
    });
};

export const postApiShipsQueryKey = (options?: OptionsLegacyParser<PostApiShipsData>) => [
    createQueryKey('postApiShips', options)
];

export const postApiShipsOptions = (options?: OptionsLegacyParser<PostApiShipsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiShips({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiShipsQueryKey(options)
    });
};

export const postApiShipsMutation = (options?: Partial<OptionsLegacyParser<PostApiShipsData>>) => {
    const mutationOptions: UseMutationOptions<PostApiShipsResponse, AxiosError<PostApiShipsError>, OptionsLegacyParser<PostApiShipsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiShips({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiShipsByIdQueryKey = (options: OptionsLegacyParser<GetApiShipsByIdData>) => [
    createQueryKey('getApiShipsById', options)
];

export const getApiShipsByIdOptions = (options: OptionsLegacyParser<GetApiShipsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiShipsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiShipsByIdQueryKey(options)
    });
};

export const putApiShipsByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiShipsByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiShipsByIdResponse, AxiosError<PutApiShipsByIdError>, OptionsLegacyParser<PutApiShipsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiShipsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiShipsByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiShipsByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiShipsByIdResponse, AxiosError<DeleteApiShipsByIdError>, OptionsLegacyParser<DeleteApiShipsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiShipsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiShipsRefactoredQueryKey = (options?: OptionsLegacyParser<GetApiShipsRefactoredData>) => [
    createQueryKey('getApiShipsRefactored', options)
];

export const getApiShipsRefactoredOptions = (options?: OptionsLegacyParser<GetApiShipsRefactoredData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiShipsRefactored({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiShipsRefactoredQueryKey(options)
    });
};

export const getApiShipsRefactoredInfiniteQueryKey = (options?: OptionsLegacyParser<GetApiShipsRefactoredData>): QueryKey<OptionsLegacyParser<GetApiShipsRefactoredData>> => [
    createQueryKey('getApiShipsRefactored', options, true)
];

export const getApiShipsRefactoredInfiniteOptions = (options?: OptionsLegacyParser<GetApiShipsRefactoredData>) => {
    return infiniteQueryOptions<GetApiShipsRefactoredResponse, AxiosError<GetApiShipsRefactoredError>, InfiniteData<GetApiShipsRefactoredResponse>, QueryKey<OptionsLegacyParser<GetApiShipsRefactoredData>>, number | Pick<QueryKey<OptionsLegacyParser<GetApiShipsRefactoredData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<OptionsLegacyParser<GetApiShipsRefactoredData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getApiShipsRefactored({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiShipsRefactoredInfiniteQueryKey(options)
    });
};

export const postApiShipsRefactoredQueryKey = (options?: OptionsLegacyParser<PostApiShipsRefactoredData>) => [
    createQueryKey('postApiShipsRefactored', options)
];

export const postApiShipsRefactoredOptions = (options?: OptionsLegacyParser<PostApiShipsRefactoredData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiShipsRefactored({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiShipsRefactoredQueryKey(options)
    });
};

export const postApiShipsRefactoredMutation = (options?: Partial<OptionsLegacyParser<PostApiShipsRefactoredData>>) => {
    const mutationOptions: UseMutationOptions<PostApiShipsRefactoredResponse, AxiosError<PostApiShipsRefactoredError>, OptionsLegacyParser<PostApiShipsRefactoredData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiShipsRefactored({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiShipsRefactoredByIdQueryKey = (options: OptionsLegacyParser<GetApiShipsRefactoredByIdData>) => [
    createQueryKey('getApiShipsRefactoredById', options)
];

export const getApiShipsRefactoredByIdOptions = (options: OptionsLegacyParser<GetApiShipsRefactoredByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiShipsRefactoredById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiShipsRefactoredByIdQueryKey(options)
    });
};

export const putApiShipsRefactoredByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiShipsRefactoredByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiShipsRefactoredByIdResponse, AxiosError<PutApiShipsRefactoredByIdError>, OptionsLegacyParser<PutApiShipsRefactoredByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiShipsRefactoredById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiShipsRefactoredByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiShipsRefactoredByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiShipsRefactoredByIdResponse, AxiosError<DeleteApiShipsRefactoredByIdError>, OptionsLegacyParser<DeleteApiShipsRefactoredByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiShipsRefactoredById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiShipsRefactoredSearchQueryKey = (options?: OptionsLegacyParser<GetApiShipsRefactoredSearchData>) => [
    createQueryKey('getApiShipsRefactoredSearch', options)
];

export const getApiShipsRefactoredSearchOptions = (options?: OptionsLegacyParser<GetApiShipsRefactoredSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiShipsRefactoredSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiShipsRefactoredSearchQueryKey(options)
    });
};

export const getApiShipsRefactoredLineByShipLineIdQueryKey = (options: OptionsLegacyParser<GetApiShipsRefactoredLineByShipLineIdData>) => [
    createQueryKey('getApiShipsRefactoredLineByShipLineId', options)
];

export const getApiShipsRefactoredLineByShipLineIdOptions = (options: OptionsLegacyParser<GetApiShipsRefactoredLineByShipLineIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiShipsRefactoredLineByShipLineId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiShipsRefactoredLineByShipLineIdQueryKey(options)
    });
};

export const getApiShipsRefactoredAvailableQueryKey = (options?: OptionsLegacyParser<GetApiShipsRefactoredAvailableData>) => [
    createQueryKey('getApiShipsRefactoredAvailable', options)
];

export const getApiShipsRefactoredAvailableOptions = (options?: OptionsLegacyParser<GetApiShipsRefactoredAvailableData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiShipsRefactoredAvailable({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiShipsRefactoredAvailableQueryKey(options)
    });
};

export const getApiShipsRefactoredByIdCapacityQueryKey = (options: OptionsLegacyParser<GetApiShipsRefactoredByIdCapacityData>) => [
    createQueryKey('getApiShipsRefactoredByIdCapacity', options)
];

export const getApiShipsRefactoredByIdCapacityOptions = (options: OptionsLegacyParser<GetApiShipsRefactoredByIdCapacityData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiShipsRefactoredByIdCapacity({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiShipsRefactoredByIdCapacityQueryKey(options)
    });
};

export const getApiTestRefactoringRepositoryTestQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiTestRefactoringRepositoryTest', options)
];

export const getApiTestRefactoringRepositoryTestOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTestRefactoringRepositoryTest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTestRefactoringRepositoryTestQueryKey(options)
    });
};

export const getApiTestRefactoringKeyvaultTestQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiTestRefactoringKeyvaultTest', options)
];

export const getApiTestRefactoringKeyvaultTestOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTestRefactoringKeyvaultTest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTestRefactoringKeyvaultTestQueryKey(options)
    });
};

export const postApiTestRefactoringTransactionTestQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('postApiTestRefactoringTransactionTest', options)
];

export const postApiTestRefactoringTransactionTestOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiTestRefactoringTransactionTest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiTestRefactoringTransactionTestQueryKey(options)
    });
};

export const postApiTestRefactoringTransactionTestMutation = (options?: Partial<OptionsLegacyParser>) => {
    const mutationOptions: UseMutationOptions<PostApiTestRefactoringTransactionTestResponse, AxiosError<PostApiTestRefactoringTransactionTestError>, OptionsLegacyParser> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiTestRefactoringTransactionTest({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiTestRefactoringHealthQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiTestRefactoringHealth', options)
];

export const getApiTestRefactoringHealthOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiTestRefactoringHealth({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiTestRefactoringHealthQueryKey(options)
    });
};