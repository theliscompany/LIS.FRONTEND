// This file is auto-generated by @hey-api/openapi-ts

export type __f__AnonymousType11_5 = {
    message?: (string) | null;
    version?: (string) | null;
    timestamp?: Date;
    environment?: (string) | null;
    endpoints?: __f__AnonymousType12_7;
};

export type __f__AnonymousType12_7 = {
    swagger?: (string) | null;
    health?: (string) | null;
    seaFreight?: (string) | null;
    miscellaneous?: (string) | null;
    pricing?: (string) | null;
    ocr?: (string) | null;
    webhook?: (string) | null;
};

export type BulkProcessResponse = {
    totalFiles?: number;
    successfulProcessed?: number;
    failedProcessed?: number;
    results?: Array<PriceExtractionResponse> | null;
    errors?: Array<(string)> | null;
    processedAt?: Date;
};

export type Carrier = {
    id?: number;
    name?: (string) | null;
};

export type Charges = {
    basePrice?: number;
    surcharges?: Array<Surcharge> | null;
    readonly total?: number;
};

export type ComparisonAlert = {
    type?: ComparisonAlertType;
    message?: (string) | null;
    severity?: ComparisonAlertSeverity;
};

export enum ComparisonAlertSeverity {
    INFO = 'Info',
    WARNING = 'Warning',
    ERROR = 'Error'
}

export enum ComparisonAlertType {
    HIGH_SURCHARGES = 'HighSurcharges',
    LONG_TRANSIT_TIME = 'LongTransitTime',
    EXPIRED_OFFER = 'ExpiredOffer',
    EXPIRING_OFFER = 'ExpiringOffer',
    HIGH_UNIT_PRICE = 'HighUnitPrice',
    UNKNOWN_CARRIER = 'UnknownCarrier',
    UNCLEAR_SURCHARGES = 'UnclearSurcharges',
    LOW_FREQUENCY = 'LowFrequency'
}

export type ComparisonMetrics = {
    totalPrice?: number;
    pricePerKg?: number;
    pricePerCbm?: number;
    surchargeTransparency?: number;
    validityDaysRemaining?: number;
    isExpired?: boolean;
    frequencyLevel?: (string) | null;
};

export type ComparisonScoreBreakdown = {
    totalPriceScore?: number;
    unitPriceScore?: number;
    surchargeDetailsScore?: number;
    transitTimeScore?: number;
    frequencyScore?: number;
    validityScore?: number;
    incotermScore?: number;
    containerTypeScore?: number;
    carrierReputationScore?: number;
    deliveryTermsScore?: number;
};

export enum ComparisonSortMode {
    SCORE = 'Score',
    TOTAL_PRICE = 'TotalPrice',
    UNIT_PRICE = 'UnitPrice',
    TRANSIT_TIME = 'TransitTime',
    VALIDITY_PERIOD = 'ValidityPeriod'
}

export type ComparisonSummary = {
    totalOffers?: number;
    bestScore?: number;
    worstScore?: number;
    averageScore?: number;
    lowestPrice?: number;
    highestPrice?: number;
    averagePrice?: number;
    shortestTransitTime?: number;
    longestTransitTime?: number;
    expiredOffers?: number;
    totalAlerts?: number;
};

export type DocumentMetadata = {
    documentType?: (string) | null;
    supplier?: (string) | null;
    documentDate?: (string) | null;
    referenceNumber?: (string) | null;
    contactInfo?: (string) | null;
    confidenceScore?: number;
    extractedFields?: Array<(string)> | null;
    warnings?: Array<(string)> | null;
};

export type ExtractedPricingData = {
    seaFreightPrices?: Array<SeaFreightPricing> | null;
    haulagePrices?: Array<HaulagePricing> | null;
    miscellaneousPrices?: Array<Miscellaneous> | null;
    metadata?: DocumentMetadata;
};

export type Haulage = {
    offerId?: (string) | null;
    haulierId?: number;
    haulierName?: (string) | null;
    pickupLocation?: HaulageLocation;
    loadingLocation?: HaulageLocation;
    deliveryLocation?: HaulageLocation;
    emptyReturnLocation?: HaulageLocation;
    distanceKm?: number;
    estimatedTransitTimeHours?: number;
    currency?: (string) | null;
    validFrom?: Date;
    validUntil?: Date;
    freeTime?: number;
    multiStop?: number;
    overtimeTariff?: number;
    unitTariff?: number;
    cargoTypes?: Array<(string)> | null;
    surcharges?: Array<HaulageSurcharge> | null;
    transportInsurance?: HaulageTransportInsurance;
    deliveryTerms?: (string) | null;
    comment?: (string) | null;
    createdBy?: (string) | null;
    createdAt?: Date;
    lastUpdatedBy?: (string) | null;
    lastUpdatedAt?: (Date) | null;
};

export type HaulageCreateRequest = {
    haulierId?: number;
    haulierName?: (string) | null;
    pickupLocation?: HaulageLocation;
    loadingLocation?: HaulageLocation;
    deliveryLocation?: HaulageLocation;
    emptyReturnLocation?: HaulageLocation;
    distanceKm?: number;
    estimatedTransitTimeHours?: number;
    currency?: (string) | null;
    validFrom?: Date;
    validUntil?: Date;
    freeTime?: number;
    multiStop?: number;
    overtimeTariff?: number;
    unitTariff?: number;
    cargoTypes?: Array<(string)> | null;
    surcharges?: Array<HaulageSurcharge> | null;
    transportInsurance?: HaulageTransportInsurance;
    deliveryTerms?: (string) | null;
    comment?: (string) | null;
    createdBy?: (string) | null;
};

export type HaulageLocation = {
    displayName?: (string) | null;
    formattedAddress?: (string) | null;
    placeId?: (string) | null;
    latitude?: number;
    longitude?: number;
};

export type HaulagePricing = {
    origin?: (string) | null;
    destination?: (string) | null;
    haulier?: (string) | null;
    serviceType?: (string) | null;
    price20?: (number) | null;
    price40?: (number) | null;
    currency?: (string) | null;
    validFrom?: (Date) | null;
    validUntil?: (Date) | null;
    freeTime?: (string) | null;
    remarks?: (string) | null;
};

export type HaulageResponse = {
    offerId?: (string) | null;
    haulierId?: number;
    haulierName?: (string) | null;
    pickupLocation?: HaulageLocation;
    loadingLocation?: HaulageLocation;
    deliveryLocation?: HaulageLocation;
    emptyReturnLocation?: HaulageLocation;
    distanceKm?: number;
    estimatedTransitTimeHours?: number;
    currency?: (string) | null;
    validFrom?: Date;
    validUntil?: Date;
    freeTime?: number;
    multiStop?: number;
    overtimeTariff?: number;
    unitTariff?: number;
    cargoTypes?: Array<(string)> | null;
    surcharges?: Array<HaulageSurcharge> | null;
    transportInsurance?: HaulageTransportInsurance;
    deliveryTerms?: (string) | null;
    comment?: (string) | null;
    createdBy?: (string) | null;
    createdAt?: Date;
    lastUpdatedBy?: (string) | null;
    lastUpdatedAt?: (Date) | null;
};

export type HaulageSearchRequest = {
    haulierName?: (string) | null;
    haulierId?: (number) | null;
    currency?: (string) | null;
    containerTypes?: Array<(string)> | null;
    maxDistance?: (number) | null;
    validDate?: (Date) | null;
};

export type HaulageSurcharge = {
    type?: (string) | null;
    name?: (string) | null;
    description?: (string) | null;
    amount?: number;
    currency?: (string) | null;
    isPercentage?: boolean;
    isMandatory?: boolean;
    validFrom?: (Date) | null;
    validUntil?: (Date) | null;
};

export type HaulageTransportInsurance = {
    isInsured?: boolean;
    rate?: number;
    minimumAmount?: number;
    maximumAmount?: number;
    currency?: (string) | null;
    insuranceProvider?: (string) | null;
    policyNumber?: (string) | null;
};

export type HaulageUpdateRequest = {
    haulierId?: number;
    haulierName?: (string) | null;
    pickupLocation?: HaulageLocation;
    loadingLocation?: HaulageLocation;
    deliveryLocation?: HaulageLocation;
    emptyReturnLocation?: HaulageLocation;
    distanceKm?: number;
    estimatedTransitTimeHours?: number;
    currency?: (string) | null;
    validFrom?: Date;
    validUntil?: Date;
    freeTime?: number;
    multiStop?: number;
    overtimeTariff?: number;
    unitTariff?: number;
    cargoTypes?: Array<(string)> | null;
    surcharges?: Array<HaulageSurcharge> | null;
    transportInsurance?: HaulageTransportInsurance;
    deliveryTerms?: (string) | null;
    comment?: (string) | null;
    updatedBy?: (string) | null;
};

export type Miscellaneous = {
    id?: string;
    serviceProviderId?: number;
    serviceProviderName?: (string) | null;
    serviceType?: (string) | null;
    serviceName?: (string) | null;
    serviceDescription?: (string) | null;
    departurePortId?: (number) | null;
    departurePortName?: (string) | null;
    destinationPortId?: (number) | null;
    destinationPortName?: (string) | null;
    locationCity?: (string) | null;
    locationCountry?: (string) | null;
    applicableContainerTypes?: Array<(string)> | null;
    serviceDurationHours?: (number) | null;
    serviceDurationDescription?: (string) | null;
    pricing?: MiscellaneousPricing;
    currency?: (string) | null;
    specialConditions?: Array<MiscellaneousSpecialCondition> | null;
    comment?: (string) | null;
    validFrom?: Date;
    validUntil?: (Date) | null;
    createdBy?: (string) | null;
    createdAt?: Date;
    updatedAt?: Date;
    isActive?: boolean;
};

export type MiscellaneousCreateRequest = {
    serviceProviderId?: number;
    serviceProviderName?: (string) | null;
    serviceType?: (string) | null;
    serviceName?: (string) | null;
    serviceDescription?: (string) | null;
    departurePortId?: (number) | null;
    departurePortName?: (string) | null;
    destinationPortId?: (number) | null;
    destinationPortName?: (string) | null;
    locationCity?: (string) | null;
    locationCountry?: (string) | null;
    applicableContainerTypes?: Array<(string)> | null;
    serviceDurationHours?: (number) | null;
    serviceDurationDescription?: (string) | null;
    pricing?: MiscellaneousPricing;
    currency?: (string) | null;
    specialConditions?: Array<MiscellaneousSpecialCondition> | null;
    comment?: (string) | null;
    validFrom?: Date;
    validUntil?: (Date) | null;
    createdBy?: (string) | null;
};

export type MiscellaneousPricing = {
    pricingType?: (string) | null;
    basePrice?: number;
    minimumCharge?: (number) | null;
    maximumCharge?: (number) | null;
    unitOfMeasure?: (string) | null;
    minimumQuantity?: (number) | null;
    maximumQuantity?: (number) | null;
};

export type MiscellaneousResponse = {
    id?: string;
    serviceProviderId?: number;
    serviceProviderName?: (string) | null;
    serviceType?: (string) | null;
    serviceName?: (string) | null;
    serviceDescription?: (string) | null;
    departurePortId?: (number) | null;
    departurePortName?: (string) | null;
    destinationPortId?: (number) | null;
    destinationPortName?: (string) | null;
    locationCity?: (string) | null;
    locationCountry?: (string) | null;
    applicableContainerTypes?: Array<(string)> | null;
    serviceDurationHours?: (number) | null;
    serviceDurationDescription?: (string) | null;
    pricing?: MiscellaneousPricing;
    currency?: (string) | null;
    specialConditions?: Array<MiscellaneousSpecialCondition> | null;
    comment?: (string) | null;
    validFrom?: Date;
    validUntil?: (Date) | null;
    createdBy?: (string) | null;
    createdAt?: Date;
    updatedAt?: Date;
    isActive?: boolean;
};

export type MiscellaneousSearchRequest = {
    serviceProviderId?: (number) | null;
    serviceProviderName?: (string) | null;
    serviceType?: (string) | null;
    serviceName?: (string) | null;
    departurePortId?: (number) | null;
    departurePortName?: (string) | null;
    destinationPortId?: (number) | null;
    destinationPortName?: (string) | null;
    locationCity?: (string) | null;
    locationCountry?: (string) | null;
    applicableContainerTypes?: Array<(string)> | null;
    currency?: (string) | null;
    minBasePrice?: (number) | null;
    maxBasePrice?: (number) | null;
    validFromStart?: (Date) | null;
    validFromEnd?: (Date) | null;
    validUntilStart?: (Date) | null;
    validUntilEnd?: (Date) | null;
    isActive?: (boolean) | null;
};

export type MiscellaneousSpecialCondition = {
    conditionType?: (string) | null;
    description?: (string) | null;
    isRequired?: boolean;
};

export type MiscellaneousUpdateRequest = {
    serviceProviderId?: number;
    serviceProviderName?: (string) | null;
    serviceType?: (string) | null;
    serviceName?: (string) | null;
    serviceDescription?: (string) | null;
    departurePortId?: (number) | null;
    departurePortName?: (string) | null;
    destinationPortId?: (number) | null;
    destinationPortName?: (string) | null;
    locationCity?: (string) | null;
    locationCountry?: (string) | null;
    applicableContainerTypes?: Array<(string)> | null;
    serviceDurationHours?: (number) | null;
    serviceDurationDescription?: (string) | null;
    pricing?: MiscellaneousPricing;
    currency?: (string) | null;
    specialConditions?: Array<MiscellaneousSpecialCondition> | null;
    comment?: (string) | null;
    validFrom?: Date;
    validUntil?: (Date) | null;
    updatedBy?: (string) | null;
    isActive?: boolean;
};

export type OcrResponse = {
    fileName?: (string) | null;
    extractedText?: (string) | null;
    processedAt?: Date;
    success?: boolean;
    errorMessage?: (string) | null;
};

export type PagedResult_1 = {
    items?: Array<SeaFreightResponse> | null;
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    readonly totalPages?: number;
    readonly hasPreviousPage?: boolean;
    readonly hasNextPage?: boolean;
    readonly startIndex?: number;
    readonly endIndex?: number;
};

export type Port = {
    unlocode?: (string) | null;
    name?: (string) | null;
};

export type PriceExtractionResponse = {
    fileName?: (string) | null;
    extractedText?: (string) | null;
    pricingData?: ExtractedPricingData;
    processedAt?: Date;
    success?: boolean;
    errorMessage?: (string) | null;
};

export type PriceStatistics = {
    minPrice?: number;
    maxPrice?: number;
    averagePrice?: number;
    medianPrice?: number;
    standardDeviation?: number;
    pricedOffers?: number;
    currency?: (string) | null;
    priceRangeDistribution?: {
        [key: string]: (number);
    } | null;
};

export type ProcessingStatusResponse = {
    jobId?: string;
    status?: (string) | null;
    fileName?: (string) | null;
    createdAt?: Date;
    completedAt?: (Date) | null;
    progressPercentage?: number;
    errorMessage?: (string) | null;
    result?: ExtractedPricingData;
};

export type SeaFreightAdvancedSearchRequest = {
    pageNumber?: number;
    pageSize?: number;
    sortBy?: (string) | null;
    sortDirection?: (string) | null;
    readonly isDescending?: boolean;
    readonly skip?: number;
    searchText?: (string) | null;
    quoteNumber?: (string) | null;
    carrierName?: (string) | null;
    carrierId?: (number) | null;
    carrierIds?: Array<(number)> | null;
    originPortCode?: (string) | null;
    destinationPortCode?: (string) | null;
    originPortName?: (string) | null;
    destinationPortName?: (string) | null;
    originCountry?: (string) | null;
    destinationCountry?: (string) | null;
    containerTypes?: Array<(string)> | null;
    reeferOnly?: (boolean) | null;
    standardOnly?: (boolean) | null;
    validFrom?: (Date) | null;
    validTo?: (Date) | null;
    validOn?: (Date) | null;
    maxTransitDays?: (number) | null;
    minPrice?: (number) | null;
    maxPrice?: (number) | null;
    currency?: (string) | null;
    onlyActive?: (boolean) | null;
    onlyValid?: (boolean) | null;
    incoterms?: Array<(string)> | null;
    frequencies?: Array<(string)> | null;
    requiredSurchargeTypes?: Array<(string)> | null;
    excludedSurchargeTypes?: Array<(string)> | null;
    createdBy?: (string) | null;
    createdSince?: (Date) | null;
    createdBefore?: (Date) | null;
    includeSurchargeDetails?: boolean;
    includeContainerDetails?: boolean;
    includeValidityDetails?: boolean;
};

export type SeaFreightComparisonCriteria = {
    totalPriceWeight?: number;
    unitPriceWeight?: number;
    surchargeDetailsWeight?: number;
    transitTimeWeight?: number;
    frequencyWeight?: number;
    validityWeight?: number;
    incotermWeight?: number;
    containerTypeWeight?: number;
    carrierReputationWeight?: number;
    deliveryTermsWeight?: number;
};

export type SeaFreightComparisonRequest = {
    offers?: Array<SeaFreightResponse> | null;
    criteria?: SeaFreightComparisonCriteria;
    referenceWeightKg?: number;
    referenceVolumeCbm?: number;
    sortMode?: ComparisonSortMode;
};

export type SeaFreightComparisonResponse = {
    results?: Array<SeaFreightComparisonResult> | null;
    criteria?: SeaFreightComparisonCriteria;
    summary?: ComparisonSummary;
    generatedAt?: Date;
};

export type SeaFreightComparisonResult = {
    offer?: SeaFreightResponse;
    finalScore?: number;
    scoreBreakdown?: ComparisonScoreBreakdown;
    metrics?: ComparisonMetrics;
    alerts?: Array<ComparisonAlert> | null;
    rank?: number;
};

export type SeaFreightCreateRequest = {
    quoteNumber?: (string) | null;
    carrier?: Carrier;
    departurePort?: Port;
    arrivalPort?: Port;
    incoterm?: (string) | null;
    containerType?: (string) | null;
    isReefer?: boolean;
    currency?: (string) | null;
    charges?: Charges;
    transitTimeDays?: number;
    frequency?: (string) | null;
    volumeCbm?: number;
    weightKg?: number;
    validity?: Validity;
    deliveryTerms?: (string) | null;
    remarks?: (string) | null;
    createdBy?: (string) | null;
};

export type SeaFreightDatabaseComparisonRequest = {
    criteria?: SeaFreightComparisonCriteria;
    referenceWeightKg?: number;
    referenceVolumeCbm?: number;
    sortMode?: ComparisonSortMode;
    carrierIds?: Array<(number)> | null;
    containerType?: (string) | null;
    incoterm?: (string) | null;
    isReefer?: (boolean) | null;
    currency?: (string) | null;
    minPrice?: (number) | null;
    maxPrice?: (number) | null;
    maxTransitDays?: (number) | null;
    minValidityDaysRemaining?: (number) | null;
    excludeExpired?: boolean;
    onlyActive?: boolean;
    maxResults?: (number) | null;
};

export type SeaFreightJsonImportRequest = {
    jsonContent?: (string) | null;
    criteria?: SeaFreightComparisonCriteria;
    referenceWeightKg?: number;
    referenceVolumeCbm?: number;
    sortMode?: ComparisonSortMode;
};

export type SeaFreightPricing = {
    departurePort?: (string) | null;
    destinationPort?: (string) | null;
    carrier?: (string) | null;
    serviceType?: (string) | null;
    price20?: (number) | null;
    price40?: (number) | null;
    price40HC?: (number) | null;
    currency?: (string) | null;
    validFrom?: (Date) | null;
    validUntil?: (Date) | null;
    transitTime?: (string) | null;
    frequency?: (string) | null;
    remarks?: (string) | null;
};

export type SeaFreightQuickSearchRequest = {
    pageNumber?: number;
    pageSize?: number;
    sortBy?: (string) | null;
    sortDirection?: (string) | null;
    readonly isDescending?: boolean;
    readonly skip?: number;
    origin?: (string) | null;
    destination?: (string) | null;
    containerType?: (string) | null;
    validDate?: (Date) | null;
    carrier?: (string) | null;
    maxPrice?: (number) | null;
    currency?: (string) | null;
    onlyValidOffers?: boolean;
};

export type SeaFreightResponse = {
    id?: (string) | null;
    quoteNumber?: (string) | null;
    carrier?: Carrier;
    departurePort?: Port;
    arrivalPort?: Port;
    incoterm?: (string) | null;
    containerType?: (string) | null;
    isReefer?: boolean;
    currency?: (string) | null;
    charges?: Charges;
    transitTimeDays?: number;
    frequency?: (string) | null;
    volumeCbm?: number;
    weightKg?: number;
    validity?: Validity;
    remarks?: (string) | null;
    createdBy?: (string) | null;
    createdDate?: Date;
    isActive?: boolean;
};

export type SeaFreightSearchResponse = {
    items?: Array<SeaFreightResponse> | null;
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    readonly totalPages?: number;
    readonly hasPreviousPage?: boolean;
    readonly hasNextPage?: boolean;
    readonly startIndex?: number;
    readonly endIndex?: number;
    aggregations?: SearchAggregations;
    executionTimeMs?: number;
    fromCache?: boolean;
    queryHash?: (string) | null;
    searchSuggestions?: Array<(string)> | null;
    searchHints?: Array<(string)> | null;
    appliedFilters?: {
        [key: string]: unknown;
    } | null;
};

export type SeaFreightUpdateRequest = {
    carrier?: Carrier;
    departurePort?: Port;
    arrivalPort?: Port;
    incoterm?: (string) | null;
    containerType?: (string) | null;
    isReefer?: boolean;
    currency?: (string) | null;
    charges?: Charges;
    transitTimeDays?: number;
    frequency?: (string) | null;
    volumeCbm?: number;
    weightKg?: number;
    validity?: Validity;
    deliveryTerms?: (string) | null;
    remarks?: (string) | null;
    updatedBy?: (string) | null;
    isActive?: boolean;
};

export type SearchAggregations = {
    totalResults?: number;
    carrierDistribution?: {
        [key: string]: (number);
    } | null;
    containerTypeDistribution?: {
        [key: string]: (number);
    } | null;
    topCarriers?: {
        [key: string]: (number);
    } | null;
    topRoutes?: {
        [key: string]: (number);
    } | null;
    originPortDistribution?: {
        [key: string]: (number);
    } | null;
    destinationPortDistribution?: {
        [key: string]: (number);
    } | null;
    priceStats?: PriceStatistics;
    transitStats?: TransitTimeStatistics;
    currencyDistribution?: {
        [key: string]: (number);
    } | null;
    validityPeriodDistribution?: {
        [key: string]: (number);
    } | null;
};

export type Surcharge = {
    name?: (string) | null;
    value?: number;
    type?: SurchargeType;
    description?: (string) | null;
    isMandatory?: boolean;
    currency?: (string) | null;
};

export enum SurchargeType {
    BASE_FREIGHT = 'BaseFreight',
    BAF = 'Baf',
    CAF = 'Caf',
    THC_ORIGIN = 'ThcOrigin',
    THC_DESTINATION = 'ThcDestination',
    SECURITY_SURCHARGE = 'SecuritySurcharge',
    CONGESTION_SURCHARGE = 'CongestionSurcharge',
    FUEL_SURCHARGE = 'FuelSurcharge',
    WAR_SURCHARGE = 'WarSurcharge',
    ZONE_SURCHARGE = 'ZoneSurcharge',
    SEASONAL_SURCHARGE = 'SeasonalSurcharge',
    OTHER = 'Other'
}

export type TransitTimeStatistics = {
    minTransitDays?: number;
    maxTransitDays?: number;
    averageTransitDays?: number;
    medianTransitDays?: number;
};

export type Validity = {
    startDate?: Date;
    endDate?: Date;
};

export type PostApiHaulageData = {
    body?: HaulageCreateRequest;
};

export type PostApiHaulageResponse = (HaulageResponse);

export type PostApiHaulageError = unknown;

export type GetApiHaulageResponse = (Array<HaulageResponse>);

export type GetApiHaulageError = unknown;

export type GetApiHaulageByIdData = {
    path: {
        id: string;
    };
};

export type GetApiHaulageByIdResponse = (HaulageResponse);

export type GetApiHaulageByIdError = unknown;

export type PutApiHaulageByIdData = {
    body?: HaulageUpdateRequest;
    path: {
        id: string;
    };
};

export type PutApiHaulageByIdResponse = (HaulageResponse);

export type PutApiHaulageByIdError = unknown;

export type DeleteApiHaulageByIdData = {
    path: {
        id: string;
    };
};

export type DeleteApiHaulageByIdResponse = (unknown);

export type DeleteApiHaulageByIdError = unknown;

export type PostApiHaulageSearchData = {
    body?: HaulageSearchRequest;
};

export type PostApiHaulageSearchResponse = (Array<HaulageResponse>);

export type PostApiHaulageSearchError = unknown;

export type GetApiHaulageByIdPayloadData = {
    path: {
        id: string;
    };
};

export type GetApiHaulageByIdPayloadResponse = (Haulage);

export type GetApiHaulageByIdPayloadError = unknown;

export type GetResponse = (__f__AnonymousType11_5);

export type GetError = unknown;

export type GetErrorResponse = (unknown);

export type GetErrorError = unknown;

export type GetApiMiscellaneousResponse = (Array<MiscellaneousResponse>);

export type GetApiMiscellaneousError = unknown;

export type PostApiMiscellaneousData = {
    body?: MiscellaneousCreateRequest;
};

export type PostApiMiscellaneousResponse = (MiscellaneousResponse);

export type PostApiMiscellaneousError = unknown;

export type GetApiMiscellaneousByIdData = {
    path: {
        id: string;
    };
};

export type GetApiMiscellaneousByIdResponse = (MiscellaneousResponse);

export type GetApiMiscellaneousByIdError = unknown;

export type PutApiMiscellaneousByIdData = {
    body?: MiscellaneousUpdateRequest;
    path: {
        id: string;
    };
};

export type PutApiMiscellaneousByIdResponse = (MiscellaneousResponse);

export type PutApiMiscellaneousByIdError = unknown;

export type DeleteApiMiscellaneousByIdData = {
    path: {
        id: string;
    };
};

export type DeleteApiMiscellaneousByIdResponse = (unknown);

export type DeleteApiMiscellaneousByIdError = unknown;

export type PostApiMiscellaneousSearchData = {
    body?: MiscellaneousSearchRequest;
};

export type PostApiMiscellaneousSearchResponse = (Array<MiscellaneousResponse>);

export type PostApiMiscellaneousSearchError = unknown;

export type GetApiMiscellaneousProviderByServiceProviderIdData = {
    path: {
        serviceProviderId: number;
    };
};

export type GetApiMiscellaneousProviderByServiceProviderIdResponse = (Array<MiscellaneousResponse>);

export type GetApiMiscellaneousProviderByServiceProviderIdError = unknown;

export type GetApiMiscellaneousValidByValidDateData = {
    path: {
        validDate: Date;
    };
};

export type GetApiMiscellaneousValidByValidDateResponse = (Array<MiscellaneousResponse>);

export type GetApiMiscellaneousValidByValidDateError = unknown;

export type PostApiOcrExtractTextData = {
    body?: {
        file?: (Blob | File);
    };
};

export type PostApiOcrExtractTextResponse = (OcrResponse);

export type PostApiOcrExtractTextError = unknown;

export type PostApiOcrExtractAndProcessData = {
    body?: {
        file?: (Blob | File);
    };
};

export type PostApiOcrExtractAndProcessResponse = (PriceExtractionResponse);

export type PostApiOcrExtractAndProcessError = unknown;

export type PostApiOcrBulkProcessData = {
    body?: {
        files?: Array<((Blob | File))>;
    };
};

export type PostApiOcrBulkProcessResponse = (BulkProcessResponse);

export type PostApiOcrBulkProcessError = unknown;

export type GetApiOcrProcessingStatusByJobIdData = {
    path: {
        jobId: string;
    };
};

export type GetApiOcrProcessingStatusByJobIdResponse = (ProcessingStatusResponse);

export type GetApiOcrProcessingStatusByJobIdError = unknown;

export type GetApiSeaFreightSearchData = {
    query?: {
        carrierId?: number;
        destinationPort?: string;
        originPort?: string;
        pageNumber?: number;
        pageSize?: number;
        query?: string;
    };
};

export type GetApiSeaFreightSearchResponse = (SeaFreightSearchResponse);

export type GetApiSeaFreightSearchError = (string);

export type PostApiSeaFreightSearchAdvancedData = {
    body?: SeaFreightAdvancedSearchRequest;
};

export type PostApiSeaFreightSearchAdvancedResponse = (SeaFreightSearchResponse);

export type PostApiSeaFreightSearchAdvancedError = (string);

export type PostApiSeaFreightSearchQuickData = {
    body?: SeaFreightQuickSearchRequest;
};

export type PostApiSeaFreightSearchQuickResponse = (SeaFreightSearchResponse);

export type PostApiSeaFreightSearchQuickError = (string);

export type PostApiSeaFreightData = {
    body?: SeaFreightCreateRequest;
};

export type PostApiSeaFreightResponse = (SeaFreightResponse);

export type PostApiSeaFreightError = (string);

export type GetApiSeaFreightData = {
    query?: {
        pageNumber?: number;
        pageSize?: number;
    };
};

export type GetApiSeaFreightResponse = (PagedResult_1);

export type GetApiSeaFreightError = unknown;

export type GetApiSeaFreightByIdData = {
    path: {
        id: string;
    };
};

export type GetApiSeaFreightByIdResponse = (SeaFreightResponse);

export type GetApiSeaFreightByIdError = (string);

export type PutApiSeaFreightByIdData = {
    body?: SeaFreightUpdateRequest;
    path: {
        id: string;
    };
};

export type PutApiSeaFreightByIdResponse = (SeaFreightResponse);

export type PutApiSeaFreightByIdError = (string);

export type DeleteApiSeaFreightByIdData = {
    path: {
        id: string;
    };
};

export type DeleteApiSeaFreightByIdResponse = (void);

export type DeleteApiSeaFreightByIdError = (string);

export type GetApiSeaFreightQuoteByQuoteNumberData = {
    path: {
        quoteNumber: string;
    };
};

export type GetApiSeaFreightQuoteByQuoteNumberResponse = (SeaFreightResponse);

export type GetApiSeaFreightQuoteByQuoteNumberError = (string);

export type GetApiSeaFreightCarrierByCarrierIdData = {
    path: {
        carrierId: number;
    };
    query?: {
        pageNumber?: number;
        pageSize?: number;
    };
};

export type GetApiSeaFreightCarrierByCarrierIdResponse = (PagedResult_1);

export type GetApiSeaFreightCarrierByCarrierIdError = unknown;

export type GetApiSeaFreightValidData = {
    query?: {
        pageNumber?: number;
        pageSize?: number;
        validDate?: Date;
    };
};

export type GetApiSeaFreightValidResponse = (PagedResult_1);

export type GetApiSeaFreightValidError = (string);

export type GetApiSeaFreightRouteData = {
    query: {
        destinationPortCode: string;
        originPortCode: string;
        pageNumber?: number;
        pageSize?: number;
    };
};

export type GetApiSeaFreightRouteResponse = (PagedResult_1);

export type GetApiSeaFreightRouteError = (string);

export type PostApiSeaFreightAnalyticsAggregationsData = {
    body?: SeaFreightAdvancedSearchRequest;
};

export type PostApiSeaFreightAnalyticsAggregationsResponse = (SearchAggregations);

export type PostApiSeaFreightAnalyticsAggregationsError = unknown;

export type GetApiSeaFreightAnalyticsPopularRoutesData = {
    query?: {
        limit?: number;
    };
};

export type GetApiSeaFreightAnalyticsPopularRoutesResponse = ({
    [key: string]: (number);
});

export type GetApiSeaFreightAnalyticsPopularRoutesError = unknown;

export type GetApiSeaFreightAnalyticsTopCarriersData = {
    query?: {
        limit?: number;
    };
};

export type GetApiSeaFreightAnalyticsTopCarriersResponse = ({
    [key: string]: (number);
});

export type GetApiSeaFreightAnalyticsTopCarriersError = unknown;

export type GetApiSeaFreightAnalyticsPriceStatisticsData = {
    query?: {
        currency?: string;
    };
};

export type GetApiSeaFreightAnalyticsPriceStatisticsResponse = (PriceStatistics);

export type GetApiSeaFreightAnalyticsPriceStatisticsError = unknown;

export type DeleteApiSeaFreightCacheData = {
    query?: {
        pattern?: string;
    };
};

export type DeleteApiSeaFreightCacheResponse = (unknown);

export type DeleteApiSeaFreightCacheError = unknown;

export type GetApiSeaFreightCacheStatisticsResponse = ({
    [key: string]: unknown;
});

export type GetApiSeaFreightCacheStatisticsError = unknown;

export type PostApiSeaFreightUtilitiesGenerateQuoteNumbersResponse = (unknown);

export type PostApiSeaFreightUtilitiesGenerateQuoteNumbersError = unknown;

export type GetApiSeaFreightUtilitiesValidateQuoteByQuoteNumberData = {
    path: {
        quoteNumber: string;
    };
};

export type GetApiSeaFreightUtilitiesValidateQuoteByQuoteNumberResponse = (unknown);

export type GetApiSeaFreightUtilitiesValidateQuoteByQuoteNumberError = unknown;

export type PostApiSeaFreightComparisonCompareData = {
    body?: SeaFreightComparisonRequest;
};

export type PostApiSeaFreightComparisonCompareResponse = (SeaFreightComparisonResponse);

export type PostApiSeaFreightComparisonCompareError = (string);

export type PostApiSeaFreightComparisonImportAndCompareData = {
    body?: SeaFreightJsonImportRequest;
};

export type PostApiSeaFreightComparisonImportAndCompareResponse = (unknown);

export type PostApiSeaFreightComparisonImportAndCompareError = (string);

export type GetApiSeaFreightComparisonDefaultCriteriaResponse = (SeaFreightComparisonCriteria);

export type GetApiSeaFreightComparisonDefaultCriteriaError = unknown;

export type PostApiSeaFreightComparisonSearchAndCompareData = {
    body?: unknown;
};

export type PostApiSeaFreightComparisonSearchAndCompareResponse = (SeaFreightComparisonResponse);

export type PostApiSeaFreightComparisonSearchAndCompareError = (string);

export type PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeData = {
    body?: SeaFreightDatabaseComparisonRequest;
    path: {
        destinationPortCode: string;
        originPortCode: string;
    };
};

export type PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeResponse = (SeaFreightComparisonResponse);

export type PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeError = (string);

export type PostApiSeaFreightComparisonCarrierByCarrierIdData = {
    body?: SeaFreightDatabaseComparisonRequest;
    path: {
        carrierId: number;
    };
};

export type PostApiSeaFreightComparisonCarrierByCarrierIdResponse = (SeaFreightComparisonResponse);

export type PostApiSeaFreightComparisonCarrierByCarrierIdError = (string);

export type PostApiSeaFreightComparisonValidData = {
    body?: SeaFreightDatabaseComparisonRequest;
    query?: {
        validDate?: Date;
    };
};

export type PostApiSeaFreightComparisonValidResponse = (SeaFreightComparisonResponse);

export type PostApiSeaFreightComparisonValidError = (string);

export type PostApiSeaFreightComparisonAllData = {
    body?: SeaFreightDatabaseComparisonRequest;
};

export type PostApiSeaFreightComparisonAllResponse = (SeaFreightComparisonResponse);

export type PostApiSeaFreightComparisonAllError = (string);

export type PostApiWebhookMakecomResponse = (unknown);

export type PostApiWebhookMakecomError = unknown;

export type GetApiWebhookTestResponse = (unknown);

export type GetApiWebhookTestError = unknown;

export type PostApiHaulageResponseTransformer = (data: any) => Promise<PostApiHaulageResponse>;

export type HaulageResponseModelResponseTransformer = (data: any) => HaulageResponse;

export type HaulageSurchargeModelResponseTransformer = (data: any) => HaulageSurcharge;

export const HaulageSurchargeModelResponseTransformer: HaulageSurchargeModelResponseTransformer = data => {
    if (data?.validFrom) {
        data.validFrom = new Date(data.validFrom);
    }
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    return data;
};

export const HaulageResponseModelResponseTransformer: HaulageResponseModelResponseTransformer = data => {
    if (data?.validFrom) {
        data.validFrom = new Date(data.validFrom);
    }
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (Array.isArray(data?.surcharges)) {
        data.surcharges.forEach(HaulageSurchargeModelResponseTransformer);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.lastUpdatedAt) {
        data.lastUpdatedAt = new Date(data.lastUpdatedAt);
    }
    return data;
};

export const PostApiHaulageResponseTransformer: PostApiHaulageResponseTransformer = async (data) => {
    HaulageResponseModelResponseTransformer(data);
    return data;
};

export type GetApiHaulageResponseTransformer = (data: any) => Promise<GetApiHaulageResponse>;

export const GetApiHaulageResponseTransformer: GetApiHaulageResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(HaulageResponseModelResponseTransformer);
    }
    return data;
};

export type GetApiHaulageByIdResponseTransformer = (data: any) => Promise<GetApiHaulageByIdResponse>;

export const GetApiHaulageByIdResponseTransformer: GetApiHaulageByIdResponseTransformer = async (data) => {
    HaulageResponseModelResponseTransformer(data);
    return data;
};

export type PutApiHaulageByIdResponseTransformer = (data: any) => Promise<PutApiHaulageByIdResponse>;

export const PutApiHaulageByIdResponseTransformer: PutApiHaulageByIdResponseTransformer = async (data) => {
    HaulageResponseModelResponseTransformer(data);
    return data;
};

export type PostApiHaulageSearchResponseTransformer = (data: any) => Promise<PostApiHaulageSearchResponse>;

export const PostApiHaulageSearchResponseTransformer: PostApiHaulageSearchResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(HaulageResponseModelResponseTransformer);
    }
    return data;
};

export type GetApiHaulageByIdPayloadResponseTransformer = (data: any) => Promise<GetApiHaulageByIdPayloadResponse>;

export type HaulageModelResponseTransformer = (data: any) => Haulage;

export const HaulageModelResponseTransformer: HaulageModelResponseTransformer = data => {
    if (data?.validFrom) {
        data.validFrom = new Date(data.validFrom);
    }
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (Array.isArray(data?.surcharges)) {
        data.surcharges.forEach(HaulageSurchargeModelResponseTransformer);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.lastUpdatedAt) {
        data.lastUpdatedAt = new Date(data.lastUpdatedAt);
    }
    return data;
};

export const GetApiHaulageByIdPayloadResponseTransformer: GetApiHaulageByIdPayloadResponseTransformer = async (data) => {
    HaulageModelResponseTransformer(data);
    return data;
};

export type GetResponseTransformer = (data: any) => Promise<GetResponse>;

export type __f__AnonymousType11_5ModelResponseTransformer = (data: any) => __f__AnonymousType11_5;

export const __f__AnonymousType11_5ModelResponseTransformer: __f__AnonymousType11_5ModelResponseTransformer = data => {
    if (data?.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const GetResponseTransformer: GetResponseTransformer = async (data) => {
    __f__AnonymousType11_5ModelResponseTransformer(data);
    return data;
};

export type GetApiMiscellaneousResponseTransformer = (data: any) => Promise<GetApiMiscellaneousResponse>;

export type MiscellaneousResponseModelResponseTransformer = (data: any) => MiscellaneousResponse;

export const MiscellaneousResponseModelResponseTransformer: MiscellaneousResponseModelResponseTransformer = data => {
    if (data?.validFrom) {
        data.validFrom = new Date(data.validFrom);
    }
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetApiMiscellaneousResponseTransformer: GetApiMiscellaneousResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(MiscellaneousResponseModelResponseTransformer);
    }
    return data;
};

export type PostApiMiscellaneousResponseTransformer = (data: any) => Promise<PostApiMiscellaneousResponse>;

export const PostApiMiscellaneousResponseTransformer: PostApiMiscellaneousResponseTransformer = async (data) => {
    MiscellaneousResponseModelResponseTransformer(data);
    return data;
};

export type GetApiMiscellaneousByIdResponseTransformer = (data: any) => Promise<GetApiMiscellaneousByIdResponse>;

export const GetApiMiscellaneousByIdResponseTransformer: GetApiMiscellaneousByIdResponseTransformer = async (data) => {
    MiscellaneousResponseModelResponseTransformer(data);
    return data;
};

export type PutApiMiscellaneousByIdResponseTransformer = (data: any) => Promise<PutApiMiscellaneousByIdResponse>;

export const PutApiMiscellaneousByIdResponseTransformer: PutApiMiscellaneousByIdResponseTransformer = async (data) => {
    MiscellaneousResponseModelResponseTransformer(data);
    return data;
};

export type PostApiMiscellaneousSearchResponseTransformer = (data: any) => Promise<PostApiMiscellaneousSearchResponse>;

export const PostApiMiscellaneousSearchResponseTransformer: PostApiMiscellaneousSearchResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(MiscellaneousResponseModelResponseTransformer);
    }
    return data;
};

export type GetApiMiscellaneousProviderByServiceProviderIdResponseTransformer = (data: any) => Promise<GetApiMiscellaneousProviderByServiceProviderIdResponse>;

export const GetApiMiscellaneousProviderByServiceProviderIdResponseTransformer: GetApiMiscellaneousProviderByServiceProviderIdResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(MiscellaneousResponseModelResponseTransformer);
    }
    return data;
};

export type GetApiMiscellaneousValidByValidDateResponseTransformer = (data: any) => Promise<GetApiMiscellaneousValidByValidDateResponse>;

export const GetApiMiscellaneousValidByValidDateResponseTransformer: GetApiMiscellaneousValidByValidDateResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(MiscellaneousResponseModelResponseTransformer);
    }
    return data;
};

export type PostApiOcrExtractTextResponseTransformer = (data: any) => Promise<PostApiOcrExtractTextResponse>;

export type OcrResponseModelResponseTransformer = (data: any) => OcrResponse;

export const OcrResponseModelResponseTransformer: OcrResponseModelResponseTransformer = data => {
    if (data?.processedAt) {
        data.processedAt = new Date(data.processedAt);
    }
    return data;
};

export const PostApiOcrExtractTextResponseTransformer: PostApiOcrExtractTextResponseTransformer = async (data) => {
    OcrResponseModelResponseTransformer(data);
    return data;
};

export type PostApiOcrExtractAndProcessResponseTransformer = (data: any) => Promise<PostApiOcrExtractAndProcessResponse>;

export type PriceExtractionResponseModelResponseTransformer = (data: any) => PriceExtractionResponse;

export type ExtractedPricingDataModelResponseTransformer = (data: any) => ExtractedPricingData;

export type SeaFreightPricingModelResponseTransformer = (data: any) => SeaFreightPricing;

export const SeaFreightPricingModelResponseTransformer: SeaFreightPricingModelResponseTransformer = data => {
    if (data?.validFrom) {
        data.validFrom = new Date(data.validFrom);
    }
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    return data;
};

export type HaulagePricingModelResponseTransformer = (data: any) => HaulagePricing;

export const HaulagePricingModelResponseTransformer: HaulagePricingModelResponseTransformer = data => {
    if (data?.validFrom) {
        data.validFrom = new Date(data.validFrom);
    }
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    return data;
};

export type MiscellaneousModelResponseTransformer = (data: any) => Miscellaneous;

export const MiscellaneousModelResponseTransformer: MiscellaneousModelResponseTransformer = data => {
    if (data?.validFrom) {
        data.validFrom = new Date(data.validFrom);
    }
    if (data?.validUntil) {
        data.validUntil = new Date(data.validUntil);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const ExtractedPricingDataModelResponseTransformer: ExtractedPricingDataModelResponseTransformer = data => {
    if (Array.isArray(data?.seaFreightPrices)) {
        data.seaFreightPrices.forEach(SeaFreightPricingModelResponseTransformer);
    }
    if (Array.isArray(data?.haulagePrices)) {
        data.haulagePrices.forEach(HaulagePricingModelResponseTransformer);
    }
    if (Array.isArray(data?.miscellaneousPrices)) {
        data.miscellaneousPrices.forEach(MiscellaneousModelResponseTransformer);
    }
    return data;
};

export const PriceExtractionResponseModelResponseTransformer: PriceExtractionResponseModelResponseTransformer = data => {
    if (data?.pricingData) {
        ExtractedPricingDataModelResponseTransformer(data.pricingData);
    }
    if (data?.processedAt) {
        data.processedAt = new Date(data.processedAt);
    }
    return data;
};

export const PostApiOcrExtractAndProcessResponseTransformer: PostApiOcrExtractAndProcessResponseTransformer = async (data) => {
    PriceExtractionResponseModelResponseTransformer(data);
    return data;
};

export type PostApiOcrBulkProcessResponseTransformer = (data: any) => Promise<PostApiOcrBulkProcessResponse>;

export type BulkProcessResponseModelResponseTransformer = (data: any) => BulkProcessResponse;

export const BulkProcessResponseModelResponseTransformer: BulkProcessResponseModelResponseTransformer = data => {
    if (Array.isArray(data?.results)) {
        data.results.forEach(PriceExtractionResponseModelResponseTransformer);
    }
    if (data?.processedAt) {
        data.processedAt = new Date(data.processedAt);
    }
    return data;
};

export const PostApiOcrBulkProcessResponseTransformer: PostApiOcrBulkProcessResponseTransformer = async (data) => {
    BulkProcessResponseModelResponseTransformer(data);
    return data;
};

export type GetApiOcrProcessingStatusByJobIdResponseTransformer = (data: any) => Promise<GetApiOcrProcessingStatusByJobIdResponse>;

export type ProcessingStatusResponseModelResponseTransformer = (data: any) => ProcessingStatusResponse;

export const ProcessingStatusResponseModelResponseTransformer: ProcessingStatusResponseModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.completedAt) {
        data.completedAt = new Date(data.completedAt);
    }
    if (data?.result) {
        ExtractedPricingDataModelResponseTransformer(data.result);
    }
    return data;
};

export const GetApiOcrProcessingStatusByJobIdResponseTransformer: GetApiOcrProcessingStatusByJobIdResponseTransformer = async (data) => {
    ProcessingStatusResponseModelResponseTransformer(data);
    return data;
};

export type GetApiSeaFreightSearchResponseTransformer = (data: any) => Promise<GetApiSeaFreightSearchResponse>;

export type SeaFreightSearchResponseModelResponseTransformer = (data: any) => SeaFreightSearchResponse;

export type SeaFreightResponseModelResponseTransformer = (data: any) => SeaFreightResponse;

export type ValidityModelResponseTransformer = (data: any) => Validity;

export const ValidityModelResponseTransformer: ValidityModelResponseTransformer = data => {
    if (data?.startDate) {
        data.startDate = new Date(data.startDate);
    }
    if (data?.endDate) {
        data.endDate = new Date(data.endDate);
    }
    return data;
};

export const SeaFreightResponseModelResponseTransformer: SeaFreightResponseModelResponseTransformer = data => {
    if (data?.validity) {
        ValidityModelResponseTransformer(data.validity);
    }
    if (data?.createdDate) {
        data.createdDate = new Date(data.createdDate);
    }
    return data;
};

export const SeaFreightSearchResponseModelResponseTransformer: SeaFreightSearchResponseModelResponseTransformer = data => {
    if (Array.isArray(data?.items)) {
        data.items.forEach(SeaFreightResponseModelResponseTransformer);
    }
    return data;
};

export const GetApiSeaFreightSearchResponseTransformer: GetApiSeaFreightSearchResponseTransformer = async (data) => {
    SeaFreightSearchResponseModelResponseTransformer(data);
    return data;
};

export type PostApiSeaFreightSearchAdvancedResponseTransformer = (data: any) => Promise<PostApiSeaFreightSearchAdvancedResponse>;

export const PostApiSeaFreightSearchAdvancedResponseTransformer: PostApiSeaFreightSearchAdvancedResponseTransformer = async (data) => {
    SeaFreightSearchResponseModelResponseTransformer(data);
    return data;
};

export type PostApiSeaFreightSearchQuickResponseTransformer = (data: any) => Promise<PostApiSeaFreightSearchQuickResponse>;

export const PostApiSeaFreightSearchQuickResponseTransformer: PostApiSeaFreightSearchQuickResponseTransformer = async (data) => {
    SeaFreightSearchResponseModelResponseTransformer(data);
    return data;
};

export type PostApiSeaFreightResponseTransformer = (data: any) => Promise<PostApiSeaFreightResponse>;

export const PostApiSeaFreightResponseTransformer: PostApiSeaFreightResponseTransformer = async (data) => {
    SeaFreightResponseModelResponseTransformer(data);
    return data;
};

export type GetApiSeaFreightResponseTransformer = (data: any) => Promise<GetApiSeaFreightResponse>;

export type PagedResult_1ModelResponseTransformer = (data: any) => PagedResult_1;

export const PagedResult_1ModelResponseTransformer: PagedResult_1ModelResponseTransformer = data => {
    if (Array.isArray(data?.items)) {
        data.items.forEach(SeaFreightResponseModelResponseTransformer);
    }
    return data;
};

export const GetApiSeaFreightResponseTransformer: GetApiSeaFreightResponseTransformer = async (data) => {
    PagedResult_1ModelResponseTransformer(data);
    return data;
};

export type GetApiSeaFreightByIdResponseTransformer = (data: any) => Promise<GetApiSeaFreightByIdResponse>;

export const GetApiSeaFreightByIdResponseTransformer: GetApiSeaFreightByIdResponseTransformer = async (data) => {
    SeaFreightResponseModelResponseTransformer(data);
    return data;
};

export type PutApiSeaFreightByIdResponseTransformer = (data: any) => Promise<PutApiSeaFreightByIdResponse>;

export const PutApiSeaFreightByIdResponseTransformer: PutApiSeaFreightByIdResponseTransformer = async (data) => {
    SeaFreightResponseModelResponseTransformer(data);
    return data;
};

export type GetApiSeaFreightQuoteByQuoteNumberResponseTransformer = (data: any) => Promise<GetApiSeaFreightQuoteByQuoteNumberResponse>;

export const GetApiSeaFreightQuoteByQuoteNumberResponseTransformer: GetApiSeaFreightQuoteByQuoteNumberResponseTransformer = async (data) => {
    SeaFreightResponseModelResponseTransformer(data);
    return data;
};

export type GetApiSeaFreightCarrierByCarrierIdResponseTransformer = (data: any) => Promise<GetApiSeaFreightCarrierByCarrierIdResponse>;

export const GetApiSeaFreightCarrierByCarrierIdResponseTransformer: GetApiSeaFreightCarrierByCarrierIdResponseTransformer = async (data) => {
    PagedResult_1ModelResponseTransformer(data);
    return data;
};

export type GetApiSeaFreightValidResponseTransformer = (data: any) => Promise<GetApiSeaFreightValidResponse>;

export const GetApiSeaFreightValidResponseTransformer: GetApiSeaFreightValidResponseTransformer = async (data) => {
    PagedResult_1ModelResponseTransformer(data);
    return data;
};

export type GetApiSeaFreightRouteResponseTransformer = (data: any) => Promise<GetApiSeaFreightRouteResponse>;

export const GetApiSeaFreightRouteResponseTransformer: GetApiSeaFreightRouteResponseTransformer = async (data) => {
    PagedResult_1ModelResponseTransformer(data);
    return data;
};

export type PostApiSeaFreightComparisonCompareResponseTransformer = (data: any) => Promise<PostApiSeaFreightComparisonCompareResponse>;

export type SeaFreightComparisonResponseModelResponseTransformer = (data: any) => SeaFreightComparisonResponse;

export type SeaFreightComparisonResultModelResponseTransformer = (data: any) => SeaFreightComparisonResult;

export const SeaFreightComparisonResultModelResponseTransformer: SeaFreightComparisonResultModelResponseTransformer = data => {
    if (data?.offer) {
        SeaFreightResponseModelResponseTransformer(data.offer);
    }
    return data;
};

export const SeaFreightComparisonResponseModelResponseTransformer: SeaFreightComparisonResponseModelResponseTransformer = data => {
    if (Array.isArray(data?.results)) {
        data.results.forEach(SeaFreightComparisonResultModelResponseTransformer);
    }
    if (data?.generatedAt) {
        data.generatedAt = new Date(data.generatedAt);
    }
    return data;
};

export const PostApiSeaFreightComparisonCompareResponseTransformer: PostApiSeaFreightComparisonCompareResponseTransformer = async (data) => {
    SeaFreightComparisonResponseModelResponseTransformer(data);
    return data;
};

export type PostApiSeaFreightComparisonSearchAndCompareResponseTransformer = (data: any) => Promise<PostApiSeaFreightComparisonSearchAndCompareResponse>;

export const PostApiSeaFreightComparisonSearchAndCompareResponseTransformer: PostApiSeaFreightComparisonSearchAndCompareResponseTransformer = async (data) => {
    SeaFreightComparisonResponseModelResponseTransformer(data);
    return data;
};

export type PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeResponseTransformer = (data: any) => Promise<PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeResponse>;

export const PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeResponseTransformer: PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeResponseTransformer = async (data) => {
    SeaFreightComparisonResponseModelResponseTransformer(data);
    return data;
};

export type PostApiSeaFreightComparisonCarrierByCarrierIdResponseTransformer = (data: any) => Promise<PostApiSeaFreightComparisonCarrierByCarrierIdResponse>;

export const PostApiSeaFreightComparisonCarrierByCarrierIdResponseTransformer: PostApiSeaFreightComparisonCarrierByCarrierIdResponseTransformer = async (data) => {
    SeaFreightComparisonResponseModelResponseTransformer(data);
    return data;
};

export type PostApiSeaFreightComparisonValidResponseTransformer = (data: any) => Promise<PostApiSeaFreightComparisonValidResponse>;

export const PostApiSeaFreightComparisonValidResponseTransformer: PostApiSeaFreightComparisonValidResponseTransformer = async (data) => {
    SeaFreightComparisonResponseModelResponseTransformer(data);
    return data;
};

export type PostApiSeaFreightComparisonAllResponseTransformer = (data: any) => Promise<PostApiSeaFreightComparisonAllResponse>;

export const PostApiSeaFreightComparisonAllResponseTransformer: PostApiSeaFreightComparisonAllResponseTransformer = async (data) => {
    SeaFreightComparisonResponseModelResponseTransformer(data);
    return data;
};