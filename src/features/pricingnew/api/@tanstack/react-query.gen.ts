// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { PostApiHaulageData, PostApiHaulageError, PostApiHaulageResponse, GetApiHaulageByIdData, PutApiHaulageByIdData, PutApiHaulageByIdError, PutApiHaulageByIdResponse, DeleteApiHaulageByIdData, DeleteApiHaulageByIdError, DeleteApiHaulageByIdResponse, PostApiHaulageSearchData, PostApiHaulageSearchError, PostApiHaulageSearchResponse, GetApiHaulageByIdPayloadData, PostApiMiscellaneousData, PostApiMiscellaneousError, PostApiMiscellaneousResponse, GetApiMiscellaneousByIdData, PutApiMiscellaneousByIdData, PutApiMiscellaneousByIdError, PutApiMiscellaneousByIdResponse, DeleteApiMiscellaneousByIdData, DeleteApiMiscellaneousByIdError, DeleteApiMiscellaneousByIdResponse, PostApiMiscellaneousSearchData, PostApiMiscellaneousSearchError, PostApiMiscellaneousSearchResponse, GetApiMiscellaneousProviderByServiceProviderIdData, GetApiMiscellaneousValidByValidDateData, PostApiOcrExtractTextData, PostApiOcrExtractTextError, PostApiOcrExtractTextResponse, PostApiOcrExtractAndProcessData, PostApiOcrExtractAndProcessError, PostApiOcrExtractAndProcessResponse, PostApiOcrBulkProcessData, PostApiOcrBulkProcessError, PostApiOcrBulkProcessResponse, GetApiOcrProcessingStatusByJobIdData, GetApiSeaFreightSearchData, PostApiSeaFreightSearchAdvancedData, PostApiSeaFreightSearchAdvancedError, PostApiSeaFreightSearchAdvancedResponse, PostApiSeaFreightSearchQuickData, PostApiSeaFreightSearchQuickError, PostApiSeaFreightSearchQuickResponse, PostApiSeaFreightData, PostApiSeaFreightError, PostApiSeaFreightResponse, GetApiSeaFreightData, GetApiSeaFreightByIdData, PutApiSeaFreightByIdData, PutApiSeaFreightByIdError, PutApiSeaFreightByIdResponse, DeleteApiSeaFreightByIdData, DeleteApiSeaFreightByIdError, DeleteApiSeaFreightByIdResponse, GetApiSeaFreightQuoteByQuoteNumberData, GetApiSeaFreightCarrierByCarrierIdData, GetApiSeaFreightValidData, GetApiSeaFreightRouteData, PostApiSeaFreightAnalyticsAggregationsData, PostApiSeaFreightAnalyticsAggregationsError, PostApiSeaFreightAnalyticsAggregationsResponse, GetApiSeaFreightAnalyticsPopularRoutesData, GetApiSeaFreightAnalyticsTopCarriersData, GetApiSeaFreightAnalyticsPriceStatisticsData, DeleteApiSeaFreightCacheData, DeleteApiSeaFreightCacheError, DeleteApiSeaFreightCacheResponse, PostApiSeaFreightUtilitiesGenerateQuoteNumbersError, PostApiSeaFreightUtilitiesGenerateQuoteNumbersResponse, GetApiSeaFreightUtilitiesValidateQuoteByQuoteNumberData, PostApiSeaFreightComparisonCompareData, PostApiSeaFreightComparisonCompareError, PostApiSeaFreightComparisonCompareResponse, PostApiSeaFreightComparisonImportAndCompareData, PostApiSeaFreightComparisonImportAndCompareError, PostApiSeaFreightComparisonImportAndCompareResponse, PostApiSeaFreightComparisonSearchAndCompareData, PostApiSeaFreightComparisonSearchAndCompareError, PostApiSeaFreightComparisonSearchAndCompareResponse, PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeData, PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeError, PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeResponse, PostApiSeaFreightComparisonCarrierByCarrierIdData, PostApiSeaFreightComparisonCarrierByCarrierIdError, PostApiSeaFreightComparisonCarrierByCarrierIdResponse, PostApiSeaFreightComparisonValidData, PostApiSeaFreightComparisonValidError, PostApiSeaFreightComparisonValidResponse, PostApiSeaFreightComparisonAllData, PostApiSeaFreightComparisonAllError, PostApiSeaFreightComparisonAllResponse, PostApiWebhookMakecomError, PostApiWebhookMakecomResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client, postApiHaulage, getApiHaulage, getApiHaulageById, putApiHaulageById, deleteApiHaulageById, postApiHaulageSearch, getApiHaulageByIdPayload, get, getError, getApiMiscellaneous, postApiMiscellaneous, getApiMiscellaneousById, putApiMiscellaneousById, deleteApiMiscellaneousById, postApiMiscellaneousSearch, getApiMiscellaneousProviderByServiceProviderId, getApiMiscellaneousValidByValidDate, postApiOcrExtractText, postApiOcrExtractAndProcess, postApiOcrBulkProcess, getApiOcrProcessingStatusByJobId, getApiSeaFreightSearch, postApiSeaFreightSearchAdvanced, postApiSeaFreightSearchQuick, postApiSeaFreight, getApiSeaFreight, getApiSeaFreightById, putApiSeaFreightById, deleteApiSeaFreightById, getApiSeaFreightQuoteByQuoteNumber, getApiSeaFreightCarrierByCarrierId, getApiSeaFreightValid, getApiSeaFreightRoute, postApiSeaFreightAnalyticsAggregations, getApiSeaFreightAnalyticsPopularRoutes, getApiSeaFreightAnalyticsTopCarriers, getApiSeaFreightAnalyticsPriceStatistics, deleteApiSeaFreightCache, getApiSeaFreightCacheStatistics, postApiSeaFreightUtilitiesGenerateQuoteNumbers, getApiSeaFreightUtilitiesValidateQuoteByQuoteNumber, postApiSeaFreightComparisonCompare, postApiSeaFreightComparisonImportAndCompare, getApiSeaFreightComparisonDefaultCriteria, postApiSeaFreightComparisonSearchAndCompare, postApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCode, postApiSeaFreightComparisonCarrierByCarrierId, postApiSeaFreightComparisonValid, postApiSeaFreightComparisonAll, postApiWebhookMakecom, getApiWebhookTest } from '../sdk.gen';

type QueryKey<TOptions extends OptionsLegacyParser> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const postApiHaulageQueryKey = (options?: OptionsLegacyParser<PostApiHaulageData>) => [
    createQueryKey('postApiHaulage', options)
];

export const postApiHaulageOptions = (options?: OptionsLegacyParser<PostApiHaulageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiHaulage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiHaulageQueryKey(options)
    });
};

export const postApiHaulageMutation = (options?: Partial<OptionsLegacyParser<PostApiHaulageData>>) => {
    const mutationOptions: UseMutationOptions<PostApiHaulageResponse, AxiosError<PostApiHaulageError>, OptionsLegacyParser<PostApiHaulageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiHaulage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiHaulageQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiHaulage', options)
];

export const getApiHaulageOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiHaulage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiHaulageQueryKey(options)
    });
};

export const getApiHaulageByIdQueryKey = (options: OptionsLegacyParser<GetApiHaulageByIdData>) => [
    createQueryKey('getApiHaulageById', options)
];

export const getApiHaulageByIdOptions = (options: OptionsLegacyParser<GetApiHaulageByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiHaulageById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiHaulageByIdQueryKey(options)
    });
};

export const putApiHaulageByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiHaulageByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiHaulageByIdResponse, AxiosError<PutApiHaulageByIdError>, OptionsLegacyParser<PutApiHaulageByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiHaulageById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiHaulageByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiHaulageByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiHaulageByIdResponse, AxiosError<DeleteApiHaulageByIdError>, OptionsLegacyParser<DeleteApiHaulageByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiHaulageById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiHaulageSearchQueryKey = (options?: OptionsLegacyParser<PostApiHaulageSearchData>) => [
    createQueryKey('postApiHaulageSearch', options)
];

export const postApiHaulageSearchOptions = (options?: OptionsLegacyParser<PostApiHaulageSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiHaulageSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiHaulageSearchQueryKey(options)
    });
};

export const postApiHaulageSearchMutation = (options?: Partial<OptionsLegacyParser<PostApiHaulageSearchData>>) => {
    const mutationOptions: UseMutationOptions<PostApiHaulageSearchResponse, AxiosError<PostApiHaulageSearchError>, OptionsLegacyParser<PostApiHaulageSearchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiHaulageSearch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiHaulageByIdPayloadQueryKey = (options: OptionsLegacyParser<GetApiHaulageByIdPayloadData>) => [
    createQueryKey('getApiHaulageByIdPayload', options)
];

export const getApiHaulageByIdPayloadOptions = (options: OptionsLegacyParser<GetApiHaulageByIdPayloadData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiHaulageByIdPayload({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiHaulageByIdPayloadQueryKey(options)
    });
};

export const getQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('get', options)
];

export const getOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await get({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getQueryKey(options)
    });
};

export const getErrorQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getError', options)
];

export const getErrorOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getError({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getErrorQueryKey(options)
    });
};

export const getApiMiscellaneousQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiMiscellaneous', options)
];

export const getApiMiscellaneousOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiMiscellaneous({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiMiscellaneousQueryKey(options)
    });
};

export const postApiMiscellaneousQueryKey = (options?: OptionsLegacyParser<PostApiMiscellaneousData>) => [
    createQueryKey('postApiMiscellaneous', options)
];

export const postApiMiscellaneousOptions = (options?: OptionsLegacyParser<PostApiMiscellaneousData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiMiscellaneous({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiMiscellaneousQueryKey(options)
    });
};

export const postApiMiscellaneousMutation = (options?: Partial<OptionsLegacyParser<PostApiMiscellaneousData>>) => {
    const mutationOptions: UseMutationOptions<PostApiMiscellaneousResponse, AxiosError<PostApiMiscellaneousError>, OptionsLegacyParser<PostApiMiscellaneousData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiMiscellaneous({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiMiscellaneousByIdQueryKey = (options: OptionsLegacyParser<GetApiMiscellaneousByIdData>) => [
    createQueryKey('getApiMiscellaneousById', options)
];

export const getApiMiscellaneousByIdOptions = (options: OptionsLegacyParser<GetApiMiscellaneousByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiMiscellaneousById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiMiscellaneousByIdQueryKey(options)
    });
};

export const putApiMiscellaneousByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiMiscellaneousByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiMiscellaneousByIdResponse, AxiosError<PutApiMiscellaneousByIdError>, OptionsLegacyParser<PutApiMiscellaneousByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiMiscellaneousById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiMiscellaneousByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiMiscellaneousByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiMiscellaneousByIdResponse, AxiosError<DeleteApiMiscellaneousByIdError>, OptionsLegacyParser<DeleteApiMiscellaneousByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiMiscellaneousById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiMiscellaneousSearchQueryKey = (options?: OptionsLegacyParser<PostApiMiscellaneousSearchData>) => [
    createQueryKey('postApiMiscellaneousSearch', options)
];

export const postApiMiscellaneousSearchOptions = (options?: OptionsLegacyParser<PostApiMiscellaneousSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiMiscellaneousSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiMiscellaneousSearchQueryKey(options)
    });
};

export const postApiMiscellaneousSearchMutation = (options?: Partial<OptionsLegacyParser<PostApiMiscellaneousSearchData>>) => {
    const mutationOptions: UseMutationOptions<PostApiMiscellaneousSearchResponse, AxiosError<PostApiMiscellaneousSearchError>, OptionsLegacyParser<PostApiMiscellaneousSearchData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiMiscellaneousSearch({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiMiscellaneousProviderByServiceProviderIdQueryKey = (options: OptionsLegacyParser<GetApiMiscellaneousProviderByServiceProviderIdData>) => [
    createQueryKey('getApiMiscellaneousProviderByServiceProviderId', options)
];

export const getApiMiscellaneousProviderByServiceProviderIdOptions = (options: OptionsLegacyParser<GetApiMiscellaneousProviderByServiceProviderIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiMiscellaneousProviderByServiceProviderId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiMiscellaneousProviderByServiceProviderIdQueryKey(options)
    });
};

export const getApiMiscellaneousValidByValidDateQueryKey = (options: OptionsLegacyParser<GetApiMiscellaneousValidByValidDateData>) => [
    createQueryKey('getApiMiscellaneousValidByValidDate', options)
];

export const getApiMiscellaneousValidByValidDateOptions = (options: OptionsLegacyParser<GetApiMiscellaneousValidByValidDateData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiMiscellaneousValidByValidDate({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiMiscellaneousValidByValidDateQueryKey(options)
    });
};

export const postApiOcrExtractTextQueryKey = (options?: OptionsLegacyParser<PostApiOcrExtractTextData>) => [
    createQueryKey('postApiOcrExtractText', options)
];

export const postApiOcrExtractTextOptions = (options?: OptionsLegacyParser<PostApiOcrExtractTextData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiOcrExtractText({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiOcrExtractTextQueryKey(options)
    });
};

export const postApiOcrExtractTextMutation = (options?: Partial<OptionsLegacyParser<PostApiOcrExtractTextData>>) => {
    const mutationOptions: UseMutationOptions<PostApiOcrExtractTextResponse, AxiosError<PostApiOcrExtractTextError>, OptionsLegacyParser<PostApiOcrExtractTextData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiOcrExtractText({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiOcrExtractAndProcessQueryKey = (options?: OptionsLegacyParser<PostApiOcrExtractAndProcessData>) => [
    createQueryKey('postApiOcrExtractAndProcess', options)
];

export const postApiOcrExtractAndProcessOptions = (options?: OptionsLegacyParser<PostApiOcrExtractAndProcessData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiOcrExtractAndProcess({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiOcrExtractAndProcessQueryKey(options)
    });
};

export const postApiOcrExtractAndProcessMutation = (options?: Partial<OptionsLegacyParser<PostApiOcrExtractAndProcessData>>) => {
    const mutationOptions: UseMutationOptions<PostApiOcrExtractAndProcessResponse, AxiosError<PostApiOcrExtractAndProcessError>, OptionsLegacyParser<PostApiOcrExtractAndProcessData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiOcrExtractAndProcess({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiOcrBulkProcessQueryKey = (options?: OptionsLegacyParser<PostApiOcrBulkProcessData>) => [
    createQueryKey('postApiOcrBulkProcess', options)
];

export const postApiOcrBulkProcessOptions = (options?: OptionsLegacyParser<PostApiOcrBulkProcessData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiOcrBulkProcess({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiOcrBulkProcessQueryKey(options)
    });
};

export const postApiOcrBulkProcessMutation = (options?: Partial<OptionsLegacyParser<PostApiOcrBulkProcessData>>) => {
    const mutationOptions: UseMutationOptions<PostApiOcrBulkProcessResponse, AxiosError<PostApiOcrBulkProcessError>, OptionsLegacyParser<PostApiOcrBulkProcessData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiOcrBulkProcess({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiOcrProcessingStatusByJobIdQueryKey = (options: OptionsLegacyParser<GetApiOcrProcessingStatusByJobIdData>) => [
    createQueryKey('getApiOcrProcessingStatusByJobId', options)
];

export const getApiOcrProcessingStatusByJobIdOptions = (options: OptionsLegacyParser<GetApiOcrProcessingStatusByJobIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiOcrProcessingStatusByJobId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiOcrProcessingStatusByJobIdQueryKey(options)
    });
};

export const getApiSeaFreightSearchQueryKey = (options?: OptionsLegacyParser<GetApiSeaFreightSearchData>) => [
    createQueryKey('getApiSeaFreightSearch', options)
];

export const getApiSeaFreightSearchOptions = (options?: OptionsLegacyParser<GetApiSeaFreightSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightSearchQueryKey(options)
    });
};

export const postApiSeaFreightSearchAdvancedQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightSearchAdvancedData>) => [
    createQueryKey('postApiSeaFreightSearchAdvanced', options)
];

export const postApiSeaFreightSearchAdvancedOptions = (options?: OptionsLegacyParser<PostApiSeaFreightSearchAdvancedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightSearchAdvanced({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightSearchAdvancedQueryKey(options)
    });
};

export const postApiSeaFreightSearchAdvancedMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightSearchAdvancedData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightSearchAdvancedResponse, AxiosError<PostApiSeaFreightSearchAdvancedError>, OptionsLegacyParser<PostApiSeaFreightSearchAdvancedData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightSearchAdvanced({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiSeaFreightSearchQuickQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightSearchQuickData>) => [
    createQueryKey('postApiSeaFreightSearchQuick', options)
];

export const postApiSeaFreightSearchQuickOptions = (options?: OptionsLegacyParser<PostApiSeaFreightSearchQuickData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightSearchQuick({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightSearchQuickQueryKey(options)
    });
};

export const postApiSeaFreightSearchQuickMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightSearchQuickData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightSearchQuickResponse, AxiosError<PostApiSeaFreightSearchQuickError>, OptionsLegacyParser<PostApiSeaFreightSearchQuickData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightSearchQuick({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiSeaFreightQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightData>) => [
    createQueryKey('postApiSeaFreight', options)
];

export const postApiSeaFreightOptions = (options?: OptionsLegacyParser<PostApiSeaFreightData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreight({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightQueryKey(options)
    });
};

export const postApiSeaFreightMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightResponse, AxiosError<PostApiSeaFreightError>, OptionsLegacyParser<PostApiSeaFreightData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreight({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiSeaFreightQueryKey = (options?: OptionsLegacyParser<GetApiSeaFreightData>) => [
    createQueryKey('getApiSeaFreight', options)
];

export const getApiSeaFreightOptions = (options?: OptionsLegacyParser<GetApiSeaFreightData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreight({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightQueryKey(options)
    });
};

export const getApiSeaFreightByIdQueryKey = (options: OptionsLegacyParser<GetApiSeaFreightByIdData>) => [
    createQueryKey('getApiSeaFreightById', options)
];

export const getApiSeaFreightByIdOptions = (options: OptionsLegacyParser<GetApiSeaFreightByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightByIdQueryKey(options)
    });
};

export const putApiSeaFreightByIdMutation = (options?: Partial<OptionsLegacyParser<PutApiSeaFreightByIdData>>) => {
    const mutationOptions: UseMutationOptions<PutApiSeaFreightByIdResponse, AxiosError<PutApiSeaFreightByIdError>, OptionsLegacyParser<PutApiSeaFreightByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiSeaFreightById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteApiSeaFreightByIdMutation = (options?: Partial<OptionsLegacyParser<DeleteApiSeaFreightByIdData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiSeaFreightByIdResponse, AxiosError<DeleteApiSeaFreightByIdError>, OptionsLegacyParser<DeleteApiSeaFreightByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiSeaFreightById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiSeaFreightQuoteByQuoteNumberQueryKey = (options: OptionsLegacyParser<GetApiSeaFreightQuoteByQuoteNumberData>) => [
    createQueryKey('getApiSeaFreightQuoteByQuoteNumber', options)
];

export const getApiSeaFreightQuoteByQuoteNumberOptions = (options: OptionsLegacyParser<GetApiSeaFreightQuoteByQuoteNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightQuoteByQuoteNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightQuoteByQuoteNumberQueryKey(options)
    });
};

export const getApiSeaFreightCarrierByCarrierIdQueryKey = (options: OptionsLegacyParser<GetApiSeaFreightCarrierByCarrierIdData>) => [
    createQueryKey('getApiSeaFreightCarrierByCarrierId', options)
];

export const getApiSeaFreightCarrierByCarrierIdOptions = (options: OptionsLegacyParser<GetApiSeaFreightCarrierByCarrierIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightCarrierByCarrierId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightCarrierByCarrierIdQueryKey(options)
    });
};

export const getApiSeaFreightValidQueryKey = (options?: OptionsLegacyParser<GetApiSeaFreightValidData>) => [
    createQueryKey('getApiSeaFreightValid', options)
];

export const getApiSeaFreightValidOptions = (options?: OptionsLegacyParser<GetApiSeaFreightValidData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightValid({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightValidQueryKey(options)
    });
};

export const getApiSeaFreightRouteQueryKey = (options: OptionsLegacyParser<GetApiSeaFreightRouteData>) => [
    createQueryKey('getApiSeaFreightRoute', options)
];

export const getApiSeaFreightRouteOptions = (options: OptionsLegacyParser<GetApiSeaFreightRouteData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightRoute({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightRouteQueryKey(options)
    });
};

export const postApiSeaFreightAnalyticsAggregationsQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightAnalyticsAggregationsData>) => [
    createQueryKey('postApiSeaFreightAnalyticsAggregations', options)
];

export const postApiSeaFreightAnalyticsAggregationsOptions = (options?: OptionsLegacyParser<PostApiSeaFreightAnalyticsAggregationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightAnalyticsAggregations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightAnalyticsAggregationsQueryKey(options)
    });
};

export const postApiSeaFreightAnalyticsAggregationsMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightAnalyticsAggregationsData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightAnalyticsAggregationsResponse, AxiosError<PostApiSeaFreightAnalyticsAggregationsError>, OptionsLegacyParser<PostApiSeaFreightAnalyticsAggregationsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightAnalyticsAggregations({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiSeaFreightAnalyticsPopularRoutesQueryKey = (options?: OptionsLegacyParser<GetApiSeaFreightAnalyticsPopularRoutesData>) => [
    createQueryKey('getApiSeaFreightAnalyticsPopularRoutes', options)
];

export const getApiSeaFreightAnalyticsPopularRoutesOptions = (options?: OptionsLegacyParser<GetApiSeaFreightAnalyticsPopularRoutesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightAnalyticsPopularRoutes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightAnalyticsPopularRoutesQueryKey(options)
    });
};

export const getApiSeaFreightAnalyticsTopCarriersQueryKey = (options?: OptionsLegacyParser<GetApiSeaFreightAnalyticsTopCarriersData>) => [
    createQueryKey('getApiSeaFreightAnalyticsTopCarriers', options)
];

export const getApiSeaFreightAnalyticsTopCarriersOptions = (options?: OptionsLegacyParser<GetApiSeaFreightAnalyticsTopCarriersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightAnalyticsTopCarriers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightAnalyticsTopCarriersQueryKey(options)
    });
};

export const getApiSeaFreightAnalyticsPriceStatisticsQueryKey = (options?: OptionsLegacyParser<GetApiSeaFreightAnalyticsPriceStatisticsData>) => [
    createQueryKey('getApiSeaFreightAnalyticsPriceStatistics', options)
];

export const getApiSeaFreightAnalyticsPriceStatisticsOptions = (options?: OptionsLegacyParser<GetApiSeaFreightAnalyticsPriceStatisticsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightAnalyticsPriceStatistics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightAnalyticsPriceStatisticsQueryKey(options)
    });
};

export const deleteApiSeaFreightCacheMutation = (options?: Partial<OptionsLegacyParser<DeleteApiSeaFreightCacheData>>) => {
    const mutationOptions: UseMutationOptions<DeleteApiSeaFreightCacheResponse, AxiosError<DeleteApiSeaFreightCacheError>, OptionsLegacyParser<DeleteApiSeaFreightCacheData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiSeaFreightCache({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiSeaFreightCacheStatisticsQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiSeaFreightCacheStatistics', options)
];

export const getApiSeaFreightCacheStatisticsOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightCacheStatistics({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightCacheStatisticsQueryKey(options)
    });
};

export const postApiSeaFreightUtilitiesGenerateQuoteNumbersQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('postApiSeaFreightUtilitiesGenerateQuoteNumbers', options)
];

export const postApiSeaFreightUtilitiesGenerateQuoteNumbersOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightUtilitiesGenerateQuoteNumbers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightUtilitiesGenerateQuoteNumbersQueryKey(options)
    });
};

export const postApiSeaFreightUtilitiesGenerateQuoteNumbersMutation = (options?: Partial<OptionsLegacyParser>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightUtilitiesGenerateQuoteNumbersResponse, AxiosError<PostApiSeaFreightUtilitiesGenerateQuoteNumbersError>, OptionsLegacyParser> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightUtilitiesGenerateQuoteNumbers({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiSeaFreightUtilitiesValidateQuoteByQuoteNumberQueryKey = (options: OptionsLegacyParser<GetApiSeaFreightUtilitiesValidateQuoteByQuoteNumberData>) => [
    createQueryKey('getApiSeaFreightUtilitiesValidateQuoteByQuoteNumber', options)
];

export const getApiSeaFreightUtilitiesValidateQuoteByQuoteNumberOptions = (options: OptionsLegacyParser<GetApiSeaFreightUtilitiesValidateQuoteByQuoteNumberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightUtilitiesValidateQuoteByQuoteNumber({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightUtilitiesValidateQuoteByQuoteNumberQueryKey(options)
    });
};

export const postApiSeaFreightComparisonCompareQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonCompareData>) => [
    createQueryKey('postApiSeaFreightComparisonCompare', options)
];

export const postApiSeaFreightComparisonCompareOptions = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonCompareData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightComparisonCompare({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightComparisonCompareQueryKey(options)
    });
};

export const postApiSeaFreightComparisonCompareMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightComparisonCompareData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightComparisonCompareResponse, AxiosError<PostApiSeaFreightComparisonCompareError>, OptionsLegacyParser<PostApiSeaFreightComparisonCompareData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightComparisonCompare({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiSeaFreightComparisonImportAndCompareQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonImportAndCompareData>) => [
    createQueryKey('postApiSeaFreightComparisonImportAndCompare', options)
];

export const postApiSeaFreightComparisonImportAndCompareOptions = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonImportAndCompareData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightComparisonImportAndCompare({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightComparisonImportAndCompareQueryKey(options)
    });
};

export const postApiSeaFreightComparisonImportAndCompareMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightComparisonImportAndCompareData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightComparisonImportAndCompareResponse, AxiosError<PostApiSeaFreightComparisonImportAndCompareError>, OptionsLegacyParser<PostApiSeaFreightComparisonImportAndCompareData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightComparisonImportAndCompare({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiSeaFreightComparisonDefaultCriteriaQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiSeaFreightComparisonDefaultCriteria', options)
];

export const getApiSeaFreightComparisonDefaultCriteriaOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiSeaFreightComparisonDefaultCriteria({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiSeaFreightComparisonDefaultCriteriaQueryKey(options)
    });
};

export const postApiSeaFreightComparisonSearchAndCompareQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonSearchAndCompareData>) => [
    createQueryKey('postApiSeaFreightComparisonSearchAndCompare', options)
];

export const postApiSeaFreightComparisonSearchAndCompareOptions = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonSearchAndCompareData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightComparisonSearchAndCompare({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightComparisonSearchAndCompareQueryKey(options)
    });
};

export const postApiSeaFreightComparisonSearchAndCompareMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightComparisonSearchAndCompareData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightComparisonSearchAndCompareResponse, AxiosError<PostApiSeaFreightComparisonSearchAndCompareError>, OptionsLegacyParser<PostApiSeaFreightComparisonSearchAndCompareData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightComparisonSearchAndCompare({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeQueryKey = (options: OptionsLegacyParser<PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeData>) => [
    createQueryKey('postApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCode', options)
];

export const postApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeOptions = (options: OptionsLegacyParser<PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeQueryKey(options)
    });
};

export const postApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeResponse, AxiosError<PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeError>, OptionsLegacyParser<PostApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCodeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightComparisonRouteByOriginPortCodeByDestinationPortCode({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiSeaFreightComparisonCarrierByCarrierIdQueryKey = (options: OptionsLegacyParser<PostApiSeaFreightComparisonCarrierByCarrierIdData>) => [
    createQueryKey('postApiSeaFreightComparisonCarrierByCarrierId', options)
];

export const postApiSeaFreightComparisonCarrierByCarrierIdOptions = (options: OptionsLegacyParser<PostApiSeaFreightComparisonCarrierByCarrierIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightComparisonCarrierByCarrierId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightComparisonCarrierByCarrierIdQueryKey(options)
    });
};

export const postApiSeaFreightComparisonCarrierByCarrierIdMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightComparisonCarrierByCarrierIdData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightComparisonCarrierByCarrierIdResponse, AxiosError<PostApiSeaFreightComparisonCarrierByCarrierIdError>, OptionsLegacyParser<PostApiSeaFreightComparisonCarrierByCarrierIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightComparisonCarrierByCarrierId({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiSeaFreightComparisonValidQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonValidData>) => [
    createQueryKey('postApiSeaFreightComparisonValid', options)
];

export const postApiSeaFreightComparisonValidOptions = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonValidData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightComparisonValid({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightComparisonValidQueryKey(options)
    });
};

export const postApiSeaFreightComparisonValidMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightComparisonValidData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightComparisonValidResponse, AxiosError<PostApiSeaFreightComparisonValidError>, OptionsLegacyParser<PostApiSeaFreightComparisonValidData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightComparisonValid({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiSeaFreightComparisonAllQueryKey = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonAllData>) => [
    createQueryKey('postApiSeaFreightComparisonAll', options)
];

export const postApiSeaFreightComparisonAllOptions = (options?: OptionsLegacyParser<PostApiSeaFreightComparisonAllData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiSeaFreightComparisonAll({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiSeaFreightComparisonAllQueryKey(options)
    });
};

export const postApiSeaFreightComparisonAllMutation = (options?: Partial<OptionsLegacyParser<PostApiSeaFreightComparisonAllData>>) => {
    const mutationOptions: UseMutationOptions<PostApiSeaFreightComparisonAllResponse, AxiosError<PostApiSeaFreightComparisonAllError>, OptionsLegacyParser<PostApiSeaFreightComparisonAllData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiSeaFreightComparisonAll({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiWebhookMakecomQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('postApiWebhookMakecom', options)
];

export const postApiWebhookMakecomOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiWebhookMakecom({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiWebhookMakecomQueryKey(options)
    });
};

export const postApiWebhookMakecomMutation = (options?: Partial<OptionsLegacyParser>) => {
    const mutationOptions: UseMutationOptions<PostApiWebhookMakecomResponse, AxiosError<PostApiWebhookMakecomError>, OptionsLegacyParser> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiWebhookMakecom({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiWebhookTestQueryKey = (options?: OptionsLegacyParser) => [
    createQueryKey('getApiWebhookTest', options)
];

export const getApiWebhookTestOptions = (options?: OptionsLegacyParser) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiWebhookTest({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiWebhookTestQueryKey(options)
    });
};