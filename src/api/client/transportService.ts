/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * LIS Transport API
 * OpenAPI spec version: v1
 */
import type {
  CityViewModel,
  ContainerViewModel,
  CreatedServiceViewModel,
  GetPackageContainersParams,
  GetPortsParams,
  GetProductParams,
  GetServiceParams,
  PortViewModel,
  ProductViewModel,
  ServiceViewModel
} from './schemas/transport'
import { axiosInstanceTransport } from './axiosInstanceTransport';




  export const getLISTransportAPI = () => {
const getCityCities = (
    
 ) => {
      return axiosInstanceTransport<CityViewModel[]>(
      {url: `/City/Cities`, method: 'GET'
    },
      );
    }
  
const getPackageContainers = (
    params?: GetPackageContainersParams,
 ) => {
      return axiosInstanceTransport<ContainerViewModel[]>(
      {url: `/Package/Containers`, method: 'GET',
        params
    },
      );
    }
  
const getPorts = (
    params?: GetPortsParams,
 ) => {
      return axiosInstanceTransport<PortViewModel[]>(
      {url: `/Port/Ports`, method: 'GET',
        params
    },
      );
    }
  
const getPort = (
    id: number,
 ) => {
      return axiosInstanceTransport<PortViewModel>(
      {url: `/Port/GetPort/${id}`, method: 'GET'
    },
      );
    }
  
const createPort = (
    portViewModel: PortViewModel,
 ) => {
      return axiosInstanceTransport<PortViewModel>(
      {url: `/Port/CreatePort`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: portViewModel
    },
      );
    }
  
const updatePort = (
    id: number,
    portViewModel: PortViewModel,
 ) => {
      return axiosInstanceTransport<void>(
      {url: `/Port/UpdatePort/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: portViewModel
    },
      );
    }
  
const deletePort = (
    id: number,
 ) => {
      return axiosInstanceTransport<void>(
      {url: `/Port/DeletePort/${id}`, method: 'DELETE'
    },
      );
    }
  
const getProduct = (
    params?: GetProductParams,
 ) => {
      return axiosInstanceTransport<ProductViewModel[]>(
      {url: `/Product`, method: 'GET',
        params
    },
      );
    }
  
const postProduct = (
    productViewModel: ProductViewModel,
 ) => {
      return axiosInstanceTransport<ProductViewModel>(
      {url: `/Product`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productViewModel
    },
      );
    }
  
const getProductId = (
    id: number,
 ) => {
      return axiosInstanceTransport<ProductViewModel>(
      {url: `/Product/${id}`, method: 'GET'
    },
      );
    }
  
const putProductId = (
    id: number,
    productViewModel: ProductViewModel,
 ) => {
      return axiosInstanceTransport<void>(
      {url: `/Product/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: productViewModel
    },
      );
    }
  
const deleteProductId = (
    id: number,
 ) => {
      return axiosInstanceTransport<void>(
      {url: `/Product/${id}`, method: 'DELETE'
    },
      );
    }
  
const postService = (
    createdServiceViewModel: CreatedServiceViewModel,
 ) => {
      return axiosInstanceTransport<number>(
      {url: `/Service`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createdServiceViewModel
    },
      );
    }
  
/**
 * @summary Retrieve services and types
 */
const getService = (
    params?: GetServiceParams,
 ) => {
      return axiosInstanceTransport<ServiceViewModel[]>(
      {url: `/Service`, method: 'GET',
        params
    },
      );
    }
  
const getServiceServiceId = (
    serviceId: number,
 ) => {
      return axiosInstanceTransport<ServiceViewModel>(
      {url: `/Service/${serviceId}`, method: 'GET'
    },
      );
    }
  
const putServiceServiceId = (
    serviceId: number,
    serviceViewModel: ServiceViewModel,
 ) => {
      return axiosInstanceTransport<void>(
      {url: `/Service/${serviceId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: serviceViewModel
    },
      );
    }
  
const deleteServiceServiceId = (
    serviceId: number,
 ) => {
      return axiosInstanceTransport<void>(
      {url: `/Service/${serviceId}`, method: 'DELETE'
    },
      );
    }
  
return {getCityCities,getPackageContainers,getPorts,getPort,createPort,updatePort,deletePort,getProduct,postProduct,getProductId,putProductId,deleteProductId,postService,getService,getServiceServiceId,putServiceServiceId,deleteServiceServiceId}};
export type GetCityCitiesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['getCityCities']>>>
export type GetPackageContainersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['getPackageContainers']>>>
export type GetPortsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['getPorts']>>>
export type GetPortResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['getPort']>>>
export type CreatePortResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['createPort']>>>
export type UpdatePortResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['updatePort']>>>
export type DeletePortResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['deletePort']>>>
export type GetProductResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['getProduct']>>>
export type PostProductResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['postProduct']>>>
export type GetProductIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['getProductId']>>>
export type PutProductIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['putProductId']>>>
export type DeleteProductIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['deleteProductId']>>>
export type PostServiceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['postService']>>>
export type GetServiceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['getService']>>>
export type GetServiceServiceIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['getServiceServiceId']>>>
export type PutServiceServiceIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['putServiceServiceId']>>>
export type DeleteServiceServiceIdResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getLISTransportAPI>['deleteServiceServiceId']>>>
