// This file is auto-generated by @hey-api/openapi-ts

export enum CategoryEnum {
    CUSTOMERS = 'customers',
    SUPPLIERS = 'suppliers',
    CHARGEUR = 'chargeur',
    RECEIVERS = 'receivers',
    SHIPPING_LINE = 'shippingLine',
    SHIPPING_AGENT = 'shippingAgent'
}

export type OrderDto = {
    orderId?: number;
    orderNumber?: (string) | null;
    customerId?: number;
    sellerId?: (number) | null;
    buyerId?: (number) | null;
    customerName?: (string) | null;
    sellerName?: (string) | null;
    buyerName?: (string) | null;
    refClient?: (string) | null;
    refSeller?: (string) | null;
    refBuyer?: (string) | null;
    incoTerm?: (string) | null;
    incotermDestination?: (string) | null;
    fiscalYear?: number;
    exportation?: boolean;
    city?: (number) | null;
    cityName?: (string) | null;
    cityIncotermTo?: (number) | null;
    cityNameIncotermTo?: (string) | null;
    shippingLine?: (string) | null;
    shipLineId?: (number) | null;
    orderStatus?: number;
    refShippingAgent?: (string) | null;
    shippingAgentName?: (string) | null;
    shippingAgent?: (number) | null;
    shipName?: (string) | null;
    shipId?: (number) | null;
    loadingPort?: (string) | null;
    departurePort?: (number) | null;
    dischargePort?: (string) | null;
    destinationPort?: (number) | null;
    estimatedDepartureDate?: (Date) | null;
    estimatedArrivalDate?: (Date) | null;
};

export enum OrderRoleEnum {
    SAME_FOLDER = 'SAME_FOLDER',
    INVOICE = 'INVOICE',
    DOCUMENTATION = 'DOCUMENTATION',
    OPERATIONS = 'OPERATIONS'
}

export enum OrderStatusEnum {
    OPEN = 'OPEN',
    COMPLETED = 'COMPLETED',
    VALIDATED = 'VALIDATED',
    CLOSED = 'CLOSED',
    CANCELLED = 'CANCELLED',
    DOCS_SENT = 'DOCS_SENT',
    PAID = 'PAID'
}

export type ResponseOrdersListDto = {
    orderId?: number;
    orderNumber?: (string) | null;
    orderDate?: Date;
    fiscalYear?: number;
    customerName?: (string) | null;
    sellerName?: (string) | null;
    buyerName?: (string) | null;
    loadingPort?: (string) | null;
    dischargePort?: (string) | null;
    estimatedDepartureDate?: (Date) | null;
    estimatedArrivalDate?: (Date) | null;
    shipName?: (string) | null;
    shippingLine?: (string) | null;
    exportation?: (boolean) | null;
    orderStatus?: OrderStatusEnum;
};

export type GetOrdersData = {
    query?: {
        AllFiles?: boolean;
        Contact?: number;
        ContactType?: CategoryEnum;
        ContainerNumber?: string;
        DischargePort?: number;
        Export?: boolean;
        Fiscal?: number;
        From?: Date;
        LoadingPort?: number;
        Month?: number;
        OrderRole?: OrderRoleEnum;
        Status?: OrderStatusEnum;
        To?: Date;
        UsersId?: Array<(number)>;
    };
};

export type GetOrdersResponse = (Array<ResponseOrdersListDto>);

export type GetOrdersError = (unknown);

export type GetOrderByIdData = {
    path: {
        /**
         * Identifiant
         */
        orderId: number;
    };
};

export type GetOrderByIdResponse = (OrderDto);

export type GetOrderByIdError = (unknown);

export type GetOrdersResponseTransformer = (data: any) => Promise<GetOrdersResponse>;

export type ResponseOrdersListDtoModelResponseTransformer = (data: any) => ResponseOrdersListDto;

export const ResponseOrdersListDtoModelResponseTransformer: ResponseOrdersListDtoModelResponseTransformer = data => {
    if (data?.orderDate) {
        data.orderDate = new Date(data.orderDate);
    }
    if (data?.estimatedDepartureDate) {
        data.estimatedDepartureDate = new Date(data.estimatedDepartureDate);
    }
    if (data?.estimatedArrivalDate) {
        data.estimatedArrivalDate = new Date(data.estimatedArrivalDate);
    }
    return data;
};

export const GetOrdersResponseTransformer: GetOrdersResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(ResponseOrdersListDtoModelResponseTransformer);
    }
    return data;
};

export type GetOrderByIdResponseTransformer = (data: any) => Promise<GetOrderByIdResponse>;

export type OrderDtoModelResponseTransformer = (data: any) => OrderDto;

export const OrderDtoModelResponseTransformer: OrderDtoModelResponseTransformer = data => {
    if (data?.estimatedDepartureDate) {
        data.estimatedDepartureDate = new Date(data.estimatedDepartureDate);
    }
    if (data?.estimatedArrivalDate) {
        data.estimatedArrivalDate = new Date(data.estimatedArrivalDate);
    }
    return data;
};

export const GetOrderByIdResponseTransformer: GetOrderByIdResponseTransformer = async (data) => {
    OrderDtoModelResponseTransformer(data);
    return data;
};